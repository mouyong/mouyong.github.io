<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>应用配置管理 ACM</title>
      <link href="/yun-wei/application-configuration-management-acm/"/>
      <url>/yun-wei/application-configuration-management-acm/</url>
      
        <content type="html"><![CDATA[<h1 id="应用配置管理-ACM"><a href="#应用配置管理-ACM" class="headerlink" title="应用配置管理 ACM"></a>应用配置管理 ACM</h1><h2 id="登录控制台，选择合适的地域"><a href="#登录控制台，选择合适的地域" class="headerlink" title="登录控制台，选择合适的地域"></a>登录控制台，选择合适的地域</h2><p>控制台：<a href="https://acm.console.aliyun.com/" target="_blank" rel="noopener">https://acm.console.aliyun.com/</a></p><h2 id="新增配置"><a href="#新增配置" class="headerlink" title="新增配置"></a>新增配置</h2><p>点击配置列表-&gt;创建，进入配置新增页。</p><p>注: 点击“显示高级选项”，便于更好的进行配置管理与归类。</p><h2 id="字段说明"><a href="#字段说明" class="headerlink" title="字段说明"></a>字段说明</h2><p>Data ID: 配置名 (需要唯一，示例：blog.env、config.json)<br>Group: 配置分组 (可自定义自己习惯的分组方式，示例：production、test)<br>归属应用: 应用名 (建议填写)<br>数据加密: 保持关闭即可<br>配置格式: 高亮作用。保持默认即可<br>配置内容: 项目的配置内容</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="acm-create-example.png" alt="acm-create-example"></p><h2 id="发布配置"><a href="#发布配置" class="headerlink" title="发布配置"></a>发布配置</h2><p>点击发布，提示新建配置成功后。即可点击菜单栏的返回，在列表中看到新增的配置。</p><p><img src="acm-list.png" alt="acm-list"></p><p>点击示例代码，根据需要选择项目获取配置文件的方式。推荐使用 shell，项目语言依赖较小。</p><p><img src="example-download-code.png" alt="example-download-code"></p><p>点击复制，将复制的内容保存到项目根目录下 acm.sh 文件中。此脚本用于下载配置文件到项目中。</p><p>对脚本内容做修改，<code>group=production</code> 改为 <code>group=${group:-production}</code>。后续可以通过变量 group 控制要同步的配置文件。</p><pre class=" language-diff"><code class="language-diff"><span class="token deleted">-group=production</span><span class="token inserted">+group=${group:-production}</span></code></pre><p><img src="example-group-changed.png" alt="example-group-changed"></p><p>下载配置文件（可将 accessKey、secretKey 保存在环境变量中）</p><p>production: <code>bash -ex group=production accessKey=$accessKey secretKey=$secretKey ./acm.sh &gt; .env</code><br>test: <code>bash -ex group=test accessKey=$accessKey secretKey=$secretKey ./acm.sh &gt; .env</code></p><h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p>本地调试可以下载到配置文件后。便可以在 devops 流程中集成了。</p><p>推荐使用“<a href="https://flow.aliyun.com/" target="_blank" rel="noopener">云效 Flow · 企业级研发交付流水线</a>”。</p><p>在“设置-&gt;通用变量组”中，配置 ACM 的 ak、sk</p><p><img src="flow-setting.png" alt="flow-setting"></p><p>在流水线“编辑-&gt;变量和缓存-&gt;通用变量组”中关联配置变量。</p><p><img src="flow-var-use.png" alt="flow-var-use"></p><p>在“流水线-&gt;步骤”中控制要同步的配置文件</p><p><img src="flow-step-use.png" alt="flow-step-use"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 项目创建</title>
      <link href="/laravel/laravel-project-creation/"/>
      <url>/laravel/laravel-project-creation/</url>
      
        <content type="html"><![CDATA[<h1 id="laravel-项目创建"><a href="#laravel-项目创建" class="headerlink" title="laravel 项目创建"></a>laravel 项目创建</h1><h2 id="项目立项"><a href="#项目立项" class="headerlink" title="项目立项"></a>项目立项</h2><ul><li>项目立项并命名: 代运营系统 agent-operation</li><li>云效建立在线 git 仓库</li></ul><h2 id="Laravel-项目创建"><a href="#Laravel-项目创建" class="headerlink" title="Laravel 项目创建"></a>Laravel 项目创建</h2><p><code>COMPOSER_MEMORY_LIMIT=-1 composer create-project --prefer-dist laravel/laravel agent-operation</code></p><h2 id="生成-env-环境配置文件"><a href="#生成-env-环境配置文件" class="headerlink" title="生成 .env 环境配置文件"></a>生成 .env 环境配置文件</h2><p>注：若需要与他人协助共同使用的变量，请在 .env.example 中添加与修改，密码、密钥等信息禁止明文写死在项目中，也禁止写在 .env.example 等会被 git 版本控制的相关环境文件中</p><ol><li>修改基础配置</li></ol><pre><code>APP_NAME=operation-agentAPP_ENV=localAPP_KEY=APP_DEBUG=trueAPP_URL=http://operation-agent.test</code></pre><ol start="2"><li>修改数据库配置</li></ol><pre><code>DB_CONNECTION=mysqlDB_HOST=127.0.0.1DB_PORT=3306DB_DATABASE=laravelDB_USERNAME=rootDB_PASSWORD=</code></pre><ol start="3"><li>修改项目运行配置</li></ol><pre><code>BROADCAST_DRIVER=logCACHE_DRIVER=fileQUEUE_CONNECTION=syncSESSION_DRIVER=fileSESSION_LIFETIME=120</code></pre><ol start="4"><li>修改缓存配置</li></ol><pre><code>REDIS_HOST=127.0.0.1REDIS_PASSWORD=nullREDIS_PORT=6379</code></pre><ol start="5"><li>其他配置可根据需要再进行修改</li></ol><ol start="6"><li>修改项目 .gitignore，添加 .idea/ 目录忽略</li></ol><h2 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h2><pre><code>cd /path/to/agent-operationgit init .git add .git commit -m "feat: 初始化项目"git remote add origin git@codeup.aliyun.com:xxx/agent-operation/agent-operation.git</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nps server 内网穿透应用搭建与使用</title>
      <link href="/nei-wang-chuan-tou/the-construction-and-use-of-nps-server-intranet-penetration-application/"/>
      <url>/nei-wang-chuan-tou/the-construction-and-use-of-nps-server-intranet-penetration-application/</url>
      
        <content type="html"><![CDATA[<h1 id="nps-server-内网穿透应用搭建与使用"><a href="#nps-server-内网穿透应用搭建与使用" class="headerlink" title="nps server 内网穿透应用搭建与使用"></a>nps server 内网穿透应用搭建与使用</h1><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><pre><code>docker pull ffdfgdfg/nps</code></pre><h2 id="下载配置文件"><a href="#下载配置文件" class="headerlink" title="下载配置文件"></a>下载配置文件</h2><pre><code>git clone https://github.com/ehang-io/nps /data/nps</code></pre><h2 id="阅读文档修改配置文件"><a href="#阅读文档修改配置文件" class="headerlink" title="阅读文档修改配置文件"></a>阅读文档修改配置文件</h2><p><a href="https://ehang-io.github.io/nps/#/example" target="_blank" rel="noopener">https://ehang-io.github.io/nps/#/example</a></p><p><code>vim /data/nps/conf/nps.conf</code></p><pre class=" language-diff"><code class="language-diff"><span class="token deleted">-http_proxy_port=80</span><span class="token deleted">-https_proxy_port=443</span><span class="token inserted">+http_proxy_port=800</span><span class="token inserted">+https_proxy_port=4430</span></code></pre><pre class=" language-diff"><code class="language-diff"><span class="token deleted">-public_vkey=123</span><span class="token inserted">+# public_vkey=123</span></code></pre><pre class=" language-diff"><code class="language-diff"><span class="token deleted">-#p2p_port=6000</span><span class="token inserted">+p2p_ip=server_ip</span><span class="token inserted">+p2p_port=6000</span></code></pre><pre class=" language-diff"><code class="language-diff"><span class="token deleted">-web_username=admin</span><span class="token deleted">-web_password=123</span><span class="token inserted">+web_username=admin_username</span><span class="token inserted">+web_password=admin_password</span></code></pre><pre class=" language-diff"><code class="language-diff"><span class="token deleted">-allow_user_login=false</span><span class="token inserted">+allow_user_login=true</span></code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre><code>docker run -d --name nps --net=host -v /data/nps/conf:/conf ffdfgdfg/nps</code></pre><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><pre><code>docker logs nps</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>服务端</li></ul><ol><li>服务端ip:web服务端口（默认为8080，见 conf/nps.conf）</li><li>使用用户名和密码登陆（默认admin/123，正式使用一定要更改）</li><li>创建客户端</li></ol><ul><li>客户端</li></ul><ol><li>下载客户端安装包并解压，进入到解压目录</li><li>点击web管理中客户端前的+号，复制启动命令</li><li>修改 conf/npc.conf 相关配置内容</li><li>执行启动命令，linux直接执行即可，windows将./npc换成npc.exe用cmd执行</li><li>如果需要注册到系统服务(开机启动、守护进程)可查看 <a href="https://ehang-io.github.io/nps/#/use?id=注册到系统服务" target="_blank" rel="noopener">注册到系统服务</a> <code>./npc install</code></li></ol><p>文档: 域名代理 <a href="https://ehang-io.github.io/nps/#/use" target="_blank" rel="noopener">https://ehang-io.github.io/nps/#/use</a></p><pre><code>[common]conn_type=tcpserver_addr=server_ip:8024vkey=client_vkey[example]host=a.proxy.comtarget_addr=127.0.0.1:80host_change=example.testheader_set_proxy=nps[example-win10]mode=tcptarget_addr=192.168.1.2:3389server_port=33891</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 内网穿透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 集成 GraphQL</title>
      <link href="/laravel/laravel-integrated-graphql/"/>
      <url>/laravel/laravel-integrated-graphql/</url>
      
        <content type="html"><![CDATA[<h1 id="Laravel-集成-GraphQL"><a href="#Laravel-集成-GraphQL" class="headerlink" title="Laravel 集成 GraphQL"></a>Laravel 集成 GraphQL</h1><h2 id="集成指引"><a href="#集成指引" class="headerlink" title="集成指引"></a>集成指引</h2><h3 id="1-安装-nuwave-lighthouse"><a href="#1-安装-nuwave-lighthouse" class="headerlink" title="1. 安装 nuwave/lighthouse"></a>1. 安装 <code>nuwave/lighthouse</code></h3><p><code>composer require nuwave/lighthouse</code></p><h3 id="2-安装在线调试工具-mll-lab-laravel-graphql-playground"><a href="#2-安装在线调试工具-mll-lab-laravel-graphql-playground" class="headerlink" title="2. 安装在线调试工具 mll-lab/laravel-graphql-playground"></a>2. 安装在线调试工具 <code>mll-lab/laravel-graphql-playground</code></h3><p><code>composer require mll-lab/laravel-graphql-playground</code></p><h3 id="3-发布默认模式与相关配置"><a href="#3-发布默认模式与相关配置" class="headerlink" title="3. 发布默认模式与相关配置"></a>3. 发布默认模式与相关配置</h3><p><code>php artisan vendor:publish --provider="Nuwave\Lighthouse\LighthouseServiceProvider"</code></p><p>会在相应目录中生成相关文件：<code>config/lighthouse.php</code>、<code>graphql/schema.graphql</code></p><h3 id="4-引入自定义-php-标量-mll-lab-graphql-php-scalars"><a href="#4-引入自定义-php-标量-mll-lab-graphql-php-scalars" class="headerlink" title="4. 引入自定义 php 标量 mll-lab/graphql-php-scalars"></a>4. 引入自定义 <code>php</code> 标量 <code>mll-lab/graphql-php-scalars</code></h3><p><code>composer require mll-lab/graphql-php-scalars</code></p><h3 id="5-更新-graphql-schema-graphql-文件"><a href="#5-更新-graphql-schema-graphql-文件" class="headerlink" title="5. 更新 graphql/schema.graphql 文件"></a>5. 更新 <code>graphql/schema.graphql</code> 文件</h3><p>1). 创建 <code>graphql/traits</code> 目录</p><p>2). 更新 <code>graphql/schema.graphql</code> 文件</p><pre><code>"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")"A date string with format `Y-m-d`, e.g. `2011-05-23`."scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")scalar Email @scalar(class: "MLL\\GraphQLScalars\\Email")scalar JSON @scalar(class: "MLL\\GraphQLScalars\\JSON")scalar Mixed @scalar(class: "MLL\\GraphQLScalars\\Mixed")type Querytype Mutation#import traits/*.graphql</code></pre><p>3). 创建 <code>traits/users.graphql</code> 文件</p><pre><code>extend type Query {    users: [User!]! @paginate(defaultCount: 10)    user(id: ID @eq): User @find}type User {    id: ID!    name: String!    email: String!    created_at: DateTime!    updated_at: DateTime!}</code></pre><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>文档：<a href="http://lighthouse-php.cn/master/security/validation.html#validate-fields" target="_blank" rel="noopener">http://lighthouse-php.cn/master/security/validation.html#validate-fields</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 集成 jwt-auth</title>
      <link href="/laravel/laravel-integrated-with-jwt-auth/"/>
      <url>/laravel/laravel-integrated-with-jwt-auth/</url>
      
        <content type="html"><![CDATA[<h1 id="Laravel-集成-jwt-auth"><a href="#Laravel-集成-jwt-auth" class="headerlink" title="Laravel 集成 jwt-auth"></a>Laravel 集成 jwt-auth</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-安装-jwt-auth"><a href="#1-安装-jwt-auth" class="headerlink" title="1. 安装 jwt-auth"></a>1. 安装 jwt-auth</h3><p><code>composer require tymon/jwt-auth</code></p><h3 id="2-发布配置"><a href="#2-发布配置" class="headerlink" title="2. 发布配置"></a>2. 发布配置</h3><p><code>php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"</code></p><h3 id="3-生成密钥"><a href="#3-生成密钥" class="headerlink" title="3. 生成密钥"></a>3. 生成密钥</h3><p><code>php artisan jwt:secret</code></p><h3 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4. 配置环境变量"></a>4. 配置环境变量</h3><p>添加环境变量至相关文件: .env.example、.env etc…</p><pre><code># jwt 配置JWT_SECRET=JWT_TTL=60 # jwt token 失效时间，单位分钟，默认值 1 小时JWT_REFRESH_TTL=20160 # jwt refresh token 失效时间，单位分钟，默认值 2 周</code></pre><h3 id="5-用户认证"><a href="#5-用户认证" class="headerlink" title="5. 用户认证"></a>5. 用户认证</h3><p>快速开始：<a href="https://jwt-auth.readthedocs.io/en/develop/quick-start/" target="_blank" rel="noopener">https://jwt-auth.readthedocs.io/en/develop/quick-start/</a></p><h4 id="1-更新-User-模型"><a href="#1-更新-User-模型" class="headerlink" title="1). 更新 User 模型"></a>1). 更新 <code>User</code> 模型</h4><p>实现 <code>Tymon\JWTAuth\Contracts\JWTSubject</code> 契约，在 <code>User</code> 模型中实现 <code>getJWTIdentifier()</code> 函数和 <code>getJWTCustomClaims()</code> 函数</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Tymon<span class="token punctuation">\</span>JWTAuth<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>JWTSubject</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Notifications<span class="token punctuation">\</span>Notifiable</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>User</span> <span class="token keyword">as</span> Authenticatable<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Authenticatable</span> <span class="token keyword">implements</span> <span class="token class-name">JWTSubject</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Notifiable</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Rest omitted for brevity</span>    <span class="token comment" spellcheck="true">/**     * Get the identifier that will be stored in the subject claim of the JWT.     *     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getJWTIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Return a key value array, containing any custom claims to be added to the JWT.     *     * @return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getJWTCustomClaims</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">username</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$username</span> <span class="token operator">=</span> \<span class="token package">request</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token constant">FILTER_VALIDATE_INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'mobile'</span><span class="token punctuation">;</span>        <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token constant">FILTER_VALIDATE_EMAIL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'email'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'name'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-配置身份认证守卫"><a href="#2-配置身份认证守卫" class="headerlink" title="2). 配置身份认证守卫"></a>2). 配置身份认证守卫</h4><ul><li>修改 <code>config/auth.php</code> 的 <code>defaults.guard</code> 为 <code>api</code></li><li>修改 <code>config/auth.php</code> 的 <code>guards</code> 信息，参考如下</li></ul><pre><code>'guards' =&gt; [    'web' =&gt; [        'driver' =&gt; 'session',        'provider' =&gt; 'users',    ],    # laravel 自带的 api 认证，使用数据库相关字段存储 api token 信息    'laravel-api' =&gt; [        'driver' =&gt; 'token',        'provider' =&gt; 'users',        'hash' =&gt; false,    ],    'api' =&gt; [        'driver' =&gt; 'jwt',        'provider' =&gt; 'users',    ],],</code></pre><h4 id="3-添加一些基本的身份验证路由"><a href="#3-添加一些基本的身份验证路由" class="headerlink" title="3). 添加一些基本的身份验证路由"></a>3). 添加一些基本的身份验证路由</h4><p>在 <code>routes/api.php</code> 中添加如下路由：</p><pre><code>use App\Http\Controllers as Api;Route::post('auth/login', [Api\AuthController::class, 'login']);Route::group([    'middleware' =&gt; 'auth:api',], function ($router) {    Route::post('auth/logout', [Api\AuthController::class, 'logout']);    Route::post('auth/refresh', [Api\AuthController::class, 'refresh']);    Route::post('auth/me', [Api\AuthController::class, 'me']);});</code></pre><h4 id="4-创建-AuthController-控制器"><a href="#4-创建-AuthController-控制器" class="headerlink" title="4). 创建 AuthController 控制器"></a>4). 创建 <code>AuthController</code> 控制器</h4><p>输入命令 <code>php artisan make:controller AuthController</code> 创建控制器</p><pre><code>&lt;?phpnamespace App\Http\Controllers;use Illuminate\Support\Facades\Auth;use App\Http\Controllers\Controller;class AuthController extends Controller{    /**     * Get a JWT via given credentials.     *     * @return \Illuminate\Http\JsonResponse     */    public function login()    {        $credentials = request(['email', 'password']);        if (! $token = auth()-&gt;attempt($credentials)) {            return response()-&gt;json(['error' =&gt; 'Unauthorized'], 401);        }        return $this-&gt;respondWithToken($token);    }    /**     * Get the authenticated User.     *     * @return \Illuminate\Http\JsonResponse     */    public function me()    {        return response()-&gt;json(auth()-&gt;user());    }    /**     * Log the user out (Invalidate the token).     *     * @return \Illuminate\Http\JsonResponse     */    public function logout()    {        auth()-&gt;logout();        return response()-&gt;json(['message' =&gt; 'Successfully logged out']);    }    /**     * Refresh a token.     *     * @return \Illuminate\Http\JsonResponse     */    public function refresh()    {        return $this-&gt;respondWithToken(auth()-&gt;refresh());    }    /**     * Get the token array structure.     *     * @param  string $token     *     * @return \Illuminate\Http\JsonResponse     */    protected function respondWithToken($token)    {        return response()-&gt;json([            'access_token' =&gt; $token,            'token_type' =&gt; 'bearer',            'expires_in' =&gt; auth()-&gt;factory()-&gt;getTTL() * 60        ]);    }}</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>jwt-auth 文档: <a href="https://jwt-auth.readthedocs.io/en/develop/laravel-installation/" target="_blank" rel="noopener">https://jwt-auth.readthedocs.io/en/develop/laravel-installation/</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
            <tag> jwt-auth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 集成用户登录</title>
      <link href="/uncategorized/laravel-integrated-user-login/"/>
      <url>/uncategorized/laravel-integrated-user-login/</url>
      
        <content type="html"><![CDATA[<h1 id="Laravel-集成用户登录"><a href="#Laravel-集成用户登录" class="headerlink" title="Laravel 集成用户登录"></a>Laravel 集成用户登录</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-安装-laravel-ui"><a href="#1-安装-laravel-ui" class="headerlink" title="1. 安装 laravel/ui"></a>1. 安装 <code>laravel/ui</code></h3><p><code>composer require laravel/ui</code></p><h3 id="2-生成身份验证脚手架"><a href="#2-生成身份验证脚手架" class="headerlink" title="2. 生成身份验证脚手架"></a>2. 生成身份验证脚手架</h3><p><code>php artisan ui vue --auth</code></p><h3 id="3-编译最新的脚手架资源"><a href="#3-编译最新的脚手架资源" class="headerlink" title="3. 编译最新的脚手架资源"></a>3. 编译最新的脚手架资源</h3><pre><code>npm installnpm run dev</code></pre><h3 id="4-更新-App-Http-Controllers-Auth-LoginController"><a href="#4-更新-App-Http-Controllers-Auth-LoginController" class="headerlink" title="4. 更新 App\Http\Controllers\Auth\LoginController"></a>4. 更新 <code>App\Http\Controllers\Auth\LoginController</code></h3><p>重写 <code>username()</code> 与 <code>guard()</code></p><pre><code>&lt;?phpnamespace App\Http\Controllers\Auth;use App\Models\User;use App\Http\Controllers\Controller;use Illuminate\Support\Facades\Auth;use App\Providers\RouteServiceProvider;use Illuminate\Foundation\Auth\AuthenticatesUsers;class LoginController extends Controller{    /*    |--------------------------------------------------------------------------    | Login Controller    |--------------------------------------------------------------------------    |    | This controller handles authenticating users for the application and    | redirecting them to your home screen. The controller uses a trait    | to conveniently provide its functionality to your applications.    |    */    use AuthenticatesUsers;    /**     * Where to redirect users after login.     *     * @var string     */    protected $redirectTo = RouteServiceProvider::HOME;    /**     * Create a new controller instance.     *     * @return void     */    public function __construct()    {        $this-&gt;middleware('guest')-&gt;except('logout');    }    public function username()    {        return User::username();    }    public function guard()    {        return Auth::guard('web');    }}</code></pre><h3 id="5-更新-HomeController-控制器"><a href="#5-更新-HomeController-控制器" class="headerlink" title="5. 更新 HomeController 控制器"></a>5. 更新 <code>HomeController</code> 控制器</h3><pre><code>&lt;?phpnamespace App\Http\Controllers;use Illuminate\Http\Request;class HomeController extends Controller{    &lt;...&gt;    public function __construct()    {        $this-&gt;middleware('auth:web');    }    &lt;...&gt;}</code></pre><h3 id="6-更新-User-模型"><a href="#6-更新-User-模型" class="headerlink" title="6. 更新 User 模型"></a>6. 更新 <code>User</code> 模型</h3><p>新增 <code>username()</code>、<code>getJWTIdentifier()</code>、<code>getJWTCustomClaims()</code></p><pre><code>&lt;?phpnamespace App;use Illuminate\Contracts\Auth\MustVerifyEmail;use Illuminate\Foundation\Auth\User as Authenticatable;use Illuminate\Notifications\Notifiable;use Tymon\JWTAuth\Contracts\JWTSubject;class User extends \Jenssegers\Mongodb\Auth\User implements JWTSubject{    use Notifiable;    /**     * The attributes that are mass assignable.     *     * @var array     */    protected $fillable = [        'name', 'email', 'password',    ];    /**     * The attributes that should be hidden for arrays.     *     * @var array     */    protected $hidden = [        'password', 'remember_token',    ];    /**     * The attributes that should be cast to native types.     *     * @var array     */    protected $casts = [        'email_verified_at' =&gt; 'datetime',    ];    public function getJWTIdentifier()    {        return $this-&gt;getKey();    }    public function getJWTCustomClaims()    {        return [];    }    public static function username()    {        $username = \request('username');        $value = filter_var($username, FILTER_VALIDATE_INT);        if ($value) return 'mobile';        $value = filter_var($username, FILTER_VALIDATE_EMAIL);        if ($value) return 'email';        return 'name';    }}</code></pre><h3 id="7-确保-RouteServiceProvider-中包含-mapWebRoutes"><a href="#7-确保-RouteServiceProvider-中包含-mapWebRoutes" class="headerlink" title="7. 确保 RouteServiceProvider 中包含 mapWebRoutes()"></a>7. 确保 <code>RouteServiceProvider</code> 中包含 <code>mapWebRoutes()</code></h3><pre><code>&lt;?phpnamespace App\Providers;&lt;...&gt;class RouteServiceProvider extends ServiceProvider{    &lt;...&gt;    public function map()    {        &lt;...&gt;        $this-&gt;mapWebRoutes();        &lt;...&gt;    }    protected function mapWebRoutes()    {        Route::middleware('web')            -&gt;namespace($this-&gt;namespace)            -&gt;group(base_path('routes/web.php'));    }    &lt;...&gt;}</code></pre><h3 id="8-确保-routes-web-php-包含-路由"><a href="#8-确保-routes-web-php-包含-路由" class="headerlink" title="8. 确保 routes/web.php 包含 / 路由"></a>8. 确保 <code>routes/web.php</code> 包含 <code>/</code> 路由</h3><pre><code>&lt;?phpuse Illuminate\Support\Facades\Auth;use Illuminate\Support\Facades\Route;&lt;...&gt;Route::get('/', function () {    return view('welcome');});Auth::routes();Route::get('/home', 'HomeController@index')-&gt;name('home');&lt;...&gt;</code></pre><h4 id="8-确保-App-Exceptions-Handler-可以正常抛出-http-错误"><a href="#8-确保-App-Exceptions-Handler-可以正常抛出-http-错误" class="headerlink" title="8. 确保 App\Exceptions\Handler 可以正常抛出 http 错误"></a>8. 确保 <code>App\Exceptions\Handler</code> 可以正常抛出 <code>http</code> 错误</h4><pre><code>&lt;?phpnamespace App\Exceptions;&lt;...&gt;use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;class Handler extends ExceptionHandler{    &lt;...&gt;    public function render($request, Throwable $exception)    {        &lt;...&gt;        if (! $request-&gt;wantsJson()) {            return parent::render($request, $exception);        }        &lt;...&gt;        return $this-&gt;renderApi($request, $exception);    }    &lt;...&gt;}</code></pre><h3 id="9-更新-App-Http-Middleware-Authenticate-中间件"><a href="#9-更新-App-Http-Middleware-Authenticate-中间件" class="headerlink" title="9. 更新 App\Http\Middleware\Authenticate 中间件"></a>9. 更新 <code>App\Http\Middleware\Authenticate</code> 中间件</h3><pre><code>&lt;?phpnamespace App\Http\Middleware;use Illuminate\Auth\AuthenticationException;use Illuminate\Auth\Middleware\Authenticate as Middleware;class Authenticate extends Middleware{    /**     * @param \Illuminate\Http\Request $request     * @return string     * @throws AuthenticationException     */    protected function redirectTo($request)    {        if (! $request-&gt;expectsJson()) {            return route('login');        }        throw new AuthenticationException();    }}</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文档：<a href="https://learnku.com/docs/laravel/7.x/authentication/7474" target="_blank" rel="noopener">https://learnku.com/docs/laravel/7.x/authentication/7474</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Laravel </tag>
            
            <tag> 用户登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 集成 mongodb</title>
      <link href="/laravel/laravel-integration-mongodb/"/>
      <url>/laravel/laravel-integration-mongodb/</url>
      
        <content type="html"><![CDATA[<h1 id="Laravel-集成-mongodb"><a href="#Laravel-集成-mongodb" class="headerlink" title="Laravel 集成 mongodb"></a>Laravel 集成 mongodb</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p><code>composer require jenssegers/mongodb</code></p><h2 id="2-在-config-databases-php-添加-mongodb-配置"><a href="#2-在-config-databases-php-添加-mongodb-配置" class="headerlink" title="2. 在 config/databases.php 添加 mongodb 配置"></a>2. 在 config/databases.php 添加 mongodb 配置</h2><pre><code>'mongodb' =&gt; [    'driver' =&gt; 'mongodb',    'host' =&gt; env('DB_HOST', '127.0.0.1'),    'port' =&gt; env('DB_PORT', 27017),    'database' =&gt; env('DB_DATABASE', 'homestead'),    'username' =&gt; env('DB_USERNAME', 'homestead'),    'password' =&gt; env('DB_PASSWORD', 'secret'),    'options' =&gt; [        // here you can pass more settings to the Mongo Driver Manager        // see https://www.php.net/manual/en/mongodb-driver-manager.construct.php under "Uri Options" for a list of complete parameters that you can use        'database' =&gt; env('DB_AUTHENTICATION_DATABASE', 'admin'), // required with Mongo 3+    ],],</code></pre><h2 id="3-mongodb-添加用户信息"><a href="#3-mongodb-添加用户信息" class="headerlink" title="3. mongodb 添加用户信息"></a>3. mongodb 添加用户信息</h2><pre><code>use admindb.auth("username", "password")db.createUser({user: "your-username", pwd: "password", roles: [{role: "dbOwner", db: "database"}]})示例:use admindb.auth("root", "example")db.createUser({user: "test", pwd: "123456", roles: [{role: "dbOwner", db: "test"}]})</code></pre><h2 id="4-配置数据库环境"><a href="#4-配置数据库环境" class="headerlink" title="4. 配置数据库环境"></a>4. 配置数据库环境</h2><pre><code># mongodb productionDB_CONNECTION=mongodbDB_HOST=ecs.iwnweb.comDB_PORT=27017DB_DATABASE=question-devDB_USERNAME=question-devDB_PASSWORD=123456</code></pre><h2 id="5-修改-User-模型的继承类"><a href="#5-修改-User-模型的继承类" class="headerlink" title="5. 修改 User 模型的继承类"></a>5. 修改 User 模型的继承类</h2><pre><code>use Jenssegers\Mongodb\Auth\User as Authenticatable;class User extends Authenticatable{}</code></pre><h2 id="6-修改-AppServiceProvider，为-Illuminate-Database-Eloquent-Builder-注入-result-函数"><a href="#6-修改-AppServiceProvider，为-Illuminate-Database-Eloquent-Builder-注入-result-函数" class="headerlink" title="6. 修改 AppServiceProvider，为 \Illuminate\Database\Eloquent\Builder 注入 result 函数"></a>6. 修改 <code>AppServiceProvider</code>，为 <code>\Illuminate\Database\Eloquent\Builder</code> 注入 <code>result</code> 函数</h2><pre><code>&lt;?phpnamespace App\Providers;&lt;...&gt;use Illuminate\Support\Facades\Schema;use Illuminate\Support\ServiceProvider;class AppServiceProvider extends ServiceProvider{    &lt;...&gt;    public function boot()    {        &lt;...&gt;        // 设置数据库字符串默认长度，utf8mb4 索引长度最多为 191。        Schema::defaultStringLength(191);        // 为 `\Illuminate\Database\Eloquent\Builder` 注入 `result` 函数        \Illuminate\Database\Eloquent\Builder::macro('result', function () {            if (!request('page') || request('export')) {                return $this-&gt;get(request('columns', ['*']));            }            $per_page = (int) request('per_page', 20);            return $this-&gt;paginate($per_page &lt;= 100 ? $per_page : 100, request('columns', ['*']));        });        &lt;...&gt;    }    &lt;...&gt;}</code></pre><h2 id="6-修改-model-stub-的继承类"><a href="#6-修改-model-stub-的继承类" class="headerlink" title="6. 修改 model.stub 的继承类"></a>6. 修改 model.stub 的继承类</h2><p>1). 发布 stubs 文件<br>参考： <a href="https://learnku.com/docs/laravel/7.x/artisan/7480#stub-customization" target="_blank" rel="noopener">https://learnku.com/docs/laravel/7.x/artisan/7480#stub-customization</a></p><p><code>php artisan stub:publish</code></p><p>2). 修改 model.stub</p><pre><code>namespace {{ namespace }};use Jenssegers\Mongodb\Eloquent\Model;class {{ class }} extends Model{    //}</code></pre><h2 id="7-文档"><a href="#7-文档" class="headerlink" title="7. 文档"></a>7. 文档</h2><p>Laravel MongoDB: <a href="https://github.com/jenssegers/laravel-mongodb" target="_blank" rel="noopener">https://github.com/jenssegers/laravel-mongodb</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-for-bash 乱码问题集锦</title>
      <link href="/uncategorized/git-for-bash-garbled-problem/"/>
      <url>/uncategorized/git-for-bash-garbled-problem/</url>
      
        <content type="html"><![CDATA[<h1 id="git-for-bash-乱码问题集锦"><a href="#git-for-bash-乱码问题集锦" class="headerlink" title="git for bash 乱码问题集锦"></a>git for bash 乱码问题集锦</h1><ul><li>查看终端编码设置</li></ul><p><code>LANG c、Character Set utf-8 (unicode)</code></p><ul><li>输入中文乱码</li></ul><p>```~/.bashrc<br>chcp.com 6500</p><p>set meta-flag on<br>set input-meta on<br>set output-meta on<br>set convert-meta off</p><p>export OUTPUT_CHARSET=”utf-8”<br>export LESSCHARSET=”utf-8”</p><pre><code>- git commit 乱码</code></pre><p>git config –global i18n.commitencoding utf-8<br>git config –global i18n.logoutputencoding utf-8<br>git config –global gui.encoding utf-8</p><p>```</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>各种Git Bash乱码解决：<a href="https://www.cnblogs.com/steinven/p/10491262.html" target="_blank" rel="noopener">https://www.cnblogs.com/steinven/p/10491262.html</a></li><li>git乱码解决方案汇总.txt：<a href="https://gist.github.com/xkyii/1079783" target="_blank" rel="noopener">https://gist.github.com/xkyii/1079783</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 环境 </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七牛添加-Let&#39;s-Encrypt-https-证书（人工）</title>
      <link href="/yun-wei/seven-cattle-add-let-s-encrypt-https-certificate-manual/"/>
      <url>/yun-wei/seven-cattle-add-let-s-encrypt-https-certificate-manual/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-acme-sh"><a href="#安装-acme-sh" class="headerlink" title="安装 acme.sh"></a>安装 acme.sh</h2><p>在命令行执行安装命令 <code>curl  https://get.acme.sh | sh</code>。</p><p>命令执行结束后，会将 acme.sh 安装到当前登录用户的 home 目录下。</p><h2 id="申请域名证书"><a href="#申请域名证书" class="headerlink" title="申请域名证书"></a>申请域名证书</h2><h3 id="通过-dns-进行域名所有权校验"><a href="#通过-dns-进行域名所有权校验" class="headerlink" title="通过 dns 进行域名所有权校验"></a>通过 dns 进行域名所有权校验</h3><h2 id="部署证书至七牛"><a href="#部署证书至七牛" class="headerlink" title="部署证书至七牛"></a>部署证书至七牛</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手带你通过一番操作释放服务器 17G 磁盘空间</title>
      <link href="/yun-wei/how-to-release-17g-disk-space-of-server-through-some-operations/"/>
      <url>/yun-wei/how-to-release-17g-disk-space-of-server-through-some-operations/</url>
      
        <content type="html"><![CDATA[<h1 id="手把手带你排查遇到服务器无可用磁盘空间问题与处理"><a href="#手把手带你排查遇到服务器无可用磁盘空间问题与处理" class="headerlink" title="手把手带你排查遇到服务器无可用磁盘空间问题与处理"></a>手把手带你排查遇到服务器无可用磁盘空间问题与处理</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在端午期间，突然收到消息说，sentry 服务无法访问了，请求总是出现 502 页面响应。揣着忐忑不安的心情 ♥ 开始了排查之旅。</p><h2 id="查因"><a href="#查因" class="headerlink" title="查因"></a>查因</h2><ol><li>从哪下手？</li></ol><ul><li><p>服务器的内存满了吗？<br>a. 如果没有内存了，那么服务器也登录不上。<br>b. 如果没有内存，那么访问也将不会出现 502 响应，而是打不开服务了。<br>c. 登录服务器后执行 <code>free -h</code> 查看，服务器的内存还有一定的剩余，好的👌，这个确认安全。</p></li><li><p>为啥会突然停止运行呢？<br>sentry 服务是采用官方提供的搭建方案中的 docker 方式作为服务运行于服务器上，前几天都还好好的。</p></li></ul><ol start="2"><li>先检查一下服务器的相关 sentry 服务是否正常运行。</li></ol><p><code>docker ps -a</code> 得到如下结果，sentry 相关的服务中，有 3 个相关容器处于 Restaring 状态。</p><p><img src="%E6%9C%8D%E5%8A%A1%E5%99%A8-sentry-%E8%BF%90%E8%A1%8C%E6%83%85%E5%86%B5.png" alt="服务器 sentry 运行情况"></p><ol start="3"><li>服务为啥无法启动，为啥一直处于 Restaring 状态？</li></ol><p>通过对容器的进行日志的逐个查看，初探端倪</p><p><code>docker-compose logs -tail 200 postgres</code>: <strong>No space left on device</strong>，重启服务时，因无可用剩余空间，所以无法启动了。</p><p><img src="%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0%E5%8F%AF%E7%94%A8%E7%A9%BA%E9%97%B4%E6%8F%90%E7%A4%BA.png" alt="服务器无可用空间提示"></p><ol start="4"><li>服务器真的没有可用剩余空间了吗？</li></ol><p>通过运行命令 <code>df -h /</code>，得知服务器的磁盘空间使用接近 100%，真的没有空间了。</p><p><img src="%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5.png" alt="服务器空间使用情况"></p><h2 id="知果"><a href="#知果" class="headerlink" title="知果"></a>知果</h2><p>通过一番排查，我们知道了 sentry 服务无法运行的原因了。那接下来该对服务器磁盘进行清理了。</p><ol><li>docker 服务是否有限制日志输出选项？</li></ol><p>通过 <code>cat /etc/docker/daemon.json</code> 查看服务器启动配置得知，日志驱动使用的是 json-file，日志配置选项为每个容器保留 3份日志文件，每份文件最大大小为 100M。</p><pre><code>{  "registry-mirrors": ["https://oifw9ovt.mirror.aliyuncs.com"],  "exec-opts": ["native.cgroupdriver=systemd"],  "log-driver": "json-file",  "log-opts": {"max-size": "50m", "max-file": "3"}}</code></pre><ol start="2"><li>sentry 服务是否有配置日志输出选项？</li></ol><p>通过 <code>cat /path/to/onpremise/docker-compose.yml</code> 查看 sentry 服务的 docker-compose 编排文件，可以得知与 docker 服务一致，日志驱动使用的是 json-file，日志配置选项为每个容器保留 3份日志文件，每份文件最大大小为 100M。</p><p><img src="%E6%9C%8D%E5%8A%A1%E5%99%A8-docker-%E6%97%A5%E5%BF%97%E8%AE%BE%E7%BD%AE.png" alt="服务器-docker-日志设置"></p><ol start="3"><li>是 docker 相关的服务输出的日志太多吗？</li></ol><p>a. 是 sentry 运行时间过长，报错太多导致数据库中的数据过多吗？</p><p>通过一番搜索，找到了文章 <a href="https://juejin.im/post/5cb93b576fb9a068726e1f5f" target="_blank" rel="noopener">Sentry 服务磁盘占满 清除postgresql方法</a></p><p>对文章的阅读后发现，sentry 已无法运行，不能通过手动清理日志来减少磁盘空间，不过关于自动清理超过七天的记录还是有点用处，遂参考文章加上了相关配置。</p><p>b. 配置 docker 服务器日志轮转</p><p>又一番搜索后，似乎看到了希望，<a href="https://www.yp14.cn/2020/01/12/Kubernetes%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%86%99%E6%BB%A1%E7%A3%81%E7%9B%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">Kubernetes之容器数据写满磁盘解决方法</a></p><p>参考文章中的具体优化方法，检查 docker 服务，已有相关配置。</p><ol start="4"><li>到底是什么占用了服务器 40G 的磁盘空间?</li></ol><p>a. 文件系统磁盘被谁使用了？</p><p>通过 <code>df -lh | sort -h</code> 查看磁盘当前占用情况排序</p><p>得知 <code>/var/lib/docker/aufs/mnt/</code> 占用了大多数的空间。</p><p>b. 磁盘中哪些目录占用了较大的空间？</p><p>通过 <code>du -hd 2 / | sort -hr</code> 查看磁盘使用情况</p><p>得知 /var 目录占用了 23G 的磁盘空间。</p><p><img src="%E6%A0%B9%E7%9B%AE%E5%BD%95%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5.png" alt="根目录磁盘空间使用情况"></p><p>c. 对每个空间占用大于 1G 的目录进行子一级目录的目录使用情况统计</p><p>得知 /var/log 目录日志使用了 17G 的空间，单单事件记录监控程序日志就达到了 16G 的空间。</p><p><img src="var-%E7%9B%AE%E5%BD%95%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5.png" alt="var-目录空间使用情况"><br><img src="var-log-%E7%9B%AE%E5%BD%95%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5.png" alt="var-log目录空间使用情况"></p><ol start="5"><li>开始清理日志吧</li></ol><p>因 log 目录下部分日志有点特殊，不是存文本文件，故参考 <a href="https://www.jianshu.com/p/ad59f4a938e9" target="_blank" rel="noopener">linux log 及如何清除log</a>，对日志做了一些清理：</p><p>a. 删除 /var/log 下的日志压缩包<br><code>rm -rf /var/log/*.gz</code></p><p>b. 删除 /var/log 轮转日志<br><code>rm -rf /var/log/*.1</code></p><p>c. 清空内核日志<br><code>cat /dev/null &gt; /var/log/dmesg</code></p><p>d. 清空 Linux 操作系统常见的系统和服务错误信息<br><code>cat /dev/null &gt; /var/log/messages</code></p><p>e. 清空事件记录监控程序日志<br><code>cat /dev/null &gt; /var/log/syslog</code></p><p>f. 清理 journal 日志</p><pre><code># 查看磁盘占用du -hd 2 /var/log | sort -hrjournalctl --disk-usage# 清理日志journalctl --vacuum-size=10M# 只保留一周的日志journalctl --vacuum-time=1w# 再次查看磁盘占用journalctl --disk-usagedu -hd 2 /var/log | sort -hr</code></pre><p>g. 删除 24小时前下载的镜像<br><code>docker image prune -a --filter "until=24h"</code></p><h2 id="末：单服务器释放了-17G-的磁盘空间"><a href="#末：单服务器释放了-17G-的磁盘空间" class="headerlink" title="末：单服务器释放了 17G 的磁盘空间"></a>末：单服务器释放了 17G 的磁盘空间</h2><p>最后，一番操作后，单服务器释放了 17G 的磁盘空间。</p><p><img src="%E6%97%A5%E5%BF%97%E6%B8%85%E7%90%86%E5%90%8E.png" alt="日志清理后"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>操作需谨慎</strong></li><li>多多利用排序，能便于排查问题。</li><li>提早做好相应工作，能减少临时处理问题的可能性</li></ul><p><strong>给大家几个方便使用的小命令</strong>：</p><pre class=" language-shell"><code class="language-shell"># 查看服务器内存使用情况free -h# 查看磁盘当前占用情况df -h /# 查看磁盘当前占用情况排序df -lh | sort -h# 查看磁盘使用统计du -hd 2 / | sort -hrcomposer clearcacheyarn clean cache --allnpm clean cahce --forcesnap list --all | awk '/disabled/{print $1, $3}' |   while read snapname revision; do       snap remove "$snapname" --revision="$revision"   done</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这也许是你期待已久的 laravel 快速上手教程</title>
      <link href="/uncategorized/this-may-be-your-long-awaited-laravel-quick-start-tutorial/"/>
      <url>/uncategorized/this-may-be-your-long-awaited-laravel-quick-start-tutorial/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Laravel-框架安装"><a href="#一、Laravel-框架安装" class="headerlink" title="一、Laravel 框架安装"></a>一、Laravel 框架安装</h2><p>文档：<a href="https://learnku.com/docs/laravel/7.x/installation/7447" target="_blank" rel="noopener">https://learnku.com/docs/laravel/7.x/installation/7447</a></p><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h3><p><code>composer create-project --prefer-dist laravel/laravel blog</code></p><h3 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2. 安装依赖"></a>2. 安装依赖</h3><pre><code>cd blogcomposer install</code></pre><h3 id="3-生成环境配置"><a href="#3-生成环境配置" class="headerlink" title="3. 生成环境配置"></a>3. 生成环境配置</h3><h4 id="1-修改-env-信息"><a href="#1-修改-env-信息" class="headerlink" title="1. 修改 .env 信息"></a>1. 修改 .env 信息</h4><pre><code>// 1. 创建环境配置信息cp .env.example .env// 2. 生成 APP_KEYphp artisan key:generate// 3. 修改 .env 信息与敏感信息# 项目APP_NAME=BlogAPP_ENV=localAPP_DEBUG=trueAPP_URL=http://blog.test# 数据库DB_CONNECTION=mysqlDB_HOST=127.0.0.1 # 这里改成数据库主机对应的地址DB_PORT=3306 # 这里改成数据库对应的端口DB_DATABASE=blog # 数据库名DB_USERNAME=username # 用户DB_PASSWORD=password # 密码# 全局配置BROADCAST_DRIVER=logCACHE_DRIVER=redisQUEUE_CONNECTION=syncSESSION_DRIVER=redisSESSION_LIFETIME=120# redis 缓存REDIS_HOST=127.0.0.1REDIS_PASSWORD=nullREDIS_PORT=6379# 默认 db、缓存 db（见 config/database.php redis 部分）REDIS_DB=0REDIS_CACHE_DB=1</code></pre><h4 id="2，创建数据库"><a href="#2，创建数据库" class="headerlink" title="2，创建数据库"></a>2，创建数据库</h4><ol><li>创建名为 <code>blog</code> 的数据库，指定字符集为 <code>utf8mb4 -- UTF-8 Unicode</code> 排序规则为 <code>utf8mb4_bin</code></li><li>修改 app/AppServiceProvider.php，处理数据库 utf8mb4 string 默认长度超过索引长度的问题</li></ol><pre><code>&lt;?phpnamespace App\Providers;use Illuminate\Support\Facades\Schema;use Illuminate\Support\ServiceProvider;...class AppServiceProvider extends ServiceProvider{    .    .    .    public function boot()    {        Schema::defaultStringLength(191);        .        .        .    }    .    .    .}</code></pre><h4 id="3-配置-web-环境"><a href="#3-配置-web-环境" class="headerlink" title="3. 配置 web 环境"></a>3. 配置 web 环境</h4><ol><li>站点配置</li></ol><pre><code>// 1. 安装 nginxapt install nginx -y// 2. 在 nginx 的站点目录中新增 `blog.test.conf`cp /etc/nginx/site-available/default /etc/nginx/site-available/blog.test.conf// 3. 修改 blog.test 站点配置vim /etc/nginx/site-available/blog.test.conf...    # 配置访问域名    server_name blog.test;    # 配置站点目录    root "/path/to/blog/public";    # 美化 url    location / {        try_files $uri $uri/ /index.php?$query_string;    }    # 启用 php-fpm 配置    ......// 4. 启用站点配置ln -s /etc/nginx/site-available/blog.test.conf /etc/nginx/site-enable/blog.test.conf// 5. 检测 nginx 配置是否正确nginx -t// 6. 启用站点nginx -s reload// 7. 更新 host 信息echo "blog.test" &gt;&gt; /etc/hosts</code></pre><ol start="2"><li>浏览器访问站点，确认站点已正确启用<br><a href="http://blog.test" target="_blank" rel="noopener">http://blog.test</a></li></ol><h2 id="二、创建路由"><a href="#二、创建路由" class="headerlink" title="二、创建路由"></a>二、创建路由</h2><p>文档：<a href="https://learnku.com/docs/laravel/7.x/routing/7458" target="_blank" rel="noopener">https://learnku.com/docs/laravel/7.x/routing/7458</a></p><ol><li>web 路由 routes/web.php</li></ol><pre><code>...Route::get('test', function () {    return 'this is a test route';});...</code></pre><p>浏览器访问 <a href="http://blog.test/test" target="_blank" rel="noopener">http://blog.test/test</a></p><ol start="2"><li>api 路由 routes/api.php</li></ol><pre><code>...Route::get('test', function () {    return 'this is an api test route';});...</code></pre><p>浏览器访问 <a href="http://blog.test/api/test" target="_blank" rel="noopener">http://blog.test/api/test</a></p><h2 id="三、创建控制器"><a href="#三、创建控制器" class="headerlink" title="三、创建控制器"></a>三、创建控制器</h2><p>文档：<a href="https://learnku.com/docs/laravel/7.x/controllers/7461" target="_blank" rel="noopener">https://learnku.com/docs/laravel/7.x/controllers/7461</a></p><ol><li>创建 TestController</li></ol><p><code>php artisan make:controller TestController</code>。控制器默认目录为 <code>app/Http/Controllers/</code></p><ol start="2"><li>关联 web 路由</li></ol><p>修改 routes/web.php，新增路由</p><pre><code>...Route::get('test/controller', 'TestController@test');...</code></pre><p>修改 routes/api.php，新增路由</p><pre><code>...Route::get('test/controller', 'TestController@testApi');...</code></pre><ol start="3"><li>修改控制器 app/Http/Controllers/TestController</li></ol><pre><code>...class TestController extends Controller{    public function test()    {        return 'this is an web test from test controller';    }    public function testApi()    {        return response()-&gt;json([            'message' =&gt; 'this is an api test from test controller',        ]);    }}</code></pre><ol start="3"><li>浏览器访问</li></ol><p>web: <a href="http://blog.test/test/controller" target="_blank" rel="noopener">http://blog.test/test/controller</a><br>api: <a href="http://blog.test/api/test/controller" target="_blank" rel="noopener">http://blog.test/api/test/controller</a></p><h2 id="四、创建模型"><a href="#四、创建模型" class="headerlink" title="四、创建模型"></a>四、创建模型</h2><h3 id="1-数据库迁移"><a href="#1-数据库迁移" class="headerlink" title="1. 数据库迁移"></a>1. 数据库迁移</h3><p>文档：<a href="https://learnku.com/docs/laravel/7.x/migrations/7496" target="_blank" rel="noopener">https://learnku.com/docs/laravel/7.x/migrations/7496</a></p><p>迁移默认目录为 <code>database/migrations</code></p><ol><li><p>新建迁移<br><code>php artisan make:migration create_tests_table --create tests</code></p></li><li><p>修改迁移（修改已有数据库的表结构）<br><code>php artisan make:migration add_column_test_info_to_tests_table --create tests</code></p></li><li><p>执行迁移</p></li></ol><h3 id="2-模型定义"><a href="#2-模型定义" class="headerlink" title="2. 模型定义"></a>2. 模型定义</h3><p>文档：<a href="https://learnku.com/docs/laravel/7.x/eloquent/7499（模型约定，请注意）" target="_blank" rel="noopener">https://learnku.com/docs/laravel/7.x/eloquent/7499（模型约定，请注意）</a></p><p>模型默认目录为 <code>app</code></p><p>创建模型，并指定目录为 <code>app/Models/</code></p><p><code>php artisan make:model Models/Test</code></p><p>此时模型 Test 默认关联到数据的 tests 表，可以修改模型属性 $table ，关联其它表。</p><h3 id="3-在控制器中使用模型"><a href="#3-在控制器中使用模型" class="headerlink" title="3. 在控制器中使用模型"></a>3. 在控制器中使用模型</h3><ol><li>创建路由</li></ol><p><code>routes/web.php</code></p><pre><code>Route::get('test/model', 'TestContoller@testUsingModel');</code></pre><p><code>routes/api.php</code></p><pre><code>Route::get('test/model', 'TestContoller@testUsingModelInApiRoute');</code></pre><ol start="2"><li>新增控制器处理函数</li></ol><pre><code>...class TestController extends Controller{    ...    public function testUsingModel()    {        return Test::all();    }    public function testUsingModel()    {        return response()-&gt;json(Test::paginate());    }    ...}</code></pre><ol start="3"><li>访问路由</li></ol><p>web: <a href="http://blog.test/test/model" target="_blank" rel="noopener">http://blog.test/test/model</a><br>api: <a href="http://blog.test/api/test/model" target="_blank" rel="noopener">http://blog.test/api/test/model</a></p><h2 id="五、接收请求数据"><a href="#五、接收请求数据" class="headerlink" title="五、接收请求数据"></a>五、接收请求数据</h2><ol><li>创建路由</li></ol><p><code>routes/web.php</code></p><pre><code>Route::get('test/request', 'TestContoller@getRequestData');</code></pre><ol start="2"><li>新增控制器处理函数</li></ol><pre><code>...use Illuminate\Http\Request;...class TestController extends Controller{    ...    public function getRequestData(Request $request)    {        return $request-&gt;all();    }    public function testUsingModel()    {        return response()-&gt;json(Test::paginate());    }    ...}</code></pre><ol start="3"><li>访问路由</li></ol><p>web: <a href="http://blog.test/test/request" target="_blank" rel="noopener">http://blog.test/test/request</a></p><ol start="4"><li>api 同理</li></ol><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>文章首发于<a href="https://blog.iwnweb.com/uncategorized/this-may-be-your-long-awaited-laravel-quick-start-tutorial/">个人博客</a></p><p>如有疑问或建议，欢迎留言交流</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>疫情下的远程办公</title>
      <link href="/ge-ren/telecommuting-under-epidemic-situation/"/>
      <url>/ge-ren/telecommuting-under-epidemic-situation/</url>
      
        <content type="html"><![CDATA[<h1 id="疫情下的远程办公"><a href="#疫情下的远程办公" class="headerlink" title="疫情下的远程办公"></a>疫情下的远程办公</h1><h2 id="前情摘要"><a href="#前情摘要" class="headerlink" title="前情摘要"></a>前情摘要</h2><p><a href="https://baike.baidu.com/item/2019%E6%96%B0%E5%9E%8B%E5%86%A0%E7%8A%B6%E7%97%85%E6%AF%92/24267858?fromtitle=%E6%96%B0%E5%9E%8B%E5%86%A0%E7%8A%B6%E7%97%85%E6%AF%92&amp;fromid=7904360&amp;fr=aladdin" target="_blank" rel="noopener">2019新型冠状病毒（2019-nCoV）</a> 的 <a href="https://voice.baidu.com/act/newpneumonia/newpneumonia/?from=osari_pc_1" target="_blank" rel="noopener">疫情</a> 发展迅速，众多公司都被迫初试「远程办公」，开启了自己公司的远程办公探索路线。</p><p>在家办公，工作效率很容易变差。</p><p>因为一开始你会觉得特别舒服，无拘无束。</p><p>但是稍微一段时间后，你就觉得特别难受，甚至工作效率会大大下降。</p><p>这也是因为无拘无束。</p><h2 id="过往云烟"><a href="#过往云烟" class="headerlink" title="过往云烟"></a>过往云烟</h2><p>我在刚进入公司时，也有过一段时间偶尔的在家办公。当时遇到的一些问题有：</p><h3 id="1-无法及时有效的进行沟通。"><a href="#1-无法及时有效的进行沟通。" class="headerlink" title="1. 无法及时有效的进行沟通。"></a>1. 无法及时有效的进行沟通。</h3><p>在公司时回个头，转个身就可以找谁谁谁。在家时就不可以了，所以需要沟通时一定要及时。IM 工具有很多。如：企业微信、钉钉、腾讯会议等等…</p><h3 id="2-过于舒适，降低了工作效率。"><a href="#2-过于舒适，降低了工作效率。" class="headerlink" title="2. 过于舒适，降低了工作效率。"></a>2. 过于舒适，降低了工作效率。</h3><p>在家有时候会躺着编码，有时会趴着编码。如果要提高工作效率，这些问题都必须杜绝。</p><h3 id="3-会被各种事情影响。"><a href="#3-会被各种事情影响。" class="headerlink" title="3. 会被各种事情影响。"></a>3. 会被各种事情影响。</h3><p>如果在家里，可能还会被各种事情打扰。如：爸妈呼唤呀之类的问题。</p><h3 id="4-未准备好工作环境。"><a href="#4-未准备好工作环境。" class="headerlink" title="4. 未准备好工作环境。"></a>4. 未准备好工作环境。</h3><p>去年有段时间回家，在乡里，网络环境很差，无法具备办公条件。</p><h2 id="关注当下"><a href="#关注当下" class="headerlink" title="关注当下"></a>关注当下</h2><h3 id="第一，准时起床，穿戴整齐。（你如果在家里一直无法进入工作状态，你不妨穿上你的裤子，给工作一些仪式感。）"><a href="#第一，准时起床，穿戴整齐。（你如果在家里一直无法进入工作状态，你不妨穿上你的裤子，给工作一些仪式感。）" class="headerlink" title="第一，准时起床，穿戴整齐。（你如果在家里一直无法进入工作状态，你不妨穿上你的裤子，给工作一些仪式感。）"></a>第一，准时起床，穿戴整齐。（你如果在家里一直无法进入工作状态，你不妨穿上你的裤子，给工作一些仪式感。）</h3><p><strong><a href="http://github.com/overtrue" target="_blank" rel="noopener">overtrue</a> 评：所以到底多久才意识到需要穿裤子这事儿[坏笑]</strong></p><blockquote><p><em>那，你们穿好裤子了吗？</em></p></blockquote><hr><blockquote><p>我给自己一个非常重要的要求就是，一定要早起之后，穿戴整齐。<br>不要觉得穿着睡衣很舒服，穿着睡衣吃早饭，吃完早饭趴在餐桌上就开始干活了。<br>这个时候你会特别容易分神，因为你进入不了状态。<br>你一定要当作正常上班一样，准时起床，换上正式的衣服，这是一种仪式感。<br>这种仪式感会把你拉入到一个工作的状态，很大程度上提高你的协作效率。 – <a href="https://news.mbalib.com/story/248535" target="_blank" rel="noopener">在家办公，怎么高效完成远程工作？</a></p></blockquote><p>早期还可以拥有更多的时间，进行自我提升。</p><blockquote><p>一年之计在于春，一日之计在于晨 – 《增广贤文》</p></blockquote><p>做个美美的早餐、看会引人入胜书、梳个赏心悦目的妆，这里都能让你开启一天的美好生活。推荐大家可以根据个人的情况进行规划。</p><h3 id="第二，一定不能在休息区域办公。"><a href="#第二，一定不能在休息区域办公。" class="headerlink" title="第二，一定不能在休息区域办公。"></a>第二，一定不能在休息区域办公。</h3><p>反过来说，不要在办公的地方休息，在家里，要把做这两件事的场所分开。</p><p>如果你家里有书房，把书房当成你的办公场所。</p><p>早上从卧室起床，穿戴整齐，带着背包正式地走进书房，把门关上，就相当于你到办公室开始办公了。</p><p>这个过程很重要，在这里把一切工作资料都准备好，注意，不要在这睡觉（可不要学我的过往哦）。</p><h3 id="第三，清晰地区分好工作和休息时间。"><a href="#第三，清晰地区分好工作和休息时间。" class="headerlink" title="第三，清晰地区分好工作和休息时间。"></a>第三，清晰地区分好工作和休息时间。</h3><p>在家办公，对公司而言，考验的是把目标拆解为任务的能力，对员工而言，非常考验区分工作和休息的能力。<br>这是什么意思呢？</p><p>就是你很容易工作着工作着，突然之间想要躺一会儿，就在沙发上躺一小会儿嘛。</p><p>躺下来就想，那我打开电视看一会儿，休息一下……</p><p>一看就是很长时间。</p><p>无法保持专注，这是在家办公带来的巨大挑战，但这也是很锻炼一个人的。</p><p><strong>怎么才能清晰地区分好工作和休息时间呢？</strong></p><p>建议大家用番茄钟工作法，就是工作以25分钟为一个单位，这25分钟里，手机调成静音，什么东西都不碰，告诉自己在这个时间里、在番茄钟提醒你之前，别的什么都不能干，只能专心工作。</p><p>25分钟之后休息5分钟，这5分钟可以去倒杯水、上个厕所，去翻翻其他书，这都可以，5分钟休息结束再进入下一个25分钟。</p><p>中午的时候，你当然可以在家里面做点东西吃，这是在家的好处。</p><blockquote><p>这个算是我最喜欢的了。饭都吃的饱饱的，特别满足。(<em>^__^</em>) ……</p></blockquote><p>但也需要给自己设定好，12 点到 1 点之间才可以做这件事情，这是你的休息时间。</p><p>吃完之后戴上口罩，出门走一走，稍微呼吸一下新鲜空气，舒展一下筋骨，这也挺重要的。</p><p>到了下午 1 点钟再回来上班，6 点钟下班。</p><p>下班之后，你就可以离开书房，或者你的电脑如果在餐桌上，就把电脑从餐桌上拿走，进入下班状态。</p><p>你告诉自己，我下班了，这个时候才把身上正式的衣服换成家居服。</p><p>清晰地区分好工作和休息时间，这样远程工作，才会让你既有高效，又能劳逸平衡。</p><h2 id="放眼未来"><a href="#放眼未来" class="headerlink" title="放眼未来"></a>放眼未来</h2><p>愿你平平安安，健健康康，每天都能拥有好心情。</p><p><strong>参考</strong></p><ol><li>疫情防控期间，在家远程办公须知11条注意事项（实用指南）：<a href="https://news.mbalib.com/story/248562" target="_blank" rel="noopener">https://news.mbalib.com/story/248562</a></li><li>在家办公，怎么高效完成远程工作？：<a href="https://news.mbalib.com/story/248562" target="_blank" rel="noopener">https://news.mbalib.com/story/248562</a></li><li>特殊时期，我们如何远程办公降低损失？：<a href="https://mp.weixin.qq.com/s/QITSvlF24d-o7N3d4psZzQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/QITSvlF24d-o7N3d4psZzQ</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 远程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建 k8s 集群</title>
      <link href="/k8s/build-k8s-cluster/"/>
      <url>/k8s/build-k8s-cluster/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code># 使得 apt 支持 ssl 传输sudo apt-get update &amp;&amp; sudo apt-get install -y apt-transport-https curl# 下载 gpg 密钥sudo curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -# 添加 k8s 镜像源，需要在 root 权限执行cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.listdeb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial mainEOF# 更新源列表sudo apt-get update# 下载 kubectl，kubeadm以及 kubeletsudo apt-get install -y kubelet kubeadm kubectl</code></pre><h2 id="安装-docker-环境"><a href="#安装-docker-环境" class="headerlink" title="安装 docker 环境"></a>安装 docker 环境</h2><p><a href="https://blog.iwnweb.com/%E7%8E%AF%E5%A2%83/Installing-docker-environment/">安装 docker 环境</a></p><h2 id="修改-docker-cgroup-driver-信息"><a href="#修改-docker-cgroup-driver-信息" class="headerlink" title="修改 docker cgroup driver 信息"></a>修改 docker cgroup driver 信息</h2><pre><code>sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{  "registry-mirrors": ["你的镜像加速地址"],  "exec-opts": [ "native.cgroupdriver=systemd" ]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker</code></pre><h2 id="初始化-master-节点"><a href="#初始化-master-节点" class="headerlink" title="初始化 master 节点"></a>初始化 master 节点</h2><h3 id="关闭-swap"><a href="#关闭-swap" class="headerlink" title="关闭 swap"></a>关闭 swap</h3><ul><li><p>临时关闭<br><code>swapoff -a</code></p></li><li><p>永久生效</p><pre><code>echo "vm.swappiness = 0" &gt;&gt; /etc/sysctl.confsysctl -p</code></pre></li></ul><h3 id="初始化主节点"><a href="#初始化主节点" class="headerlink" title="初始化主节点"></a>初始化主节点</h3><pre><code>kubeadm config images pull \--image-repository registry.aliyuncs.com/google_containerskubeadm init \--apiserver-advertise-address=10.8.9.1 \--image-repository registry.aliyuncs.com/google_containers \--pod-network-cidr=10.244.0.0/16 \--ignore-preflight-errors=all</code></pre><h2 id="部署-flannel-网络"><a href="#部署-flannel-网络" class="headerlink" title="部署 flannel 网络"></a>部署 flannel 网络</h2><pre><code>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</code></pre><h2 id="修改启动配置"><a href="#修改启动配置" class="headerlink" title="修改启动配置"></a>修改启动配置</h2><p><code>vim /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</code></p><pre><code>Environment="KUBELET_KUBECONFIG_ARGS=--network-plugin=cni --cni-conf-dir=/etc/cni/ --cni-bin-dir=/opt/cni/bin --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"</code></pre><h2 id="master-配置-kubectl-环境"><a href="#master-配置-kubectl-环境" class="headerlink" title="master 配置 kubectl 环境"></a>master 配置 kubectl 环境</h2><ul><li>root</li></ul><pre><code>mkdir -p /root/.kube &amp;&amp; \cp /etc/kubernetes/admin.conf /root/.kube/config</code></pre><ul><li>普通用户</li></ul><pre><code># 添加用户sudo adduser kube# 添加 sudo 权限sudo usermod -aG sudo kubesudo mkdir -p /home/kube/.kubesudo cp -i /etc/kubernetes/admin.conf /home/kube/.kube/configsudo chown -R $(id -u kube):$(id -g kube) /home/kube/.kube</code></pre><h2 id="添加工作节点"><a href="#添加工作节点" class="headerlink" title="添加工作节点"></a>添加工作节点</h2><pre><code>kubeadm config images pull \--image-repository registry.aliyuncs.com/google_containerskubeadm join 10.8.9.1:6443 --token gn6beu.yi356hhss5e5eyqv \    --discovery-token-ca-cert-hash sha256:a3306fe8e54f2a31e86b9261d4ef6de7150e652e6d440558d193447fed649019 \    --ignore-preflight-errors=all</code></pre><h2 id="Flannel-CNI-集成"><a href="#Flannel-CNI-集成" class="headerlink" title="Flannel CNI 集成"></a>Flannel CNI 集成</h2><ul><li>下载 CNI 插件</li></ul><p><a href="https://github.com/containernetworking/plugins/releases" target="_blank" rel="noopener">https://github.com/containernetworking/plugins/releases</a></p><pre><code>sudo mkdir -p \  /etc/cni/net.d \  /opt/cni/bin \  /var/lib/kubelet \  /var/lib/kubernetes \  /var/run/kubernetessudo wget https://github.com/containernetworking/plugins/releases/download/v0.7.1/cni-plugins-amd64-v0.7.1.tgzsudo tar -xzvf cni-plugins-amd64-v0.7.5.tgz --directory /opt/cni/bin/</code></pre><p>参考：<br><a href="https://www.jianshu.com/p/f2d4dd4d1fb1" target="_blank" rel="noopener">ubuntu 安装 k8s</a><br><a href="https://uzshare.com/view/797550" target="_blank" rel="noopener">kubeadm init 后 master 一直处于 notready 状态</a><br><a href="https://www.cnblogs.com/hwlong/p/9119044.html" target="_blank" rel="noopener">Flannel网络部署</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派装机记录</title>
      <link href="/shu-mei-pai/raspberry-pie-installation-record/"/>
      <url>/shu-mei-pai/raspberry-pie-installation-record/</url>
      
        <content type="html"><![CDATA[<h2 id="刻录系统"><a href="#刻录系统" class="headerlink" title="刻录系统"></a>刻录系统</h2><p>下载系统 zip 压缩包 并解压 img 镜像<br><a href="http://www.raspberrypi.org/downloads" target="_blank" rel="noopener">http://www.raspberrypi.org/downloads</a></p><p>使用软碟通刻录树莓派官方桌面系统</p><h2 id="设置-wifi、开启-ssh"><a href="#设置-wifi、开启-ssh" class="headerlink" title="设置 wifi、开启 ssh"></a>设置 wifi、开启 ssh</h2><ul><li><p>在 BOOT 盘下新增两个文件 wpa_supplicant.conf 和 ssh</p></li><li><p>wpa_supplicant.conf中的内容(注意替换YOUR_WIFI_NAME和YOUR_WIFI_PASSWORD），（key_mgmt=WPA-PSK是wifi加密方式，priority=1是有多个wifi时本wifi的优先级，貌似不太用改):</p></li></ul><pre><code>country=CNctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdevupdate_config=1network={    ssid="YOUR_WIFI_NAME"    psk="YOUR_WIFI_PASSWORD"    key_mgmt=WPA-PSK    priority=1}</code></pre><h2 id="远程登陆树莓派"><a href="#远程登陆树莓派" class="headerlink" title="远程登陆树莓派"></a>远程登陆树莓派</h2><p>输入以下登陆账号和密码，注意Linux中登陆时输入是不显示已输入字符的“ * ”提示符</p><pre><code>login as: pipassword: raspberry</code></pre><h2 id="解锁-root"><a href="#解锁-root" class="headerlink" title="解锁 root"></a>解锁 root</h2><pre><code># 设置 root 密码为 123456sudo passwd# 解锁 rootsudo passwd --unlock root</code></pre><h2 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h2><pre><code>ssh-copy-id pi@raspberryip</code></pre><h2 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h2><p>官方提供的<a href="http://www.raspbian.org/RaspbianMirrors" target="_blank" rel="noopener">更新源列表</a></p><pre><code># 备份系统源sudo mv /etc/apt/sources.list{,.back}sudo mv /etc/apt/sources.list.d/raspi.list{,.back}# 清华大学镜像sudo tee /etc/apt/sources.list &lt;&lt;EOFdeb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpiEOF# 清华大学镜像sudo tee /etc/apt/sources.list.d/raspi.list &lt;&lt;EOFdeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster mainEOF# 由于没有公钥，无法验证签名问题# 可以使用 apt-key del 删除key# 导入密钥 04EE7237B7D453EC 648ACFD622F3D138 DCC9EFBF77E11517# sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ${KEY}sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 04EE7237B7D453EC 648ACFD622F3D138 DCC9EFBF77E11517sudo apt-get update -ysudo apt-get upgrade -y</code></pre><h2 id="安装-docker-环境"><a href="#安装-docker-环境" class="headerlink" title="安装 docker 环境"></a>安装 docker 环境</h2><ul><li>脚本安装</li></ul><pre><code>sudo curl -sSL https://get.docker.com | sh</code></pre><ul><li>添加 pi 用户到 docker 用户组<pre><code>sudo usermod -aG docker pi</code></pre></li></ul><h3 id="docker-换源、修改-docker-cgroup-driver-信息"><a href="#docker-换源、修改-docker-cgroup-driver-信息" class="headerlink" title="docker 换源、修改 docker cgroup driver 信息"></a>docker 换源、修改 docker cgroup driver 信息</h3><ul><li>阿里云</li></ul><blockquote><p><a href="https://cr.console.aliyun.com/" target="_blank" rel="noopener">容器进行服务控制台</a></p><p><a href="https://cr.console.aliyun.com/undefined/instances/mirrors" target="_blank" rel="noopener">镜像加速器</a></p></blockquote><ul><li>修改 docker cgroup driver 信息<pre><code>sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{"registry-mirrors": ["你的镜像加速地址"],"exec-opts": [ "native.cgroupdriver=systemd" ]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker</code></pre></li></ul><script>    console.log(`sudo tee /etc/docker/daemon.json <<-'EOF'{  "registry-mirrors": ["https://e5u2yxrz.mirror.aliyuncs.com"],  "exec-opts": [ "native.cgroupdriver=systemd" ]}EOF`)</script><h2 id="配置-vim-信息"><a href="#配置-vim-信息" class="headerlink" title="配置 vim 信息"></a>配置 vim 信息</h2><pre><code>sudo apt install -y vimvim ~/.vimrc</code></pre><pre><code>set relativenumberset ts=2set sw=2set sts=2set expandtabset autoindent%retab!</code></pre><h2 id="安装-openvpn"><a href="#安装-openvpn" class="headerlink" title="安装 openvpn"></a>安装 openvpn</h2><p>将 <code>https://raw.githubusercontent.com/Nyr/openvpn-install/master/openvpn-install.sh</code> 内容保存至 <code>/usr/local/bin/openvpn-install.sh</code> 脚本中</p><pre><code>openvpn-install.sh</code></pre><h2 id="加入-k8s-集群"><a href="#加入-k8s-集群" class="headerlink" title="加入 k8s 集群"></a>加入 k8s 集群</h2><p>待补充</p><h2 id="安装-xrdp-进行远程登录桌面"><a href="#安装-xrdp-进行远程登录桌面" class="headerlink" title="安装 xrdp 进行远程登录桌面"></a>安装 xrdp 进行远程登录桌面</h2><p><code>sudo apt install xrdp</code></p><p>windows 使用 <code>mstsc</code> 进行桌面登录</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>树莓派 | 01 无显示器安装并通过wifi、ssh无线连接学习教程记录：<a href="https://www.jianshu.com/p/8ec5781ef055" target="_blank" rel="noopener">https://www.jianshu.com/p/8ec5781ef055</a></li><li>树莓派笔记04—树莓派更换源：<a href="https://www.jianshu.com/p/768f0181672b" target="_blank" rel="noopener">https://www.jianshu.com/p/768f0181672b</a></li><li>导入密钥：<a href="https://blog.csdn.net/weixin_43866471/article/details/94150378" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43866471/article/details/94150378</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、更新应用</title>
      <link href="/k8s/update-app/"/>
      <url>/k8s/update-app/</url>
      
        <content type="html"><![CDATA[<h2 id="更新应用版本"><a href="#更新应用版本" class="headerlink" title="更新应用版本"></a>更新应用版本</h2><ol><li><p>查看部署<br><code>kubectl get deployments</code></p></li><li><p>查看容器组<br><code>kubectl get pods</code></p></li><li><p>查看容器映像版本<br><code>kubectl describe pods</code></p></li></ol><p>查看 image 字段信息</p><ol start="4"><li><p>更新映像版本<br><code>kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2</code></p></li><li><p>查看容器组信息<br><code>kubectl get pods -o wide</code></p></li></ol><h2 id="验证更新"><a href="#验证更新" class="headerlink" title="验证更新"></a>验证更新</h2><ol><li><p>查看服务公开的 ip 和端口号信息<br><code>kubectl describe services/kubernetes-bootcamp</code></p></li><li><p>查看节点端口信息，并保存在环境变量 NODE_PORT 中<br><code>export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='{{(index .spec.ports 0).nodePort}}')</code></p></li><li><p>对公开的端口信息进行请求<br><code>curl $(minikube ip):$NODE_PORT</code></p></li><li><p>通过 <code>kubectl rollout status</code> 命令确认更新<br><code>kubectl rollout status deployments/kubernetes-bootcamp</code></p></li><li><p>查看当前映像版本<br><code>kubectl describe pods | grep Image:</code></p></li></ol><h2 id="回滚更新"><a href="#回滚更新" class="headerlink" title="回滚更新"></a>回滚更新</h2><ol><li><p>查新部署版本<br><code>kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=gcr.io/google-samples/kubernetes-bootcamp:v10</code></p></li><li><p>查看部署状态<br><code>kubectl get deployments</code></p></li></ol><p>出了问题…我们没有所需数量的容器组。再次查看容器组信息</p><ol start="3"><li><p>查看容器组信息<br><code>kubectl get pods</code></p></li><li><p>查看容器组的详情信息<br><code>kubectl describe pods</code></p></li><li><p>回滚前一个版本<br><code>kubectl rollout undo deployments/kubernetes-bootcamp</code></p></li><li><p>查看容器组信息<br><code>kubectl get pods</code></p></li><li><p>查看容器组详细信息<br><code>kubectl describe pods</code></p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、扩展应用程序</title>
      <link href="/k8s/extend-application/"/>
      <url>/k8s/extend-application/</url>
      
        <content type="html"><![CDATA[<h2 id="扩展部署"><a href="#扩展部署" class="headerlink" title="扩展部署"></a>扩展部署</h2><ol><li><p>查看部署<br><code>kubectl get deployments</code></p></li><li><p>扩展部署<br><code>kebuctl scale deployments/kubernetes-bootcamps --replicas=4</code></p></li><li><p>查看是否扩展成功<br><code>kubectl get deployments</code></p></li><li><p>查看扩展的不同 ip 节点信息<br><code>kubectl get pods -o wide</code></p></li><li><p>检查部署事件日志<br><code>kubectl describe deployments/kubernetes-bootcamp</code></p></li></ol><p>第二步扩展将在部署日志中自动进行注册，可以查看部署的详细信息进行确认</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><ol><li><p>查看暴露的 IP 和端口<br><code>kubectl describe services/kubernetes-bootcamp</code></p></li><li><p>创建一个环境变量 NODE_PORT 用于保存节点端口信息<br><code>export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='{{(index .spec.ports 0).nodePort}}')</code></p></li><li><p>对暴露的 ip 和端口进行请求<br><code>curl $(minikube ip):$NODE_PORT</code></p></li></ol><p>我们的每一个请求都会有不同的结果，这表明负载均衡正常工作</p><h2 id="缩小部署"><a href="#缩小部署" class="headerlink" title="缩小部署"></a>缩小部署</h2><ol><li><p>缩小部署<br><code>kubectl scale deployments/kubernetes-bootcamp --replicas=2</code></p></li><li><p>查看部署信息<br><code>kubectl get deployments</code></p></li><li><p>查看 pods 信息<br><code>kubectl get pods -o wide</code></p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、公开的暴露应用程序</title>
      <link href="/k8s/exposed-applications/"/>
      <url>/k8s/exposed-applications/</url>
      
        <content type="html"><![CDATA[<h2 id="创建一个新服务"><a href="#创建一个新服务" class="headerlink" title="创建一个新服务"></a>创建一个新服务</h2><ol><li><p>查看当前的 PODS 信息<br><code>kubectl get pods</code></p></li><li><p>查看集群中当前的服务<br><code>kubectl get services</code></p></li><li><p>暴露应用程序<br><code>kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080</code></p></li><li><p>再次查看集群中当前的服务<br><code>kubectl get services</code></p></li><li><p>查看服务的详细信息<br><code>kubectl describe services/kubernetes-bootcamp</code></p></li><li><p>查看服务暴露出的端口号，并储存在环境变量 NODE_PORT 中<br><code>export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='{{(index .spec.ports 0).nodePort}}')</code></p></li><li><p>使用节点 ip 与端口号访问服务<br><code>curl $(minikube ip):$NODE_PORT</code></p></li></ol><h2 id="使用标签"><a href="#使用标签" class="headerlink" title="使用标签"></a>使用标签</h2><ol><li>查看部署详细信息<br><code>kubectl describe deployment</code></li></ol><p>部署在创建完成后，会自动为 POD 创建一个标签</p><ol start="2"><li><p>使用标签查询 POD 列表<br><code>kubectl get pods -l run=kubernetes-bootcamp</code></p></li><li><p>使用标签查看存在的服务<br><code>kubectl get services -l run=kubernetes-bootcamp</code></p></li><li><p>获取 POD 名称，并储存在 POD_NAME 环境变量中<br><code>export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')</code></p></li><li><p>应用新标签<br><code>kubectl label pod $POD_NAME app=v1</code></p></li></ol><p>使用 label 命令应用新标签，后跟对象类型、对象名称和新标签</p><ol start="6"><li><p>查看 pods 详细信息<br><code>kubectl describe pods $POD_NAME</code></p></li><li><p>使用新标签查询 pods 信息<br><code>kubectl get pods -l app=v1</code></p></li></ol><h2 id="删除一个服务"><a href="#删除一个服务" class="headerlink" title="删除一个服务"></a>删除一个服务</h2><ol><li><p>删除服务<br><code>kubectl delete service -l run=kubernetes-bootcamp</code></p></li><li><p>确认服务是否已删除<br><code>kubectl get services</code></p></li><li><p>确认路由是否公开<br><code>curl $(minikube ip):$NODE_PORT</code></p></li></ol><p>使用 curl 请求之前公开暴露的端口信息，确认路由是否已关闭</p><ol start="4"><li>确认应用程序是否仍在运行<br><code>kubectl exec -ti $POD_NAME curl localhost:8080</code></li></ol><p>第三步可以确认从集群外是否已无法访问应用程序，第四步通过 pod 进行 curl 请求，可以确认程序是否仍在运行</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、探索应用</title>
      <link href="/k8s/exploration-and-application/"/>
      <url>/k8s/exploration-and-application/</url>
      
        <content type="html"><![CDATA[<h2 id="检查应用程序配置"><a href="#检查应用程序配置" class="headerlink" title="检查应用程序配置"></a>检查应用程序配置</h2><ol><li><p>查看当前 Pods<br><code>kubectl get pods</code></p></li><li><p>查看当前 Pods 的详细信息<br><code>kubectl describe pods</code></p></li></ol><h2 id="在终端中显示应用程序"><a href="#在终端中显示应用程序" class="headerlink" title="在终端中显示应用程序"></a>在终端中显示应用程序</h2><ol><li><p>创建命令行交互代理<br><code>kubectl proxy</code></p></li><li><p>获取 POD 名称并储存在环境变量 <code>POD_NAME</code> 中</p></li></ol><p><code>export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')</code></p><ol start="3"><li>在命令行中使用 CURL 命令，通过 API 断点与应用程序交互，获取 pod 信息<br><code>curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/proxy/</code></li></ol><h2 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h2><ol><li>查看容器日志<br><code>kubectl logs $POD_NAME</code></li></ol><p>通常应用程序发送到 STDOUT 的任何内容都将做为 POD 中容器的日志，我们可以使用 <code>kubectl logs</code> 来检索这些日志</p><h2 id="在容器上执行命令"><a href="#在容器上执行命令" class="headerlink" title="在容器上执行命令"></a>在容器上执行命令</h2><ol><li>在容器上执行命令<br><code>kubectl exec $POD_NAME 命令</code></li></ol><p>如：<code>kubectl exec $POD_NAME env</code></p><ol start="2"><li><p>在容器中启动一个会话<br><code>kubectl exec -ti $POD_NAME bash</code></p></li><li><p>查看文件信息<br><code>cat server.js</code></p></li><li><p>检查运行状态<br><code>curl localhost:8080</code></p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、部署一个应用</title>
      <link href="/k8s/deploy-an-application/"/>
      <url>/k8s/deploy-an-application/</url>
      
        <content type="html"><![CDATA[<p><a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/deploy-app/deploy-intro/" target="_blank" rel="noopener">前提摘要</a></p><p><strong>kubectl 常见使用格式是：<code>kubectl action resource</code></strong></p><h2 id="kubectl-基础"><a href="#kubectl-基础" class="headerlink" title="kubectl 基础"></a>kubectl 基础</h2><ol><li><p>查看使用说明<br><code>kubectl</code></p></li><li><p>查看命令帮助<br>在命令之后输入 <code>--help</code>，如：<code>kubectl get nodes --help</code></p></li><li><p>检查 kubectl 是否正确与集群交互<br><code>kubectl version</code></p></li><li><p>查看集群中的节点信息<br><code>kubectl get nodes</code></p></li></ol><h2 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h2><ol><li>创建部署<br>通过输入 <code>kubectl create deployment 部署名 --image=映像位置的完整地址</code> 进行部署。如：<br><code>kubectl create deployment kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1</code></li></ol><p>命令将会做这些事：</p><ul><li>找寻可用节点</li><li>安排应用在这些节点运行</li><li>将集群配置为在需要时在新节点上重新安排实例</li></ul><ol start="2"><li>查看部署<br><code>kubectl get deployments</code></li></ol><h2 id="查看应用"><a href="#查看应用" class="headerlink" title="查看应用"></a>查看应用</h2><p>默认情况下，应用只对节点与集群中的其他服务可见，在集群外的网络不可见。当我们使用 <code>kubectl</code> 命令时，我们通过一个 API 端点与应用程序进行交互。</p><p>kubectl 命令可以创建一个代理将通信转发到集群范围内的私有网络中。这个代理可以通过 Control-C 进行终止，并且在运行过程中不会有任何输出。</p><ol><li>创建代理<br><code>kebuctl proxy</code><br>我们现在在主机和 Kubernetes 集群之间建立了连接。代理允许从这些终端直接访问 API。</li></ol><p>您可以看到通过代理端点承载的所有这些api。如，我们可以使用curl命令直接通过API查询版本：<br><code>curl http://localhost:8001/version</code></p><p><strong>如果 8001 端口不可访问，请确保 <code>kubectl proxy</code> 正在运行</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、创建一个 kubernetes 集群</title>
      <link href="/k8s/create-a-kubernetes-cluster/"/>
      <url>/k8s/create-a-kubernetes-cluster/</url>
      
        <content type="html"><![CDATA[<p><a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/create-cluster/cluster-intro/" target="_blank" rel="noopener">前提摘要</a></p><p><strong>Minikube 是一个快速搭建单节点 Kubenetes 集群的工具</strong></p><ol><li><p>查看是安装 minikube 是否正确安装<br><code>minikube version</code></p></li><li><p>启动集群<br><code>minikube start</code></p></li><li><p>查看 kubectl 是否正确安装<br><code>kubectl version</code></p></li></ol><pre><code>Client Version: version.Info{Major:"1", Minor:"15", GitVersion:"v1.15.2", GitCommit:"f6278300bebbb750328ac16ee6dd3aa7d3549568", GitTreeState:"clean", BuildDate:"2019-08-05T09:23:26Z", GoVersion:"go1.12.5", Compiler:"gc", Platform:"linux/amd64"}Server Version: version.Info{Major:"1", Minor:"15", GitVersion:"v1.15.0", GitCommit:"e8462b5b5dc2584fdcd18e6bcfe9f1e4d970a529", GitTreeState:"clean", BuildDate:"2019-06-19T16:32:14Z", GoVersion:"go1.12.5", Compiler:"gc", Platform:"linux/amd64"}</code></pre><p>客户端版本是 kubectl 的版本，服务端版本是 master 节点中 Kubernetes 的版本。</p><ol start="4"><li><p>查看集群中的详细信息<br><code>kubectl cluster-info</code></p></li><li><p>查看集群中的节点信息<br><code>kubectl get nodes</code></p></li></ol><p><strong>Ready 状态的节点代表它已经准备好接受要部署的应用程序。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建 elasticsearch 环境</title>
      <link href="/sou-suo-yin-qing/build-elastic-search-environment/"/>
      <url>/sou-suo-yin-qing/build-elastic-search-environment/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><ol><li>上传编写好的 docker 版 elasticsearch.zip 至服务器</li></ol><p>下载地址：<a href="/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/build-elastic-search-environment/elasticsearch.zip">elasticsearch.zip</a></p><p><code>scp elasticsearch.zip root@servername:/usr/local/src</code></p><ol start="2"><li>登录服务器，进入目录 <code>/usr/local/src</code></li></ol><p><code>cd /usr/local/src</code></p><ol start="3"><li>安装解压命令</li></ol><p><code>apt install unzip</code></p><ol start="4"><li>解压压缩包</li></ol><p><code>unzip elasticsearch.zip</code></p><ol start="5"><li>使用 docker 构建 elasticsearch 镜像</li></ol><p><code>docker build -t elasticsearch /usr/local/src/elasticsearch</code></p><ol start="6"><li>启动 elasticsearch 容器（-Xms1g -Xmx1g：启动时分配内存 1G，运行时最大允许内存分配 1G）</li></ol><p><code>docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e "ES_JAVA_OPTS=-Xms1g -Xmx1g" elasticsearch</code></p><ol start="7"><li>检查启动结果</li></ol><p><code>curl 127.0.0.1:9200</code></p><pre><code>{  "name" : "040d9e6a549a",  "cluster_name" : "docker-cluster",  "cluster_uuid" : "yZ9Vi2_PSpClC5c_j7AVhg",  "version" : {    "number" : "7.4.0",    "build_flavor" : "default",    "build_type" : "docker",    "build_hash" : "22e1767283e61a198cb4db791ea66e3f11ab9910",    "build_date" : "2019-09-27T08:36:48.569419Z",    "build_snapshot" : false,    "lucene_version" : "8.2.0",    "minimum_wire_compatibility_version" : "6.8.0",    "minimum_index_compatibility_version" : "6.0.0-beta1"  },  "tagline" : "You Know, for Search"}</code></pre><p>注：<strong>若检查安装结果未出现 elasticsearch 正常输出，检查 elasticsearch 容器日志，并根据日志解决后重新创建容器（若提示内存不足，可尝试降低 -Xms -Xmx 数值后再试，若依然不行，考虑升级机器内存）</strong></p><pre><code>docker logs elasticsearchdocker rm elasticsearchdocker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e "ES_JAVA_OPTS=-Xms1g -Xmx1g" elasticsearch</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>JVM 调优总结 -Xms -Xmx -Xmn -Xss<br><a href="https://www.cnblogs.com/ceshi2016/p/8447989.html" target="_blank" rel="noopener">https://www.cnblogs.com/ceshi2016/p/8447989.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 搜索引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境、搜索引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang 创建 tcp 服务器</title>
      <link href="/kai-fa/golang-creates-tcp-server/"/>
      <url>/kai-fa/golang-creates-tcp-server/</url>
      
        <content type="html"><![CDATA[<h2 id="直接放代码"><a href="#直接放代码" class="headerlink" title="直接放代码"></a>直接放代码</h2><h3 id="1-服务器"><a href="#1-服务器" class="headerlink" title="1. 服务器"></a>1. 服务器</h3><pre><code></code></pre><h3 id="2-客户端"><a href="#2-客户端" class="headerlink" title="2. 客户端"></a>2. 客户端</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium 之 WebDriver</title>
      <link href="/ce-shi/webdriver-of-selenium/"/>
      <url>/ce-shi/webdriver-of-selenium/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>你是否遇到过如下场景呢？</p><ul><li>打开特定的网站进行一些特定的操作。</li><li>开发时，使用浏览器对页面进行访问，查看效果。</li></ul><p>本文我们简单记录下关于以上问题的一种处理方案（Selenium）相关的驱动 WebDriver 的安装。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Selenium 是一个用于 Web 应用程序测试的工具，Selenium 测试直接运行在浏览器中，就像真正的用户在操作一样（P.S. 模拟用户做事的「人」）。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><blockquote><p>工欲善其事，必先利其器。– 孔子（春秋）《论语・卫灵公》</p></blockquote><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><p>打开浏览器，访问 <a href="https://docs.seleniumhq.org/download/" target="_blank" rel="noopener">selenium 下载页:https://docs.seleniumhq.org/download/</a> ，滑动鼠标来到 Third Party Drivers, Bindings, and Plugins 区块，下载自己浏览器对应的 Selenium webdriver 驱动。</p><p><img src="webdriver-download.gif" alt="Google Chrome webdriver 下载"></p><h3 id="2-解压并配置环境变量"><a href="#2-解压并配置环境变量" class="headerlink" title="2. 解压并配置环境变量"></a>2. 解压并配置环境变量</h3><p>将 webdriver 解压至 c:\webdrivers 目录中，然后在环境变量 PATH 中添加 C:\webdrivers 。</p><p><img src="webdriver-path.gif" alt="Google Chrome webdriver 解压并配置环境变量 PATH"></p><h3 id="3-验证安装结果"><a href="#3-验证安装结果" class="headerlink" title="3. 验证安装结果"></a>3. 验证安装结果</h3><p>打开命令行 cmd，输入 <code>chromedriver.exe --version</code>，查看是否有版本输出。</p><p><img src="webdriver-check.gif" alt="Google Chrome webdriver 验证安装结果"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Protocol Buffers 应用之 Laravel 项目创建</title>
      <link href="/kai-fa/laravel-project-creation-for-protocol-buffers-applications/"/>
      <url>/kai-fa/laravel-project-creation-for-protocol-buffers-applications/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经过前面 2 篇文章的铺垫，我们对 Protocol Buffers 已经有了一个初步的了解。接下来写点东西来巩固和加强我们的理解。</p><p>Protocol Buffers 只需要定义一次消息协议，便可在不同的语言之间以更少的数据量进行数据的传递。本文我们以一个实际的例子来进行展现说明。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-安装-laravel-框架"><a href="#1-安装-laravel-框架" class="headerlink" title="1. 安装 laravel 框架"></a>1. 安装 laravel 框架</h3><p>接下来我们要创建 Laravel 项目，请打开浏览器访问：<a href="https://laravel.com/docs/5.8/installation" target="_blank" rel="noopener">https://laravel.com/docs/5.8/installation</a> ，滑动页面来到 Via Composer Create-Project 区块，然后按照下图复制我们的项目创建命令：<code>composer create-project --prefer-dist laravel/laravel blog</code> ，并修改项目名为 <code>learn-protocol-buffers</code> 。</p><p><img src="%E5%A4%8D%E5%88%B6-laravel-%E5%AE%89%E8%A3%85%E5%91%BD%E4%BB%A4.png" alt="复制 laravel 安装命令"></p><p>打开终端，选择一个目录，粘贴项目创建命令：<code>composer create-project --prefer-dist laravel/laravel learn-protocol-buffers</code>，并按下回车执行安装，经过短暂的等待，我们便安装好了项目 <code>learn-protocol-buffers</code> 。</p><p><img src="%E5%AE%89%E8%A3%85%E9%A1%B9%E7%9B%AE.png" alt="安装项目"></p><p><img src="%E9%A1%B9%E7%9B%AE%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png" alt="项目安装完成"></p><h3 id="2-配置项目基本信息"><a href="#2-配置项目基本信息" class="headerlink" title="2. 配置项目基本信息"></a>2. 配置项目基本信息</h3><ol><li>用 PHPStorm 打开项目。</li></ol><p><img src="%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE.png" alt="打开项目"></p><ol start="2"><li>编辑 .env 文件中的数据库连接配置部分信息为项目指定的数据库 learn-protobuf</li></ol><p><img src="%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E9%85%8D%E7%BD%AE.png" alt="修改数据库连接配置"></p><ol start="3"><li>创建数据库 <code>learn-protobuf</code></li></ol><p><img src="%E6%96%B0%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="新建数据库"></p><p><img src="%E6%96%B0%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93-%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BF%A1%E6%81%AF.png" alt="新建数据库-配置数据库信息"></p><h3 id="3-配置服务器信息"><a href="#3-配置服务器信息" class="headerlink" title="3. 配置服务器信息"></a>3. 配置服务器信息</h3><ol><li>新建服务器配置</li></ol><p><img src="%E6%96%B0%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE.png" alt="新建服务器配置"></p><ol start="2"><li>编辑服务器配置（编辑完成后记得重启 web 服务）</li></ol><p><img src="%E7%BC%96%E8%BE%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE.png" alt="编辑服务器配置"></p><ol start="3"><li>修改 hosts 文件，在文件中添加我们刚刚配置的域名 <code>learn-protobuf.test</code></li></ol><p><img src="%E6%B7%BB%E5%8A%A0-hosts-%E5%9F%9F%E5%90%8D%E8%AE%B0%E5%BD%95.png" alt="添加 hosts 域名记录"></p><h3 id="4-验证安装结果"><a href="#4-验证安装结果" class="headerlink" title="4. 验证安装结果"></a>4. 验证安装结果</h3><p>请打开浏览器访问 <a href="http://learn-protobuf.test" target="_blank" rel="noopener">http://learn-protobuf.test</a> 查看安装结果。</p><p><img src="%E8%AE%BF%E9%97%AE%E9%A1%B9%E7%9B%AE.png" alt="访问项目"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Protocol-Buffers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Protocol Buffers 协议基础语法</title>
      <link href="/kai-fa/protocol-buffers-protocol-basic-grammar/"/>
      <url>/kai-fa/protocol-buffers-protocol-basic-grammar/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>继上一节介绍了 Protocol Buffers 的相关信息后，我们了解到协议的一些特性，优势。</p><p>接下来让我们简单学习下 Protocol Buffers 的语法知识。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1. 注释"></a>1. 注释</h3><p>使用 C/C++ 语法的注释风格 <code>//</code>（单行注释）和 <code>/* ... */</code>（多行注释）向 proto 文件中添加注释。</p><h3 id="2-语法说明"><a href="#2-语法说明" class="headerlink" title="2. 语法说明"></a>2. 语法说明</h3><pre><code>// 使用 proto3 语法syntax = "proto3";// 定义 SearchRequest 协议缓冲区数据结构（后文简称消息消息）message SearchRequest {  string query = 1; // 指定 query 参数的类型为 string，并分配字段编号为 1.  int32 page_number = 2; // 指定 page_number 参数的类型为 int32，并分配字段编号为 2.  int32 result_per_page = 3; // 指定 result_per_page 参数的类型为 int32，并分配字段编号为 3.}// 定义 SearchResponse 消息message SearchResponse { ...}</code></pre><p><strong>更多参数类型详见 <a href="https://developers.google.cn/protocol-buffers/docs/proto3" target="_blank" rel="noopener">协议缓冲区语言指引第三版</a> Scalar Value Types（标量值类型）部分内容。</strong></p><p>注：</p><ul><li>每一个字段都有自己唯一的字段编号，这些字段编号用于二进制格式中标识你的字段信息。</li><li>字段编号的分配从 1 开始。</li><li>字段编号 1 ~ 15 采用 1 个字节进行编码，16 ~ 2047 采用 2 个字节进行编码。</li><li>多语言类型可以添加在单个 <code>.proto</code> 文件中。</li><li>消息类型可以进行嵌套。</li><li>每个消息中的参数可以有 0 个或 1 个信息，这是 proto3 的默认语法。</li><li>repeated 表明指定字段可以重复任意次数（包括 0 次）。</li><li>reserved 指定保留已移除的字段编号或字段名（见下方示例）。</li><li>标量值类型与语言对应参考表见附录 <a href="https://developers.google.cn/protocol-buffers/docs/proto3" target="_blank" rel="noopener">协议缓冲区语言指引第三版</a> 语言指引 Scalar Value Types（标量值类型）部分内容。</li><li>消息的默认值通常是 空值（string）、空字节（bytes）、零值（numeric）、假值（bool）、</li><li>枚举值的第一个值为默认值，且必须定义为 0 值，便于兼容 proto2 协议枚举值语法规则。</li><li>重复字段默认是空的，通常为对应语言的空列表。</li><li>布尔值的默认值为假值，无法判断是否显示（开发者主动将该值）设置为假值，请尽量避免这种情况的出现，如有需要，请考虑使用其他类型值进行参数定义。</li><li>标量的类型值为默认值时，不会对该字段进行序列化操作。</li><li>在枚举类型中，指定 <code>allow_alias</code> 为 true，允许该枚举类型中出现同一字段值。</li><li>import 可以导入其他消息定义。</li><li>消息定义中可以使用其他消息做类型。</li><li>消息协议的更新有着一些默认规则，详见 <a href="https://developers.google.cn/protocol-buffers/docs/proto3" target="_blank" rel="noopener">协议缓冲区语言指引第三版</a> 语言指引 Updating A Message Type 部分内容。</li><li>未知类型总是会被序列化输出，在 proto3 协议中，未知类型会被忽略，在 3.5 及更高的版本中，解析期间未知字段会被保留。</li><li>Any 任意类型需要导入 <code>import "google/protobuf/any.proto";</code> 协议文件。</li><li>oneof 可以指定字段为多种类型</li><li>oneof 不可以指定 repeated 重复。</li><li>oneof 在更新值时，已有的值会被清空。</li><li>关联映射类型不可以指定 repeated 重复。</li><li>添加包名有助于避免生成的源代码冲突，在生成源代码时，报名会被翻译成对应语言的命名空间（模块、包）。</li><li>JSON 类型映射默认使用小驼峰命名规则进行消息序列化，在字段定义时使用 <code>json_name</code> 可更改为制定的 JSON 字段名。</li><li>通过定义 service 可以开启 消息协议的 RPC（Remote Procedure Call）调用。</li><li>php 的 rpc 服务端目前还没有较为合适的实现，暂时做 rpc 客户端使用。</li><li>一些其他语言的可选选项详见附录 <a href="https://developers.google.cn/protocol-buffers/docs/proto3" target="_blank" rel="noopener">协议缓冲区语言指引第三版</a> 语言指引 Options 部分内容。</li></ul><h3 id="3-消息示例"><a href="#3-消息示例" class="headerlink" title="3. 消息示例"></a>3. 消息示例</h3><p>保留值与保留类型示例</p><pre><code>// 定义 Foo 协议缓冲区数据结构message Foo {  reserved 2, 15, 9 to 11; // 通过字段编号指定保留字段信息  reserved "foo", "bar"; // 通过字段名自定保留字段信息}</code></pre><p>枚举类型示例</p><pre><code>message SearchRequest {  string query = 1;  int32 page_number = 2;  int32 result_per_page = 3;  // 定义枚举类型 Corpus  enum Corpus {    UNIVERSAL = 0; // 定义默认值 UNIVERSAL（默认值为 0，且必须是枚举类型第一个元素）    WEB = 1;    IMAGES = 2;    LOCAL = 3;    NEWS = 4;    PRODUCTS = 5;    VIDEO = 6;  }  Corpus corpus = 4; // 定义参数 corpus 的类型为枚举类型 Corpus，分配字段编号为 4。}</code></pre><p>枚举类型别名示例</p><pre><code>enum EnumAllowingAlias {  option allow_alias = true; // 允许枚举类型 EnumAllowingAlias 出现别名（字段值编号相同）。  UNKNOWN = 0;  STARTED = 1;  RUNNING = 1;}enum EnumNotAllowingAlias {  UNKNOWN = 0;  STARTED = 1;  // RUNNING = 1;  // 取消注释后，源代码生产工具将会发生编译错误，并提示错误信息。}</code></pre><p>消息导入示例</p><pre><code>import "myproject/other_protos.proto";</code></pre><p>嵌套消息类型定义示例</p><pre><code>message SearchResponse {  message Result {    string url = 1;    string title = 2;    repeated string snippets = 3;  }  repeated Result results = 1;}</code></pre><p>任意值类型示例</p><pre><code>import "google/protobuf/any.proto";message ErrorStatus {  string message = 1;  repeated google.protobuf.Any details = 2;}</code></pre><p>Oneof 示例</p><pre><code>message SampleMessage {  oneof test_oneof {    string name = 4;    SubMessage sub_message = 9;  }}</code></pre><p>指定 json_name 示例</p><pre><code>// 第三方 app 登录响应message OtherAppLoginResponse {    Response response = 1; // 接口响应信息    int32 user_id = 2 [json_name="user_id"]; // 用户 id，json 输出为 user_id    string access_token = 3; // 登录 token，json 输出为 accessToken    string token_type = 4; // 刷新 token，json 输出为 tokenType    string expire_at = 5; // 失效时间，json 输出为 expireAt}</code></pre><h3 id="3-附录"><a href="#3-附录" class="headerlink" title="3. 附录"></a>3. 附录</h3><p>协议缓冲区语言指引第三版：<a href="https://developers.google.cn/protocol-buffers/docs/proto3" target="_blank" rel="noopener">https://developers.google.cn/protocol-buffers/docs/proto3</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Protocol-Buffers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Protocol Buffers 简介</title>
      <link href="/kai-fa/introduction-to-protocol-buffers/"/>
      <url>/kai-fa/introduction-to-protocol-buffers/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是-Protocol-Buffers"><a href="#1-什么是-Protocol-Buffers" class="headerlink" title="1. 什么是 Protocol Buffers?"></a>1. 什么是 Protocol Buffers?</h2><p>Protocol Buffers (ProtocolBuffer/protobuf) 是 Google 公司开发的一种数据描述语言.</p><h2 id="2-为什么使用-Protocol-Buffers"><a href="#2-为什么使用-Protocol-Buffers" class="headerlink" title="2. 为什么使用 Protocol Buffers?"></a>2. 为什么使用 Protocol Buffers?</h2><p>Protocol Buffers 是类似于 XML、JSON 的一种可扩展性描述语言，它可用于数据储存、协议通讯等多方面。和 XML、JSON 相比，它将数据结构序列化成二进制（可选序列化成 JSON 格式），在序列化时，去除了对无用信息的储存。所以它更小、更快、更简单。我们只需要定义一次数据结构协议，然后可以使用工具生成不同语言之间操作读取和序列化数据结构的源代码。它可以让我们更方便的在不同语言、不同的数据流之前进行操作。</p><h2 id="3-语言支持情况"><a href="#3-语言支持情况" class="headerlink" title="3. 语言支持情况"></a>3. 语言支持情况</h2><p>于今日今时（2019-08-17 16:37），Protocol Buffers 协议第二版已支持生成 Java, Python, Objective-C, C++ 等语言的源代码。在第三版协议中，新增了对 Dart, Go, Ruby, C# 等语言的源代码生成支持（更多语言详见参考网页）。以后也将陆陆续续地新增对其他语言的支持。</p><h2 id="4-附录"><a href="#4-附录" class="headerlink" title="4. 附录"></a>4. 附录</h2><p>协议引导概览: <a href="https://developers.google.cn/protocol-buffers/docs/overview" target="_blank" rel="noopener">https://developers.google.cn/protocol-buffers/docs/overview</a><br>参考网页：<a href="https://developers.google.cn/protocol-buffers/docs/reference/overview" target="_blank" rel="noopener">https://developers.google.cn/protocol-buffers/docs/reference/overview</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Protocol-Buffers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 添加模块</title>
      <link href="/nginx/nginx-add-module/"/>
      <url>/nginx/nginx-add-module/</url>
      
        <content type="html"><![CDATA[<h2 id="进入指定源码目录"><a href="#进入指定源码目录" class="headerlink" title="进入指定源码目录"></a>进入指定源码目录</h2><p>cd /usr/src/</p><h2 id="获取-nginx-源码"><a href="#获取-nginx-源码" class="headerlink" title="获取 nginx 源码"></a>获取 nginx 源码</h2><p>apt source nginx</p><h2 id="安装相关依赖与一些相关软件"><a href="#安装相关依赖与一些相关软件" class="headerlink" title="安装相关依赖与一些相关软件"></a>安装相关依赖与一些相关软件</h2><p>apt install vim wget git nginx dpkg-dev libpcre3-dev libssl-dev libxslt1-dev libgd2-xpm-dev libgeoip-dev -y</p><h2 id="获取-nginx-编译参数，一会备用"><a href="#获取-nginx-编译参数，一会备用" class="headerlink" title="获取 nginx 编译参数，一会备用"></a>获取 nginx 编译参数，一会备用</h2><p>nginx -V</p><blockquote></blockquote><p>–with-cc-opt=’-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2’ –with-ld-opt=’-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now’ –prefix=/usr/share/nginx –conf-path=/etc/nginx/nginx.conf –http-log-path=/var/log/nginx/access.log –error-log-path=/var/log/nginx/error.log –lock-path=/var/lock/nginx.lock –pid-path=/run/nginx.pid –http-client-body-temp-path=/var/lib/nginx/body –http-fastcgi-temp-path=/var/lib/nginx/fastcgi –http-proxy-temp-path=/var/lib/nginx/proxy –http-scgi-temp-path=/var/lib/nginx/scgi –http-uwsgi-temp-path=/var/lib/nginx/uwsgi –with-debug –with-pcre-jit –with-ipv6 –with-http_ssl_module –with-http_stub_status_module –with-http_realip_module –with-http_auth_request_module –with-http_addition_module –with-http_dav_module –with-http_geoip_module –with-http_gunzip_module –with-http_gzip_static_module –with-http_image_filter_module –with-http_v2_module –with-http_sub_module –with-http_xslt_module –with-stream –with-stream_ssl_module –with-mail –with-mail_ssl_module –with-threads</p><h2 id="lua-模块"><a href="#lua-模块" class="headerlink" title="lua 模块"></a>lua 模块</h2><p>git 地址：<a href="https://github.com/openresty/lua-nginx-module" target="_blank" rel="noopener">https://github.com/openresty/lua-nginx-module</a></p><ol><li>安装 luajit2<br>home: <a href="http://luajit.org" target="_blank" rel="noopener">http://luajit.org</a><br>git: <a href="https://github.com/openresty/luajit2" target="_blank" rel="noopener">https://github.com/openresty/luajit2</a></li></ol><pre><code>git clone https://github.com/openresty/luajit2cd luajit2 &amp;&amp; make &amp;&amp; make install &amp;&amp; cd ..</code></pre><ol start="2"><li><p>下载 NDK<br>git: <a href="https://github.com/simplresty/ngx_devel_kit" target="_blank" rel="noopener">https://github.com/simplresty/ngx_devel_kit</a></p><pre><code>git clone https://github.com/simplresty/ngx_devel_kit</code></pre></li><li><p>下载 lua-nginx-module<br>git: <a href="https://github.com/openresty/lua-nginx-module/" target="_blank" rel="noopener">https://github.com/openresty/lua-nginx-module/</a></p><pre><code>git clone https://github.com/openresty/lua-nginx-module/</code></pre></li><li><p>修改编译参数</p></li></ol><ul><li>在 <code>--with-ld-opt</code> 中添加 <code>,-rpath,/usr/local/lib</code></li><li>在编译参数中追加 `–add-module=/usr/src/ngx_devel_kit \<pre><code>   --add-module=/usr/src/lua-nginx-module`</code></pre></li></ul><p>完整编译参数如下:<br>–with-cc-opt=’-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2’ –with-ld-opt=’-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now,-rpath,/usr/local/lib’ –prefix=/usr/share/nginx –conf-path=/etc/nginx/nginx.conf –http-log-path=/var/log/nginx/access.log –error-log-path=/var/log/nginx/error.log –lock-path=/var/lock/nginx.lock –pid-path=/run/nginx.pid –http-client-body-temp-path=/var/lib/nginx/body –http-fastcgi-temp-path=/var/lib/nginx/fastcgi –http-proxy-temp-path=/var/lib/nginx/proxy –http-scgi-temp-path=/var/lib/nginx/scgi –http-uwsgi-temp-path=/var/lib/nginx/uwsgi –with-debug –with-pcre-jit –with-ipv6 –with-http_ssl_module –with-http_stub_status_module –with-http_realip_module –with-http_auth_request_module –with-http_addition_module –with-http_dav_module –with-http_geoip_module –with-http_gunzip_module –with-http_gzip_static_module –with-http_image_filter_module –with-http_v2_module –with-http_sub_module –with-http_xslt_module –with-stream –with-stream_ssl_module –with-mail –with-mail_ssl_module –with-threads –add-module=/usr/src/ngx_devel_kit –add-module=/usr/src/lua-nginx-module</p><ol start="5"><li>重新编译 nginx<pre><code>LUAJIT_LIB=/usr/local/lib LUAJIT_INC=/usr/local/include/luajit-2.1 ./configure --with-cc-opt='-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2' --with-ld-opt='-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now,-rpath,/usr/local/lib' --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_v2_module --with-http_sub_module --with-http_xslt_module --with-stream --with-stream_ssl_module --with-mail --with-mail_ssl_module --with-threads --add-module=/usr/src/ngx_devel_kit --add-module=/usr/src/lua-nginx-modulemake -j2 # 使用 2 个线程进行编译，此处建议为 cpu 的 2 倍，过多会卡# make install # 不用执行。执行后会覆盖 /usr/share/nginx/sbin/nginx</code></pre></li></ol><h1 id="手动执行"><a href="#手动执行" class="headerlink" title="手动执行"></a>手动执行</h1><h1 id="test-f-‘-usr-sbin-nginx’"><a href="#test-f-‘-usr-sbin-nginx’" class="headerlink" title="test ! -f ‘/usr/sbin/nginx’ \"></a>test ! -f ‘/usr/sbin/nginx’ \</h1><h1 id="mv-‘-usr-sbin-nginx’"><a href="#mv-‘-usr-sbin-nginx’" class="headerlink" title="|| mv ‘/usr/sbin/nginx’ \"></a>|| mv ‘/usr/sbin/nginx’ \</h1><h1 id="‘-usr-sbin-nginx-old’"><a href="#‘-usr-sbin-nginx-old’" class="headerlink" title="‘/usr/sbin/nginx.old’"></a>‘/usr/sbin/nginx.old’</h1><h1 id="cp-objs-nginx-‘-usr-sbin-nginx’"><a href="#cp-objs-nginx-‘-usr-sbin-nginx’" class="headerlink" title="cp objs/nginx ‘/usr/sbin/nginx’"></a>cp objs/nginx ‘/usr/sbin/nginx’</h1><p>nginx -V 确认新编译的是否包含 Lua 模块<br>停止原来的 nginx。<br>启动新的 nginx。<br>不可使用重启。</p><pre><code>6. 测试</code></pre><h1 id="在-etc-nginx-sites-enable-default-的-server-中添加如下内容"><a href="#在-etc-nginx-sites-enable-default-的-server-中添加如下内容" class="headerlink" title="在 /etc/nginx/sites-enable/default 的 server 中添加如下内容"></a>在 /etc/nginx/sites-enable/default 的 server 中添加如下内容</h1><p>server {<br>    …<br>    location /lua {<br>        content_by_lua ‘<br>            ngx.header.content_type = “text/html”;<br>            ngx.say(“Hello Lua.”);<br>        ‘;<br>    }<br>    …<br>}</p><h1 id="检测语法是否正确"><a href="#检测语法是否正确" class="headerlink" title="检测语法是否正确"></a>检测语法是否正确</h1><p>nginx -t</p><h1 id="重新加载-nginx"><a href="#重新加载-nginx" class="headerlink" title="重新加载 nginx"></a>重新加载 nginx</h1><p>nginx -s reload</p><pre><code></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建 OpenVpn</title>
      <link href="/gong-ju/build-openvpn/"/>
      <url>/gong-ju/build-openvpn/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>注：当选择 DNS 时，请尽量选择 2 ~ 4 的值，原因见：<a href="https://github.com/Nyr/openvpn-install/issues/629#issuecomment-509107936" target="_blank" rel="noopener">https://github.com/Nyr/openvpn-install/issues/629#issuecomment-509107936</a></strong></p><pre><code># ubuntu 16.04wget https://git.io/vpn1604 -O openvpn-install.sh &amp;&amp; bash openvpn-install.sh# ubuntu version &gt;= 16.04wget https://git.io/vpn -O openvpn-install.sh &amp;&amp; bash openvpn-install.sh</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>server</p><pre><code>port 1194proto udpdev tunsndbuf 0rcvbuf 0ca ca.crtcert server.crtkey server.keydh dh.pemauth SHA512tls-auth ta.key 0topology subnetserver 10.8.9.0 255.255.255.0ifconfig-pool-persist ipp.txt;push "redirect-gateway def1 bypass-dhcp"push "dhcp-option DNS 8.8.8.8"push "dhcp-option DNS 114.114.114.114"keepalive 10 120cipher AES-256-CBCuser nobodygroup nogrouppersist-keypersist-tunstatus openvpn-status.logverb 5crl-verify crl.pemlog openvpn-server.loglog-append openvpn-server.log# 客户端互相访问client-to-client# 客户端单独配置路由的目录client-config-dir ccd# ipv6 相关;server-ipv6 2001:0db8:ee00:abcd::/64;tun-ipv6;push tun-ipv6;ifconfig-ipv6 2001:0db8:ee00:abcd::1 2001:0db8:ee00:abcd::2;push "route-ipv6 2001:0db8:ee00:ee00::2/64";push "route-ipv6 2000::/3"</code></pre><p>client</p><pre><code>clientdev tunproto udpsndbuf 0rcvbuf 0remote youzan.cblink.net 1194resolv-retry 5nobindpersist-keypersist-tunremote-cert-tls serverauth SHA512cipher AES-256-CBC;setenv opt block-outside-dns # 这里要注释掉，不然客户端不能访问互联网key-direction 1verb 3auth-nocache # 这行是新增的&lt;ca&gt;&lt;/ca&gt;&lt;cert&gt;&lt;/cert&gt;&lt;key&gt;&lt;/key&gt;&lt;tls-auth&gt;&lt;/tls-auth&gt;</code></pre><p>默认使用 udp 协议，1194 端口，根据安装过程中的选择，进行安全组设置。</p><ul><li>腾讯云安全组帮助文档：<a href="https://cloud.tencent.com/document/product/213/34601" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/213/34601</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单片机的小笔记</title>
      <link href="/bi-ji/small-notes-of-single-chip-microcomputer/"/>
      <url>/bi-ji/small-notes-of-single-chip-microcomputer/</url>
      
        <content type="html"><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="2-1-单片机内部资源"><a href="#2-1-单片机内部资源" class="headerlink" title="2.1 单片机内部资源"></a>2.1 单片机内部资源</h3><ol><li><p>什么是单片机内部资源？<br>单片机提供给我们可使用的东西。</p></li><li><p>单片机内部资源有那些？<br>主要有三大资源：</p></li></ol><ul><li>Flash – 程序储存空间，早期单片机是 OTPROM（One Time Programmable Read-Only Memory，即一次可编程只读存储器）</li><li>RAM – 数据储存空间</li><li>SFR – 特殊功能寄存器</li></ul><p>特点：<br>OTPROM: 程序只能写入一次<br>FLASH: 断电后数据不丢失，类似于硬盘<br>RAM: 单片机的数据储存空间，储存程序运行过程中产生的和需要的数据，与电脑的内存相似<br>SFR: 特殊功能寄存器，单片机有很多功能，每隔功能都对应一个或多个 SFR，通过对 SFR 的读写来实现单片机的多种多样的功能</p><p>什么是 51 单片机？<br>51 单片机，指的是兼容 Intel-MCS-51 体系价构的一系列单片机，51 是他的一个通俗的简称。</p><h3 id="2-2-单片机最小系统"><a href="#2-2-单片机最小系统" class="headerlink" title="2.2 单片机最小系统"></a>2.2 单片机最小系统</h3><ol><li><p>什么是单片机最小系统？<br>单片机最小系统，也叫单片机最小应用系统，是指用最少的原件组成单片机可以工作的系统。</p></li><li><p>单片机最小系统的三要素是什么？<br>单片机最小系统的的三要素是电源、晶振、复位电路。</p></li><li><p>什么情况下单片机可以运行下载的程序？<br>一个单片机具备了电源、晶振、复位电路这三个条件后，就可以运行我们下载的程序了。</p></li><li><p>什么是单片机的外设？<br>比如 LED 小灯、数码管、液晶等设备都是属于单片机的外部设备，即外设。</p></li><li><p>我们如何实现想要的功能？<br>我们想要的功能就是通过对单片机编程来控制各种各样的外设实现的。</p></li></ol><p>tips: 电路图放在连线上的字符叫作网络标号，相同名字的网络标号表示这两处地方实际上是连在一起的。</p><h4 id="2-2-1-电源电路"><a href="#2-2-1-电源电路" class="headerlink" title="2.2.1 电源电路"></a>2.2.1 电源电路</h4><ol><li><p>为什么最小系统需要电源电路？<br>电子设备都需要供电，就连我们的家用电气（手电筒）也不例外。</p></li><li><p>目前（写笔记时间为 2019-05-01）主流单片机的电源标准有哪些？<br>目前主流单片机的电源标准有 5V 和 3.3V 这两个标准。存在对电压要求更低的单片机系统，一般多用在一些特定场合。</p></li><li><p>电脑 USB 接口的输出电压是多少？输出电流是多少？</p></li></ol><ul><li>电脑上的 USB 接口的输出电压为直流 5V，输出电流不大于 500 毫安。</li><li>USB 接口电压是 5V ± 5% 为外部提供电压。并不是恒定的 5V 电压。</li><li>USB 2.0 接口电压是 5V ± 3% 为外部提供电压。</li><li>USB 接口的电流比较恒定，一般为 500mA，笔记本只有 100mA。</li></ul><ol start="4"><li><p>单片机电源正极有哪些简称？<br>单片机电源电源正极的简称有 VCC 或 VDD。</p></li><li><p>单片机电源负极的简称有哪些？<br>单片机电源电源负极的简称有 GND。</p></li><li><p>电路原理图有什么作用？<br>电路原理图是为了表达这个电路的工作原理而存在的，很多器件在绘制的时候更多考虑的是方便原理分析，而不是表达各个器件实际位置。比如原理图中的单片机引脚图，引脚的位置我们是可以随意放的，但是每个引脚上有一个数字标号，这个数字标号代表的才是单片机真正的引脚位置。</p></li><li><p>单片机引脚号如何排列？<br>一般情况下，双列直插封装（DIP 封装）的芯片，左上角是 1 脚，逆时针旋转引脚号依次增加，一直到右上角是最大脚位。</p></li></ol><h4 id="2-2-2-晶振电路"><a href="#2-2-2-晶振电路" class="headerlink" title="2.2.2 晶振电路"></a>2.2.2 晶振电路</h4><ol><li><p>什么是晶振？<br>晶振，又叫晶体振荡器。</p></li><li><p>晶振的作用是什么？<br>不停的振荡，为单片机系统提供基准时钟信号。</p></li><li><p>为什么需要有晶振电路？<br>单片机内部所有的工作都是以晶振提供的时钟信号为步调基准进行工作的。</p></li><li><p>晶振引脚的符号是什么？<br>晶振引脚的符号是 XTAL1 和 XTAL2。</p></li><li><p>11.0592M 的晶振中，11.0592M 代表的含义是什么？</p></li><li><p>0592M 的晶振中，11.0592M 代表的含义是该晶振每秒钟振荡 11,059,200 次</p></li><li><p>晶振外接电容的作用是什么？为什么要在晶振外接两个 20pF 的电容？<br>电容的作用是帮助晶振起振，并维持振荡信号的稳定。外接两个达到晶振起振的负载电容。</p></li></ol><h4 id="2-2-3-复位电路"><a href="#2-2-3-复位电路" class="headerlink" title="2.2.3 复位电路"></a>2.2.3 复位电路</h4><ol><li><p>复位电路接哪一个引脚？<br>复位电路接单片机的 RST(reset) 复位引脚。</p></li><li><p>单片机复位一般有哪些情况？</p></li></ol><ul><li>上电复位</li><li>手动复位</li><li>程序自动复位</li></ul><ol start="3"><li><p>上电复位是什么？<br>单片机上电后，要进行一个内部的初始化过程，这个过程可以理解为上电复位。</p></li><li><p>上电复位的作用是什么？<br>上电复位保证单片机每次都从一个固定的相同的状态开始工作。这个过程跟我们打开电脑电源开电脑的过程是一致的。</p></li><li><p>手动复位是什么？有什么例子？<br>当我们的程序运行时，如果遭受到意外干扰而导致程序死机，或者程序跑飞的时候，我们就可以按下一个复位按键，让程序重新初始化重新运行，这个过程就叫做手动复位。最典型的就是我们电脑的重启按钮。</p></li><li><p>程序自动复位是什么？<br>当程序死机或者跑飞的时候，我们的单片机往往有一套自动复位机制，比如看门狗。在这种情况下，如果程序长时间失去响应，单片机看门狗模块会自动复位重启单片机。还有一些情况是我们程序故意重启复位单片机。</p></li></ol><h3 id="2-3-LED-小灯"><a href="#2-3-LED-小灯" class="headerlink" title="2.3 LED 小灯"></a>2.3 LED 小灯</h3><ol><li><p>什么是 LED 小灯？<br>LED(light-emitting diode)，即发光二极管，俗称 LED 小灯。</p></li><li><p>通常二极管的正向导通电压是多少？工作电流是多少？<br>二极管通常的正向导通电压是 1.8V 到 2.2V 之间，工作电流一般在 1mA～20mA 之间。</p></li><li><p>电流变化有什么现象？<br>当电流在 1mA～5mA 之间变化时，随着通过 LED 电流越来越大，我们的肉眼会明显感觉到这个小灯越来越亮，而当电流从<br>5mA～20mA 之间变化时，我们看到的发光二极管的亮度变化就不是太明显了。</p></li><li><p>什么时候 LED 会存在烧坏的危险？<br>当电流超过 20mA 时，LED 就会有烧坏的危险了，电流越大，烧坏的也就越快。</p></li><li><p>自恢复保险丝有什么作用?<br>正常工作的情况下，保险丝可以直接看成导线。当后级电路哪个地方有发生短路的时候，保险丝会自动切断电路，保护开<br>发板以及电脑的 USB 口，当电路正常后，保险丝会恢复畅通，正常工作。</p></li><li><p>电容的作用是什么？</p></li></ol><ul><li>电容可以隔直流通交流。</li><li>电容可以滤除高频信号。</li></ul><ol start="7"><li><p>点亮 LED 小灯需要串联多大的电阻？<br>Vcc +5V，LED 小灯压降 2V，电阻需要承受剩余电压 3V。<br>要求电流在 1<del>20mA，根据欧姆定律 R=U/I可得：<br>当电流为 1mA 时，3V/0.001A = 3000R<br>当电流为 20mA 时，3V/0.02A = 150R<br>所以需要串联一个 150</del>3000Ω（欧姆） 的电阻。</p></li><li><p>什么是限流电阻？<br>电阻值大小的变化，直接可以限制整条通路的电流的大小的电阻叫做限流电阻。</p></li></ol><h3 id="3-1-电磁干扰-EMI"><a href="#3-1-电磁干扰-EMI" class="headerlink" title="3.1 电磁干扰 EMI"></a>3.1 电磁干扰 EMI</h3><ol><li><p>什么是静电放点现象 ESD？<br>冬天的时候，尤其是空气比较干燥的内陆城市，很多朋友都有这样的经历，手触碰到电脑外壳、铁柜子等物品的时候会被电击，这就是“静电放电”现象，也称之为 ESD。</p></li><li><p>什么是快速瞬间群脉冲效果 EFT？<br>早期我们使用电钻这种电机设备，并且同时在听收音机或者看电视的时候，收音机或者电视会出现杂音，这就是“快速瞬间群脉冲”的效果，也称之为 EFT。</p></li><li><p>什么是浪涌效果 Surge？<br>以前的老电脑，有的性能不是很好，带电热插拔优盘、移动硬盘等外围设备的时候，内部会产生一个百万分之一秒的电源切换，直接导致电脑出现蓝屏或者重启现象，就是热插拔的“浪涌”效果，称之为 Surge。</p></li><li><p>电磁干扰举例：<br>一个简单的静电放电，我们用手能感觉到的静电，可能已经达到 3KV 以上了，如果用眼睛能看得到的，至少是 5KV 了，只是因为这个电压虽然很高，能量却非常小，持续的时间非常短，因此不会对人体造成伤害。</p></li><li><p>电磁干扰对元器件有什么影响？<br>瞬间电压过高，有可能造成器件的损坏。即使不损坏，在 2、3 里边介绍的两种现象，也已经严重干扰到设备的正常使用了。</p></li><li><p>如何处理电磁干扰问题？<br>电磁兼容（EMC）。</p></li></ol><h3 id="3-2-去耦电容的应用"><a href="#3-2-去耦电容的应用" class="headerlink" title="3.2 去耦电容的应用"></a>3.2 去耦电容的应用</h3><ol><li>去耦电容有什么作用？</li></ol><ul><li>缓冲作用</li><li>稳定作用</li><li>滤除高频干扰</li></ul><p>说明：<br>缓冲作用：<br>当上电的瞬间，电流从电源处流下来的时候，不稳定，容易冲击电子器件，加个电容可以起到缓冲作用。就如同我们直接用水龙头的水浇地，容易冲坏花花草草。我们只需要在水龙头处加个水池，让水经过水池后再缓慢流进草地，就不会冲坏花草，起到有效的保护作用。</p><p>稳定作用：<br>我们的一整套电路，后级电子器件的功率大小都不一样，而器件正常工作的时候，所需电流的大小也不是一成不变的。比如后级有个器件还没有工作的时候，电流消耗是 100mA，突然它参与工作了，电流猛的增大到了 150mA，这个时候如果没有一个水缸的话，电路中的电压（水位）就会直接突然下降，比如我们的 5V 电压突然降低到 3V了。而我们系统中有些电子元器件，必须高于一定的电压才能正常工作，电压太低就直接不工作了，这个时候水缸就必不可少了。电容会在这个时候把存储在里边的电量释放一下，稳定电压，当然，随后前级的电流会及时把水缸充满的。<br>在电路中需要较大电流供给的器件附近，会加一个大电容，起到稳定电压的作用。</p><p>滤除高频干扰：<br>在所有的 IC 器件的 VCC 和 GND 之间，都会放一个 0.1uF 的高频去耦电容。</p><ol start="2"><li>常见电容有哪些？</li></ol><ul><li>铝电解电容</li><li>钽电容</li><li>陶瓷电容</li></ul><p>说明：<br>铝电解电容个头大，占空间大，单位容量价格最便宜<br>钽电容与陶瓷电容个头小依次减小，性能一般也略好于铝电解电容。价格相对贵不少。<br>一些参数也不相同，在通信要求高的场合要考虑很多。</p><ol start="3"><li>如何选取电容？</li></ol><ul><li>耐压值</li><li>电容容值</li></ul><p>说明：<br>耐压值：<br>5V 系统，电容的耐压值要高于5V，一般推荐 1.5 倍到 2 倍即可，有些场合稍微再高点也可以。</p><p>电容容值：<br>需要根据经验来选取了，选取的时候，要看这个电容起作用的整套系统的功率消耗情况，如果系统耗电较大，波动可能比较大，那么容值就要选大一些，反之可以小一些。</p><ol start="4"><li>去耦高频电容推荐容值多少？<br>去耦高频电容推荐容值为 0.1~10uF。</li></ol><h3 id="3-3-三极管在数字电路中的应用"><a href="#3-3-三极管在数字电路中的应用" class="headerlink" title="3.3 三极管在数字电路中的应用"></a>3.3 三极管在数字电路中的应用</h3><h4 id="3-3-1-三极管的初步认识"><a href="#3-3-1-三极管的初步认识" class="headerlink" title="3.3.1 三极管的初步认识"></a>3.3.1 三极管的初步认识</h4><ol><li>三级管的作用是什么？</li></ol><ul><li>控制、驱动元器件</li></ul><ol start="2"><li><p>三极管的材料是什么？有什么区别？<br>常用的三极管根据材料分有硅管和锗管两种，原理相同，压降略有不同，硅管用的较普遍，而锗管应用较少。</p></li><li><p>三极管的类型有什么？<br>三极管的类型有 PNP 型和 NPN 型</p></li><li><p>三极管的三级是什么？<br>三极管的三级是基极(base)，发射极(emitter)，集电极(collector)。</p></li></ol><h4 id="3-3-2-三极管的原理"><a href="#3-3-2-三极管的原理" class="headerlink" title="3.3.2 三极管的原理"></a>3.3.2 三极管的原理</h4><ol><li>三极管的工作状态有哪些？<br>三极管有截止、放大、饱和三种工作状态。</li></ol><p>说明：<br>放大状态主要应用于模拟电路中，且用法和计算方法也比较复杂。<br>数字电路主要使用的是三极管的开关特性，只用到了截止与饱和两种状态。</p><ol start="2"><li><p>三极管类型如何区分（口诀）？<br>箭头朝内 PNP，导通电压顺箭头过，电压导通，电流控制。</p></li><li><p>如何导通三极管？<br>PNP：<br>e 极电压若高于 b 极电压 0.7V 以上，这个三极管 e 级和 c 级之间就可以顺利导通。也就是说，控制端在 b 和 e 之间，被控制端是 e 和 c 之间。<br>NPN：<br>b 极电压高于 e 极电压 0.7V 以上。<br>总结：箭头的始端比末端高 0.7V 即可导通三极管的 e 极与 c 极。<br>e、c 之间有 0.2V 压降。</p></li><li><p>如何控制三极管的状态？<br>截止：e、b 之间不导通。<br>饱和（三极管的开关特性）：三极管有一个放大倍数 β，若要三极管处于饱和状态，b 极电流必须大于 e、c 之前的电流值除以 β。常用三极管的放大倍数 β 在 100 左右。</p></li></ol><p>注：<br>欧姆定律：R=U/I I=U/R，当电压一定时，I 与 R 成反比。<br>IO 口输入店里最大理论值是 25mA（见相应的 datasheet）。不建议超过 6mA。<br>单片机 IO 口输出高电平时，输出电流为 几十到几百微安。达不到 1 毫安。</p><h4 id="3-3-3-三极管的应用"><a href="#3-3-3-三极管的应用" class="headerlink" title="3.3.3 三极管的应用"></a>3.3.3 三极管的应用</h4><ol><li>三极管常见应用有哪些？</li></ol><ul><li>控制应用</li><li>驱动应用</li></ul><p>说明：<br>驱动应用：<br>5V 单片机接入 12V 系统。IO 口若直接接 12V 电压，单片机会被烧坏。可接入三极管。<br>三极管的工作电压高于单片机的 IO 口电压，用 5V 的 IO 口控制 12V 的电路。</p><h4 id="3-3-4-74HC245-芯片"><a href="#3-3-4-74HC245-芯片" class="headerlink" title="3.3.4 74HC245 芯片"></a>3.3.4 74HC245 芯片</h4><ol><li><p>74HC245 芯片有什么用？<br>74HC245 芯片可用作电流缓冲器。</p></li><li><p>如何使用？<br>参考数据手册，可知其稳定工作电流为 70mA。</p></li></ol><h3 id="3-4-74HC138-三八译码器的应用"><a href="#3-4-74HC138-三八译码器的应用" class="headerlink" title="3.4 74HC138 三八译码器的应用"></a>3.4 74HC138 三八译码器的应用</h3><ol><li><p>为什么需要 138 译码器？<br>设计单片机电路的时候，单片机的 IO 口数量是有限的，有时并满足不了我们的设计需求，我们为了控制更多的器件，就要使用一些外围的数字芯片，这种数字芯片由简单的输入逻辑来控制输出逻辑，比如 74HC138 这个三八译码器。</p></li><li><p>如何使用三八译码器？<br>按照数据手册正确的操作使能端与输入端。</p></li></ol><h3 id="3-5-LED-闪烁程序"><a href="#3-5-LED-闪烁程序" class="headerlink" title="3.5 LED 闪烁程序"></a>3.5 LED 闪烁程序</h3><ol><li><p>如何让 LED 闪烁？<br>LED = 0 点亮，LED = 1 熄灭，在点亮与熄灭之间加入延时即可。</p></li><li><p>定时器 0<br>0b00001001 16 bit 定时器 TL0、TH0 全用 0x09<br>TMOD = 0x01;</p></li></ol><p>TH0 = 0x00;<br>TL0 = 0x00;</p><p>EA = 1;<br>ET0 = 1;<br>TR0 = 1; // 启用定时器 0</p><ol start="6"><li>数码管<br>0bb11111001 // 1<br>0b01010100 // 2 0x54</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Violentmonkey 暴力猴的使用</title>
      <link href="/gong-ju/violentmonkey/"/>
      <url>/gong-ju/violentmonkey/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Violentmonkey - 暴力猴，界面简洁，美观，而不失优雅的扩展。<br>它是一个为浏览器提供用户脚本支持的插件。<br>只要会一点前端知识，你便可通过轻松掌握它，扩展网页功能，满足自己的需要。</p><h2 id="支持的浏览器"><a href="#支持的浏览器" class="headerlink" title="支持的浏览器"></a>支持的浏览器</h2><p>Chrome|Chromium|Opera 15+|QQBrowser|Firefox 57+|…<br>—|—|—|—|—|—|—</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>你可以点击<a href="https://violentmonkey.github.io/get-it/" target="_blank" rel="noopener">这里</a>查看你的浏览器对应的扩展下载地址。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>你可以点击<a href="https://violentmonkey.github.io/api/" target="_blank" rel="noopener">这里</a>查看支持的 API 如何使用。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>背景<br>在使用 GitLab 关联 TAPD 时，我们会对 webhooks 进行设置，选择我们需要的事件进行通知。其中触发 webhook 通知的事件非常多，默认只开启了 Push event。我希望所有的项目关联操作都可以直接与 TAPD 关联上，那么需要对每一个事件都进行勾选。这是一件繁琐的事情，我们可以交给 Violentmonkey 来帮我们完成。</p><p>脚本</p><pre><code>// ==UserScript==// @name Gitlab 集成 event// @namespace mouyong// @description 集成自动勾选所有选择复选 event// @match https://git.cblink.net/*/hooks*// @match https://git.cblink.net/*/settings/integrations// @license LGPL// @grant none// @version 0.0.1.20190709034435// ==/UserScript==document.querySelectorAll("input[name*='events']").forEach(function (_) {    _.setAttribute('checked', true);});</code></pre><p>所有的元数据都必须为以下格式</p><pre><code>// ==UserScript==// @key value// ==/UserScript==</code></pre><p>通过 <code>@name</code> 字段，我们设置了脚本名称。然后在 <code>@namespace</code> 中声明了脚本的命名空间，这样可以保证脚本名不会与他人的脚本重复。<code>@description</code> 字段，简短的介绍了脚本的作用，我们能清晰的知道这个脚本是干嘛用的。<code>@match</code> 告诉浏览器，在哪些网页中需要执行脚本，扩展我们的功能；此处我们需要填写的是新增与修改 webhooks 时的地址。不同项目与不同 hook 的地址是不一样的，所以用 <code>*</code> 来代替所有。关于 <code>@license</code> 是提供授权用规则的。可以查看<a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener">如何选择开源许可证？</a>了解你应该选择什么授权。我选择了 LGPL 授权规则，因为我希望有变动时，我能知道，这样可以共同完善脚本功能。<code>@grant</code> 字段告诉浏览器我们的脚本需要哪些权限，这个功能不需要权限，所以指定为 none。<code>@version</code> 能方便用户升级脚本。所以建议按照<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener">语义化版本 2.0.0</a> 提供一个版本号。</p><p>我们的脚本只有一行内容，查找页面中的所有事件多选框，并一个一个的选中它们。</p><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>点击<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">这里</a>打开用户脚本网站，点击登录。<br>登录后点击退出旁边的用户名，点击提交脚本，我们将脚本内容粘贴到多行输入框中，点击上方的对编辑器启用语法高亮，可以看到是否存在简单的语法问题。这里发布的脚本要尽可能的用 es5 的语法来写，因为当前还有部分浏览器不支持 es6 语法。脚本类型选择一栏，我们适合自己脚本的类型即可。提交页面中的相关信息填写完毕后，便可以发布脚本了。</p><p>点击前往安装<a href="https://greasyfork.org/zh-CN/scripts/387315-gitlab-%E9%9B%86%E6%88%90-event/code" target="_blank" rel="noopener">Gitlab 集成 event</a> 脚本</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element-ui 表格无限抖动问题及解决</title>
      <link href="/kai-fa/infinite-jitter-of-element-ui-table-and-its-solution/"/>
      <url>/kai-fa/infinite-jitter-of-element-ui-table-and-its-solution/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>element-ui 是一个不错的前端框架，可以帮助开发者在开发中快速的完成需求。<br>在开发中，我们的前端 UI 框架也是选择了它。</p><p>最近不知道什么时候起，在项目中遇到了一个问题，UI 框架的表格组件开始出现不抖动问题，见下图。</p><p><img src="%E8%A1%A8%E6%A0%BC%E6%8A%96%E5%8A%A8.gif" alt="表格抖动.gif"></p><p>经历了几天的摸索，官方的 github 中也未查到相关信息。后来在官方的网站中看到了 Gitter 聊天室。<br>在其中找到了答案以及解决方案。</p><p><img src="element-ui_gitter.png" alt="gitter-ui 位置"></p><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>摸索排查，怀疑是表格与滚动条一起触发了临界值问题导致表格宽度在无限计算，通过手动调试进行验证，然后确认是这个原因导致的。</p><p><img src="manual-fix.png" alt="手动调试修复"></p><p>决定直接修改表格宽，但随后否决了这一方案。如果每个用到表格的地方都要加。且都定宽，不太显示。不同的地方展示的数据是不一样的，所以宽度自然也不可能固定。</p><p>后继续排查，发现是自动计算是因为表格中每一列使用 <code>flex: 1</code> 的方式，自动计算过程中，会导致这个问题的出现。当在 class <code>.el-main</code> 中 添加样式 <code>overflow-x: hidden;</code> 也能让它不再抖动。</p><h2 id="问题后续"><a href="#问题后续" class="headerlink" title="问题后续"></a>问题后续</h2><p>感觉上面的处理方式不优雅、不完美，便继续查找，后来在官方 gitter 聊天室中，找到了问题的根本原因以及他人的处理方法。</p><blockquote><p>el-table里有js自动计算整体宽度，75版本的bug会导致flex布局内有滚动条容器内的table在切换显隐时不断计算宽度，差距时17像素左右</p></blockquote><p>这是 chrome 浏览器的 bug，在浏览器 75 版本时会出现。强行解决也行，不过有比较大的副作用。原因是flex导致的，一般是el-main。el-main是flex布局，有 flex:1 属性。而 flex:1 属性在75上就会 bug，需要加 overflow-x：hiddren 进行处理。</p><p>但是会带来问题：<br>加了这个主内容区域就不会有水平滚动条了<br>对于左侧菜单不横向滚动，主内容区域横向的布局来说是灾难性的</p><p>@wxhccc 也提到不建议为了chrome 的 bug 毁了其他浏览器的体验。另外也试过在 el-main 里放 flex:1 的 div，用这个 div 加overflow，但这样会导致el-table宽度变小。用99%，缩小浏览器窗口宽度，也可以解决问题。</p><p>@beibeijerry 提到的解决方案是，.el-table 全局添加样式 <code>width:99.9% !important;</code> 进行处理。</p><pre><code>.el-table{  width:99.9% !important;}</code></pre><p>点击<a href="https://github.com/ElemeFE/element/issues/16167#issuecomment-506598890" target="_blank" rel="noopener">查看</a>官方 issue 讨论</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>最后我选择了 @beibeijerry 提到的方式进行处理。</p><p>项目全局为 .el-table 添加样式</p><pre><code>.el-table{  width:99.9% !important;}</code></pre><h3 id="相关讨论"><a href="#相关讨论" class="headerlink" title="相关讨论"></a>相关讨论</h3><p><img src="gitter-resolve-1.png" alt="gitter-image1"><br><img src="gitter-resolve-2.png" alt="gitter-image2"><br><img src="gitter-resolve-3.png" alt="gitter-image3"><br><img src="gitter-resolve-4.png" alt="gitter-image4"><br><img src="gitter-resolve-5.png" alt="gitter-image5"><br><img src="gitter-resolve-6.png" alt="gitter-image6"><br><img src="gitter-resolve-7.png" alt="gitter-image7"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最新的东西不一定是最稳定的。<br>遇到问题多考虑一下，也许会有更好的处理方式。<br>Gitter 聊天室可以查看过往讨论信息。<br>十分感谢 <a href="https://github.com/zarkin404" target="_blank" rel="noopener">@zarkin404</a> 的协助排查，<a href="https://github.com/wxhccc" target="_blank" rel="noopener">@wxhccc</a> 与 <a href="https://github.com/beibeijerry" target="_blank" rel="noopener">@beibeijerry</a> 的讨论以及解答。让我能相对较快，较为满意的处理好这个问题。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>acme.sh 申请 https 证书实践</title>
      <link href="/huan-jing/acme.sh-apply-for-https-certificate-practice/"/>
      <url>/huan-jing/acme.sh-apply-for-https-certificate-practice/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装-acme-sh"><a href="#1-安装-acme-sh" class="headerlink" title="1. 安装 acme.sh"></a>1. 安装 acme.sh</h2><p><code>curl  https://get.acme.sh | sh</code></p><p>安装完成后会生成 <code>~/.acme.sh/</code> 目录<br>并配置读取 acme.sh.env 中的命令 <code>. "~/.acme.sh/acme.sh.env"</code><br>我们可以使用 <code>. ~/.bashrc</code> 或 <code>source ~/.bashrc</code> 让配置立即生效，也可以重新打开一个终端登录服务器。<br>此时 acme.sh 命令就可以使用了</p><h2 id="2-生成证书"><a href="#2-生成证书" class="headerlink" title="2. 生成证书"></a>2. 生成证书</h2><p><code>acme.sh --issue -d yourdomain.com --nginx</code></p><p>更多生成方式参考 <a href="https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E#2-%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6" target="_blank" rel="noopener">生成证书</a></p><h2 id="3-copy-安装-证书"><a href="#3-copy-安装-证书" class="headerlink" title="3. copy/安装 证书"></a>3. copy/安装 证书</h2><pre><code>acme.sh  --installcert  -d  &lt;domain&gt;.com   \        --key-file   /etc/nginx/ssl/&lt;domain&gt;.key \        --fullchain-file /etc/nginx/ssl/&lt;domain&gt;.cer \        --reloadcmd  "service nginx force-reload"</code></pre><h2 id="4-创建定时任务，每日检查更新"><a href="#4-创建定时任务，每日检查更新" class="headerlink" title="4. 创建定时任务，每日检查更新"></a>4. 创建定时任务，每日检查更新</h2><p>Cron 示例</p><pre><code>0 0 * * * "/home/user/.acme.sh"/acme.sh --cron --home "/home/user/.acme.sh" &gt; /dev/null</code></pre><h2 id="5-更新-acme-sh"><a href="#5-更新-acme-sh" class="headerlink" title="5. 更新 acme.sh"></a>5. 更新 acme.sh</h2><p><code>acme.sh  --upgrade  --auto-upgrade</code></p><h2 id="6-http-跳转-https"><a href="#6-http-跳转-https" class="headerlink" title="6. http 跳转 https"></a>6. http 跳转 https</h2><p><img src="/images/http2https.png" alt="http redirect to https"></p><pre><code>    if ($scheme = http) {        return 301 https://$host$request_uri;    }</code></pre><h2 id="7-nginx-https-配置"><a href="#7-nginx-https-配置" class="headerlink" title="7. nginx https 配置"></a>7. nginx https 配置</h2><pre><code>    listen 443 ssl;    ssl_certificate /etc/nginx/ssl/&lt;domain&gt;.cer;    ssl_certificate_key /etc/nginx/ssl/&lt;domain&gt;.key;    ssl_session_timeout 5m;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;    ssl_prefer_server_ciphers on;    if ($scheme = http) {        return 301 https://$host$request_uri;    }</code></pre><h2 id="8-验证-ssl-配置安全性"><a href="#8-验证-ssl-配置安全性" class="headerlink" title="8. 验证 ssl 配置安全性"></a>8. 验证 ssl 配置安全性</h2><p><code>https://www.seoptimer.com/your-domain.com</code></p><p>如果看到 Serurity 是 A+ 就足够了，其他选项可以根据个人需要按照提示进行调整。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
            <tag> nginx </tag>
            
            <tag> 服务器 </tag>
            
            <tag> https </tag>
            
            <tag> acme.sh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 配置 cors 记录</title>
      <link href="/laravel/laravel-configuring-cors-record/"/>
      <url>/laravel/laravel-configuring-cors-record/</url>
      
        <content type="html"><![CDATA[<h2 id="Laravel-配置-cors-记录"><a href="#Laravel-配置-cors-记录" class="headerlink" title="Laravel 配置 cors 记录"></a>Laravel 配置 cors 记录</h2><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><p>Package 地址：<a href="https://github.com/barryvdh/laravel-cors" target="_blank" rel="noopener">https://github.com/barryvdh/laravel-cors</a></p><ul><li>安装</li></ul><p><code>composer require barryvdh/laravel-cors</code></p><ul><li>配置中间件</li></ul><pre><code>// \App\Http\Kernel $routeMiddleware 中添加protected $routeMiddleware = [    // ...    'cors' =&gt; \Barryvdh\Cors\HandleCors::class,];// $middlewareGroups =&gt; api =&gt; 中添加'api' =&gt; [    // ...    'cors',],</code></pre><ul><li>发布配置文件至 config 目录</li></ul><p><code>php artisan vendor:publish --provider="Barryvdh\Cors\ServiceProvider"</code></p><ul><li>禁用 API 的 CSRF 保护（可选）</li></ul><pre><code>// App\Http\Middleware\VerifyCsrfTokenprotected $except = [    'api/*'];</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
            <tag> 前端 </tag>
            
            <tag> CORS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deployer 使用过程</title>
      <link href="/huan-jing/deployer-usage-process/"/>
      <url>/huan-jing/deployer-usage-process/</url>
      
        <content type="html"><![CDATA[<h1 id="Deployer-使用过程"><a href="#Deployer-使用过程" class="headerlink" title="Deployer 使用过程"></a>Deployer 使用过程</h1><p>步骤详细解释可见参考 <a href="https://laravel-china.org/articles/13242/another-introduction-to-the-use-of-deployer#reply62370" target="_blank" rel="noopener">又一篇 Deployer 的使用攻略</a></p><h2 id="全局安装-deployer"><a href="#全局安装-deployer" class="headerlink" title="全局安装 deployer"></a>全局安装 deployer</h2><p><strong>此部分在本地操作</strong></p><p><code>composer global require deployer/deployer -vvv</code></p><p>查看是否安装成功</p><p><code>dep --version</code></p><p>如果提示 <code>dep</code> 命令不存在的话，可能需要将 composer 的 bin 目录添加到 PATH 环境变量里面</p><p>将 bin 路径添加到 PATH 中</p><pre><code># 查看 bin 目录位置composer global config bin-dir --absolute# 修改用户配置vim ~/.bash_profile# 将 composer bin 目录加到其中即可# export PATH=/usr/local/bin:/Users/overtrue/.composer/vendor/bin:$PATH# 然后保存退出source ~/.basr_profile</code></pre><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><p><strong>此部分在目标服务器上操作</strong></p><p>出于安全考虑，添加部署操作的用户</p><p>通过 <code>id</code> 查看用户 <code>deployer</code> 是否已存在</p><p><code>id deployer</code></p><p>如果 提示 <code>id: ‘deployer’: no such user</code>, 执行以下命令添加用户</p><p><code>sudo adduser deployer</code></p><p>设置 <code>deployer</code> 用户的登录密码</p><p><code>sudo passwd deployer</code></p><p>将用户 deployer 添加至 nginx 默认的用户组。见 nginx.conf 中的 user</p><pre><code>sudo cat /etc/nginx/nginx.conf | grep user# user www-data;# 添加用户到组 sudo usermod -aG 用户组 用户sudo usermod -aG www-data deployer</code></pre><p>将 <code>deployer</code> 用户权限分别设置为创建文件 644 与目录 755，这样一来，deployer 用户可以读写，但是组与其它用户只能读：</p><pre><code>su deployer # 切换到 deployer 用户echo "umask 022" &gt;&gt; ~/.bashrcexit # 退出</code></pre><p>将 <code>depoloyer</code> 用户加到 sudoers 中：</p><pre><code>vim /etc/sudoers# 在最后加入deployer ALL=(ALL) NOPASSWD: ALL# 保存并退出</code></pre><p>对 web 根目录授权。假设我们的 web 服务 项目名叫 <code>html</code>，项目的根目录在 <code>/var/www/</code> 下，那么需要将这个目录的用户设置为 <code>deployer</code> ，组设置为 nginx 用户 <code>www-data</code>(之前通过 cat 命令查看到的结果):</p><p><code>sudo chown deployer:www-data /var/www/html # 最后这里不要加斜线哦(暂时不知道不要加的原因)</code></p><p>为了让 <code>deployer</code> 用户在 <code>/var/www/html</code> 下创建的文件与目录集成根目录的权限设定（用户：deployer, 组：www-data），我们还需要一步操作：</p><p><code>sudo chmod g+s /var/www/html</code></p><h2 id="项目-git-仓库允许服务器访问"><a href="#项目-git-仓库允许服务器访问" class="headerlink" title="项目 git 仓库允许服务器访问"></a>项目 git 仓库允许服务器访问</h2><p><strong>此部分在目标服务器上操作</strong></p><p>我们 deployer 的运行机制是从 git 或者其它你指定的代码库 clone 代码到目标服务器，所以如果你的代码不是公开的仓库，我们通常需要添加 SSH 公钥才可以从代码库 clone 代码，所以接着来创建公钥：</p><p>先切换当前登录用户到 deployer：</p><p><code>su - deployer</code></p><p>创建 SSH 密钥：</p><pre><code>ssh-keygen -t rsa -b 4096 -C "deployer"# 这里的 -C 是指定备注# 一路回车下去即可</code></pre><p>然后我们将生成的公钥拷贝出来：</p><pre><code>cat ~/.ssh/id_rsa.pub # 显示公钥</code></pre><p>请完整的复制 cat 出来的结果，然后去你的代码库添加 SSH 公钥。</p><p>OK, 现在你的服务器就可以从代码库 clone 代码了，你可以在服务器上 git clone 一下你的代码库测试，如果不成功，请检查你的公钥是否正确完全的复制与粘贴正确，不正确的话再次重复复制粘贴即可。</p><h2 id="服务器免密码登录-deployer"><a href="#服务器免密码登录-deployer" class="headerlink" title="服务器免密码登录 deployer"></a>服务器免密码登录 deployer</h2><p><strong>此部分在本地（或者开发机）操作</strong></p><p>在本地（或者开发机）执行部署任务时我们不想每次输入密码，所以我们需要将 deployer 用户设置 SSH 免密码登录：</p><p>在本机生成 deployer 专用密钥，然后拷贝公钥：</p><p><code>ssh-keygen -t rsa -b 4096 -f  ~/.ssh/deployerkey</code></p><p>然后将公钥保存到目标服务器（注意，这一步还是在本机操作）：</p><pre><code>ssh-copy-id -i  ~/.ssh/deployerkey.pub deployer@123.45.67.89 # 请填写服务器 IP# 应该会让你输入 deployer 在服务器上的登录密码，输入后回车即可</code></pre><p>然后你应该就可以直接以 deployer 用户免密码登录到服务器了，测试方式：</p><pre><code>ssh deployer@123.45.67.89 -i ~/.ssh/deployerkey# 应该就能直接进到服务器上了，然后 exit 退出</code></pre><h2 id="Deployer-的使用"><a href="#Deployer-的使用" class="headerlink" title="Deployer 的使用"></a>Deployer 的使用</h2><p><strong>这些都在本地操作哦</strong></p><p>假设我们的项目在本地 /www/demo-project 下，那么我们切换到该目录：</p><p><code>cd /www/demo-project</code></p><p>然后执行 Deployer 的初始化命令：</p><p><code>dep init</code></p><p>它会让你选择项目类型，比如 Laravel，symfony 等，如果你都不是，选择 common 类型即可。</p><p>这一步操作将会在当前目录生成一个 deploy.php 文件，这个文件就是部署清单，也就是告诉 Deployer 怎样去部署你的项目，关于这部分我们不需要过多的介绍，大家去参考 Deployer 官网的详细说明操作即可。</p><p>需要关心的几个配置是：</p><pre><code>// 指定你的代码所在的服务器 SSH 地址，请不要使用 https 方式哦。set('repository', 'git@mygitserver.com:overtrue/demo-project.git');// 这里填写目标服务器的 IP 或者域名host('your_server_ip')    -&gt;user('deployer') // 这里填写 deployer      // 并指定公钥的位置    -&gt;identityFile('~/.ssh/deployerkey')    // 指定项目部署到服务器上的哪个目录    -&gt;set('deploy_path', '/var/www/demo-app');</code></pre><p>执行部署<br><code>dep deploy -vvv</code></p><h2 id="添加任务"><a href="#添加任务" class="headerlink" title="添加任务"></a>添加任务</h2><pre class=" language-deployer.php"><code class="language-deployer.php">set('bin/npm', function () {    return run('which npm');});desc('Install npm packages');task('npm:install', function () {    if (has('previous_release')) {        if (test('[ -d {{previous_release}}/node_modules ]')) {            run('cp -R {{previous_release}}/node_modules {{release_path}}');        }    }    run("cd {{release_path}} && {{bin/npm}} install");});after('deploy:symlink', 'npm:install');desc('npm build assets');task('npm:run:prod', function () {    run('cd {{release_path}} && sudo npm run prod');});after('npm:install', 'npm:run:prod');desc('Restart PHP-FPM service');task('php-fpm:restart', function () {    run('sudo systemctl restart php-fpm.service');});after('npm:run:prod', 'php-fpm:restart');</code></pre><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><pre><code>  [Symfony\Component\Process\Exception\RuntimeException]  TTY mode is not supported on Windows platform.</code></pre><p>TTY 模式 不支持在 windows 使用，在 deployer.php 中修改配置</p><pre><code>set('git_tty', true);toset('git_tty', false);</code></pre><pre><code>In Client.php line 99:  [Deployer\Exception\RuntimeException (-1)]  The command "cd /var/www/omics/releases/1 &amp;&amp; (getfacl -p storage/framework/views | grep "^user:nginx:.*w" | wc -l)" failed.  Exit Code: -1 (Unknown error)  Host Name: omics.cblink.net  ================  mm_send_fd: sendmsg(2): Connection reset by peer  mux_client_request_session: send fds failed</code></pre><pre><code># 参考 issue https://github.com/deployphp/deployer/issues/1270#issuecomment-340270151 评论，windows 需要禁止 ssh 多路复用set('ssh_multiplexing', true);toset('ssh_multiplexing', false);</code></pre><pre><code>In Client.php line 99:  [Deployer\Exception\RuntimeException (1)]  The command "/usr/bin/php /var/www/demo-app/releases/1/artisan migrate --force" failed.  Exit Code: 1 (General error)  Host Name: omics.cblink.net  ================  In Connection.php line 664:    SQLSTATE[HY000] [1044] Access denied for user ''@'localhost' to database 'f    orge' (SQL: select * from information_schema.tables where table_schema = fo    rge and table_name = migrations)  In Connector.php line 68:    SQLSTATE[HY000] [1044] Access denied for user ''@'localhost' to database 'f    orge'</code></pre><p>部署报错。因为没有 .env 配置文件，无法执行迁移。</p><pre><code>以 deployer 用户登录服务器ssh deployer@123.45.67.89# 到服务器的项目部署目录中删除默认生成的 .envrm /var/www/demo-app/shared/.env# copy 一份可用的 .env 配置至 shared/ 中cp /var/www/demo-app/{release/.env.example,shared/.env}# 如果不是以 deployer 用户执行的，请注意修改文件权限sudo chown -R deployer:www-data /var/www/demp-app</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信环境配置过程</title>
      <link href="/huan-jing/wechat-environment-configuration-process/"/>
      <url>/huan-jing/wechat-environment-configuration-process/</url>
      
        <content type="html"><![CDATA[<h2 id="微信公众平台沙盒登录"><a href="#微信公众平台沙盒登录" class="headerlink" title="微信公众平台沙盒登录"></a>微信公众平台沙盒登录</h2><p>登录地址: <a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener">http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a></p><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><ul><li>启动内网穿透工具</li><li>扫码登录后获取 appID、appsecret 填入项目中</li><li>修改微信「网页服务 - 网页帐号 - 网页授权获取用户基本信息」回调地址为内网穿透工具生成的地址（注：不需要协议前缀，否则微信授权会提示「redirect_uri 参数错误」，每次重新运行内网工具的时候，需要重新执行本步骤）</li><li>到 微信环境（微信开发者工具，模拟器，真机）中进行访问，确认配置结果</li><li>修改「JS接口安全域名」为内网穿透地址，如果不需要用户授权的，修改为本地开发使用的域名即可（注：不需要协议前缀，否则 jssdk 会返回 「config:fail,Error: invalid url domain」）</li><li><a href="https://www.getpostman.com/collections/6c7f7cb14fdb22933e6e" target="_blank" rel="noopener">postman 模拟获取用户相关信息接口</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装 Sentry 服务</title>
      <link href="/huan-jing/install-sentry-services/"/>
      <url>/huan-jing/install-sentry-services/</url>
      
        <content type="html"><![CDATA[<h1 id="安装-Sentry-服务"><a href="#安装-Sentry-服务" class="headerlink" title="安装 Sentry 服务"></a>安装 Sentry 服务</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><a href="https://docs.sentry.io/server/installation/docker/" target="_blank" rel="noopener">官方文档</a></li></ul><p>依赖</p><blockquote><p>Docker version 1.10+</p></blockquote><p>克隆</p><p><code>git clone https://github.com/getsentry/onpremise</code></p><p>生成镜像</p><pre><code>cd onpremisemkdir -p data/{sentry,postgres}docker-compose builddocker-compose run --rm web config generate-secret-key # 生成 key，将它添加到 docker-compose.yml 中的 SENTRY_SECRET_KEYdocker-compose run --rm web upgradedocker-compose up -d</code></pre><p>访问 <code>localhost:9000</code></p><p><strong>如果打开后提示这个。确认下是否存在以下 issue 所描述的问题</strong></p><p><a href="https://github.com/getsentry/sentry/issues/8862#issuecomment-400807159" target="_blank" rel="noopener">Oops! Something went wrong.</a></p><pre><code>docker-compose run --rm web shellfrom sentry.models import Projectfrom sentry.receivers.core import create_default_projectscreate_default_projects([Project])</code></pre><pre><code>postgres_1   | ERROR:  function sentry_increment_project_counter(integer, integer) does not exist at character 25postgres_1   | HINT:  No function matches the given name and argument types. You might need to add explicit type casts.postgres_1   | STATEMENT:postgres_1   |                  select sentry_increment_project_counter(1, 1)postgres_1   |# 参考 https://github.com/getsentry/sentry/issues/9270#issuecomment-409577582docker exec -it onpremise_postgres_1 bashpsql -h 127.0.0.1 -d postgres -U postgrescreate or replace function sentry_increment_project_counter( project bigint, delta int) returns int as $$ declare new_val int; begin loop update sentry_projectcounter set value = value + delta where project_id = project returning value into new_val; if found then return new_val; end if; begin insert into sentry_projectcounter(project_id, value) values (project, delta) returning value into new_val; return new_val; exception when unique_violation then end; end loop; end $$ language plpgsql;</code></pre><p>升级</p><pre><code>docker-compose builddocker-compose run --rm web upgradedocker-compose up -d</code></pre><h2 id="ecs-放行端口"><a href="#ecs-放行端口" class="headerlink" title="ecs 放行端口"></a>ecs 放行端口</h2><p><a href="ecs.console.aliyun.com">ecs 控制台</a> -&gt; 安全组 -&gt; 配置规则（选择实例）</p><pre><code>端口号/端口号 # 端口范围0.0.0.0/0 # 授权对象</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装 docker 环境</title>
      <link href="/huan-jing/installing-docker-environment/"/>
      <url>/huan-jing/installing-docker-environment/</url>
      
        <content type="html"><![CDATA[<h1 id="安装-docker-环境"><a href="#安装-docker-环境" class="headerlink" title="安装 docker 环境"></a>安装 docker 环境</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h3><pre><code>sudo curl -fsSL https://get.docker.com | shsudo curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun`</code></pre><h3 id="apt-安装"><a href="#apt-安装" class="headerlink" title="apt 安装"></a>apt 安装</h3><ul><li><p><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce" target="_blank" rel="noopener">官方文档</a></p></li><li><p><a href="https://developer.aliyun.com/article/110806" target="_blank" rel="noopener">阿里云文档</a></p></li></ul><p>安装包以允许仓库使用 https</p><pre><code>sudo apt-get install -y \  apt-transport-https \  ca-certificates \  curl \  software-properties-common</code></pre><p>添加官方 GPG key</p><pre><code>sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code></pre><p>设置稳定版的仓库源</p><pre><code>sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) \stable"</code></pre><p>安装 docker-ce</p><ol><li>更新仓库源</li></ol><pre><code>sudo apt-get update</code></pre><ol start="2"><li>安装最新版的 docker-ce</li></ol><pre><code>sudo apt-get install docker-ce</code></pre><ol start="3"><li><p>安装指定版本的 docker-ce</p><ul><li>查看仓库中可用的版本</li></ul></li></ol><pre><code>apt-cache madison docker-cedocker-ce | 18.03.0~ce-0~ubuntu | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages</code></pre><ul><li>通过指定版本字符串安装指定版本</li></ul><pre><code>sudo apt-get install docker-ce=&lt;VERSION&gt;</code></pre><ol start="4"><li>通过运行 hello-world 镜像验证 docker-ce 已被正确安装</li></ol><pre><code># sudo docker run hello-worlddocker version</code></pre><ol start="5"><li>安装 docker-compose</li></ol><p><a href="https://doc.yonyoucloud.com/doc/docker_practice/compose/install.html" target="_blank" rel="noopener">参考</a></p><p>二进制包</p><p>发布的二进制包可以在 <a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">https://github.com/docker/compose/releases</a> 找到。</p><p>下载后直接放到执行路径即可。</p><p>例如，在常见的 Linux 平台上。</p><pre><code>curl -L https://github.com/docker/compose/releases/download/1.22.0-rc2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose</code></pre><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><ul><li>阿里云</li></ul><blockquote><p><a href="https://cr.console.aliyun.com/" target="_blank" rel="noopener">容器进行服务控制台</a></p><p><a href="https://cr.console.aliyun.com/undefined/instances/mirrors" target="_blank" rel="noopener">镜像加速器</a></p></blockquote><pre><code>sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{  "registry-mirrors": ["你的镜像加速地址"],  "exec-opts": ["native.cgroupdriver=systemd"],  "log-driver": "json-file",  "log-opts": {"max-size": "100m", "max-file": "3"}}EOFsudo systemctl daemon-reloadsudo systemctl restart docker</code></pre><ul><li>daocloud</li></ul><blockquote><p><a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">加速器</a></p></blockquote><h2 id="清理日志"><a href="#清理日志" class="headerlink" title="清理日志"></a>清理日志</h2><pre class=" language-clean_docker_log.sh"><code class="language-clean_docker_log.sh">#!/bin/shecho "======== start clean docker containers logs ========"logs=$(find /var/lib/docker/containers/ -name *-json.log)for log in $logs        do                echo "clean logs : $log"                cat /dev/null > $log        doneecho "======== end clean docker containers logs ========"</code></pre><h2 id="添加用户组"><a href="#添加用户组" class="headerlink" title="添加用户组"></a>添加用户组</h2><p><code>sudo usermod -aG docker $(whoami)</code></p><h2 id="添加清除镜像的定时任务至-root-crontab"><a href="#添加清除镜像的定时任务至-root-crontab" class="headerlink" title="添加清除镜像的定时任务至 root crontab"></a>添加清除镜像的定时任务至 root crontab</h2><p><code>1 0 * * * docker image prune -a --filter "until=4h"</code></p><h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><p>请查看云服务商的相关文档进行操作</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel PHPUnit 配置及美化</title>
      <link href="/kai-fa/laravel-phpunit-configuration-and-beautification/"/>
      <url>/kai-fa/laravel-phpunit-configuration-and-beautification/</url>
      
        <content type="html"><![CDATA[<h2 id="美化-phpunit-输出"><a href="#美化-phpunit-输出" class="headerlink" title="美化 phpunit 输出"></a>美化 phpunit 输出</h2><p>前往 <a href="https://github.com/mikeerickson/phpunit-pretty-result-printer" target="_blank" rel="noopener">GitHub</a></p><ol><li><p>安装<br><code>composer require --dev codedungeon/phpunit-result-printer</code></p></li><li><p>修改 phpunit.xml 配置</p><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;phpunit printerClass="Codedungeon\PHPUnitPrettyResultPrinter\Printer"&gt;// ....&lt;/phpunit&gt;</code></pre></li></ol><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>编辑 phpunit.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phpunit</span> <span class="token attr-name">backupGlobals</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>         <span class="token attr-name">backupStaticAttributes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>         <span class="token attr-name">bootstrap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vendor/autoload.php<span class="token punctuation">"</span></span>         <span class="token attr-name">colors</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>         <span class="token attr-name">convertErrorsToExceptions</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>         <span class="token attr-name">convertNoticesToExceptions</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>         <span class="token attr-name">convertWarningsToExceptions</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>         <span class="token attr-name">processIsolation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>         <span class="token attr-name">stopOnFailure</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>         <span class="token attr-name">verbose</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>         <span class="token attr-name">printerClass</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Codedungeon\PHPUnitPrettyResultPrinter\Printer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testsuites</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testsuite</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Feature<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Test.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>./tests/Feature<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testsuite</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testsuite</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Unit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Test.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>./tests/Unit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>./tests/Unit/Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testsuite</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testsuites</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>whitelist</span> <span class="token attr-name">processUncoveredFilesFromWhitelist</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>./app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>whitelist</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>php</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>env</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>APP_ENV<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testing<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>env</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DB_CONNECTION<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlite<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>env</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DB_DATABASE<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>:memory:<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>env</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CACHE_DRIVER<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>env</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SESSION_DRIVER<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>env</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>QUEUE_DRIVER<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sync<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>env</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MAIL_DRIVER<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>php</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phpunit</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 添加用户 &amp; 用户组</title>
      <link href="/fu-wu-qi/linux-add-user-user-group/"/>
      <url>/fu-wu-qi/linux-add-user-user-group/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-添加用户-amp-用户组"><a href="#Linux-添加用户-amp-用户组" class="headerlink" title="Linux 添加用户 &amp; 用户组"></a>Linux 添加用户 &amp; 用户组</h1><h2 id="服务器添加用户"><a href="#服务器添加用户" class="headerlink" title="服务器添加用户"></a>服务器添加用户</h2><p><code>sudo adduser username</code></p><h2 id="为用户添加组"><a href="#为用户添加组" class="headerlink" title="为用户添加组"></a>为用户添加组</h2><p><code>sudo usermod -aG 用户组 用户</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 项目的克隆以及初始化操作</title>
      <link href="/huan-jing/laravel-clone-to-run/"/>
      <url>/huan-jing/laravel-clone-to-run/</url>
      
        <content type="html"><![CDATA[<h2 id="项目克隆"><a href="#项目克隆" class="headerlink" title="项目克隆"></a>项目克隆</h2><p><code>git clone git@git.rooyun.com:h5book/h5book.git</code></p><p><img src="item_clone.png" alt="项目克隆"></p><h2 id="项目切出分支并查看所有分支"><a href="#项目切出分支并查看所有分支" class="headerlink" title="项目切出分支并查看所有分支"></a>项目切出分支并查看所有分支</h2><pre><code># 新建 mouyong 分支，并切换到 mouyong 分支git checkout -b mouyong# 查看所有分支，包括本地和远程的分支，* 星 表示当前所在的分支，红色的表示远程分支git branch -a</code></pre><p><img src="item_git_checkout.png" alt="项目切出分支并查看所有分支"></p><h2 id="生成本地-env-文件，并配置应用密钥"><a href="#生成本地-env-文件，并配置应用密钥" class="headerlink" title="生成本地 env 文件，并配置应用密钥"></a>生成本地 env 文件，并配置应用密钥</h2><pre><code># 在项目根目录执行# 生成文件名为 .env 本地环境的配置文件cp .env.example .env# 生成应用程序密钥php artisan key:generate</code></pre><p><img src="key_generate.png" alt="生成本地 env 文件，并生成应用程序密钥"></p><p>可以 <code>vim .env</code> 查看密钥是否成功配置</p><p><img src="env.png" alt="本地配置文件 env"></p><h4 id="应用程序密钥说明"><a href="#应用程序密钥说明" class="headerlink" title="应用程序密钥说明"></a><a href="https://laravel-china.org/docs/5.3/installation#应用程序密钥" target="_blank" rel="noopener">应用程序密钥说明</a></h4><h2 id="设置-laravel-文件目录权限"><a href="#设置-laravel-文件目录权限" class="headerlink" title="设置 laravel 文件目录权限"></a>设置 laravel 文件目录权限</h2><pre><code>chmod 777 -R storage/ bootstrap/cache/</code></pre><p><img src="change_jurisdiction.png" alt="设置 laravel 文件目录权限"></p><h4 id="目录权限说明"><a href="#目录权限说明" class="headerlink" title="目录权限说明"></a><a href="https://laravel-china.org/docs/5.3/installation#目录权限" target="_blank" rel="noopener">目录权限说明</a></h4><h2 id="安装-composer-组件"><a href="#安装-composer-组件" class="headerlink" title="安装 composer 组件"></a>安装 composer 组件</h2><p><img src="composer-install.png" alt="安装 composer 组件"></p><p>组件安装完成后，就可以看到 vendor 文件夹了。</p><p><img src="composer-install-ok.png" alt="安装 composer 组件完成"></p><h2 id="Apache-添加重写模块"><a href="#Apache-添加重写模块" class="headerlink" title="Apache 添加重写模块"></a>Apache 添加重写模块</h2><pre><code>ln -s /etc/apache2/mods-avaliable/rewrite.load /etc/apache2/mods-enabled/# 查看是否添加成功ls /etc/apache2/mods-enabled/</code></pre><p><img src="rewrite_mod_add.png" alt="apache 添加重写模块"></p><h2 id="目录添加重写功能"><a href="#目录添加重写功能" class="headerlink" title="目录添加重写功能"></a>目录添加重写功能</h2><pre><code># 修改或新增 apache 主配置文件 apache.conf 中的如下内容</code></pre><p><img src="dir_add_rewrite.png" alt="目录添加重写支持"></p><h2 id="apache-添加-vhost-并配置-软链接"><a href="#apache-添加-vhost-并配置-软链接" class="headerlink" title="apache 添加 vhost 并配置 软链接"></a>apache 添加 vhost 并配置 软链接</h2><pre><code>cd /etc/apache2/site-enable/cp ../site-avaliable/000-default.conf ../site-avaliable/h5book.confln -s /etc/apache2/site-avaliable/h5book.conf /etc/apache2/site-enable/</code></pre><p><img src="apache_vhost.png" alt="apache 添加 vhost 并配置 软链接"></p><h2 id="虚拟主机的配置"><a href="#虚拟主机的配置" class="headerlink" title="虚拟主机的配置"></a>虚拟主机的配置</h2><pre><code>将 vhost 文件中的部分内容做类似如下的修改</code></pre><p><img src="vhost_setting.png" alt="apache vhost 配置"></p><h2 id="重启-apache，产生可忽略警告"><a href="#重启-apache，产生可忽略警告" class="headerlink" title="重启 apache，产生可忽略警告"></a>重启 apache，产生可忽略警告</h2><pre><code>apachectl restart</code></pre><p><img src="apache_server_notice.png" alt="apache ServerName 警告"></p><h2 id="可忽略警告，的处理办法，下次不再警告"><a href="#可忽略警告，的处理办法，下次不再警告" class="headerlink" title="可忽略警告，的处理办法，下次不再警告"></a>可忽略警告，的处理办法，下次不再警告</h2><pre><code>#在 apache 主配置文件中 apache.conf 的最后一行添加如下内容即可解决。修改配置文件后重启 apache 服务器。apachectl restart</code></pre><p><img src="apache_notice.png" alt="apache 警告解决"></p><h2 id="虚拟机的-hosts-文件修改，为项目添加一个域名"><a href="#虚拟机的-hosts-文件修改，为项目添加一个域名" class="headerlink" title="虚拟机的 hosts 文件修改，为项目添加一个域名"></a>虚拟机的 hosts 文件修改，为项目添加一个域名</h2><p><img src="hosts.png" alt="系统 hosts 配置"></p><h2 id="宿主主机-hosts-文件修改，使之能够解析到虚拟机"><a href="#宿主主机-hosts-文件修改，使之能够解析到虚拟机" class="headerlink" title="宿主主机 hosts 文件修改，使之能够解析到虚拟机"></a>宿主主机 hosts 文件修改，使之能够解析到虚拟机</h2><p><img src="master_host.png" alt="宿主主机 hosts 文件"></p><h2 id="打开-phpstorm"><a href="#打开-phpstorm" class="headerlink" title="打开 phpstorm"></a>打开 phpstorm</h2><p><img src="phpstorm_welcome.png" alt="phpstorm welcome"></p><h2 id="选择-web-server-is-on-remote-host-files-are-accessible-via-FTP-SFTP-FTPS"><a href="#选择-web-server-is-on-remote-host-files-are-accessible-via-FTP-SFTP-FTPS" class="headerlink" title="选择 web server is on remote host, files are accessible via FTP/SFTP/FTPS"></a>选择 web server is on remote host, files are accessible via FTP/SFTP/FTPS</h2><p><img src="phpstorm_from_exists.png" alt="phpstorm 项目来自 exists"></p><h2 id="选择添加一个远程服务器"><a href="#选择添加一个远程服务器" class="headerlink" title="选择添加一个远程服务器"></a>选择添加一个远程服务器</h2><p><img src="phpstorm_remote_list.png" alt="phpstorm 远程主机列表"></p><h2 id="phpstorm-远程主机设置"><a href="#phpstorm-远程主机设置" class="headerlink" title="phpstorm 远程主机设置"></a>phpstorm 远程主机设置</h2><p><img src="phpstorm_remote_setting.png" alt="phpstorm 远程主机设置"></p><h2 id="点击-Autodetect-旁边的-3个点，接受服务器发送过来的哈希字符串"><a href="#点击-Autodetect-旁边的-3个点，接受服务器发送过来的哈希字符串" class="headerlink" title="点击 Autodetect 旁边的 3个点，接受服务器发送过来的哈希字符串"></a>点击 Autodetect 旁边的 3个点，接受服务器发送过来的哈希字符串</h2><p><img src="phpstorm_remote_test_confirm.png" alt="phpstorm 接受远程主机发送过来的哈希字符串"></p><h2 id="选择远程文件"><a href="#选择远程文件" class="headerlink" title="选择远程文件"></a>选择远程文件</h2><p><img src="phpstorm_remote_test_select.png" alt="phpstorm 远程主机文件选择"></p><h2 id="点击-Test-SFTP-connection…-进行连接测试，能看到测试通过"><a href="#点击-Test-SFTP-connection…-进行连接测试，能看到测试通过" class="headerlink" title="点击 Test SFTP connection… 进行连接测试，能看到测试通过"></a>点击 Test SFTP connection… 进行连接测试，能看到测试通过</h2><blockquote><p>我使用的密钥的方式，读者可以选择密码的方式，这样需要注意密码旁边的复选框，保存密码一定要勾上</p></blockquote><p><img src="phpstorm_remote_test.png" alt="phpstorm 远程主机测试成功"></p><h2 id="添加-web-path"><a href="#添加-web-path" class="headerlink" title="添加 web path"></a>添加 web path</h2><p><img src="phpstorm_remote_webpath.png" alt="phpstorm 远程主机 web path"></p><h2 id="设置项目根路径"><a href="#设置项目根路径" class="headerlink" title="设置项目根路径"></a>设置项目根路径</h2><p><img src="phpstorm_remote_set_root.png" alt="phpstorm 设置项目根路径"></p><pre><code>Project Root # 项目根目录Excluded from Download # 选中被标记为此项的不要下载Resource Root # 资源根目录Excluded from Indexing # 选中被标记为此项的不要索引</code></pre><h2 id="配置完成所有的选项后，开始从-虚拟机-下载项目到宿主机"><a href="#配置完成所有的选项后，开始从-虚拟机-下载项目到宿主机" class="headerlink" title="配置完成所有的选项后，开始从 虚拟机 下载项目到宿主机"></a>配置完成所有的选项后，开始从 虚拟机 下载项目到宿主机</h2><p><img src="phpstorm_remote_download.png" alt="phpstorm 从虚拟机中下载文件"></p><h2 id="点击-phpstorm-菜单栏中的-Tools-下的-Deployment-选项中的-Options。"><a href="#点击-phpstorm-菜单栏中的-Tools-下的-Deployment-选项中的-Options。" class="headerlink" title="点击 phpstorm 菜单栏中的 Tools 下的 Deployment 选项中的 Options。"></a>点击 phpstorm 菜单栏中的 Tools 下的 Deployment 选项中的 Options。</h2><pre><code>将 Upload changed files automatically to the default server 从 Never 选项改为按 Ctrl + S 上传，这样，你做了任何修改，只要按了保存的快捷键，文件就会上传到虚拟机了。</code></pre><p><img src="phpstorm_deployment.png" alt="phpstorm 部署配置"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
            <tag> PHPStorm </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 安装</title>
      <link href="/huan-jing/install-laravel/"/>
      <url>/huan-jing/install-laravel/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-composer"><a href="#安装-composer" class="headerlink" title="安装 composer"></a>安装 composer</h2><pre><code># 下载curl -sS https://getcomposer.org/installer | php# 移动到全局变量mv composer.phar /usr/local/bin/composer# 修改国内源composer config -g repo.packagist composer https://packagist.phpcomposer.com</code></pre><h2 id="安装-laravel"><a href="#安装-laravel" class="headerlink" title="安装 laravel"></a>安装 laravel</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code># 全局安装composer global require "laravel/installer"# 创建项目 *(需要将 laravel 命令所在的目录 `~/.config/composer/vendor/bin` 加入 PATH 环境中)*laravel new blog# 局部安装composer create-project laravel/laravel --prefer-dist blog# 安装制定版本composer create-project laravel/laravel your-project-name --prefer-dist '5.1.×'</code></pre><h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><pre><code>sudo chmod 777 ./bootstrap/cache -Rsudo chmod 777 ./storage/ -R</code></pre><h2 id="开启重定向"><a href="#开启重定向" class="headerlink" title="开启重定向"></a>开启重定向</h2><h3 id="Apache-服务器"><a href="#Apache-服务器" class="headerlink" title="Apache 服务器"></a>Apache 服务器</h3><pre><code>1. 加载重定向模块ln -s /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/2. 修改配置文件vim /etc/apache2/apache2.conf找到:Directory /var/www/把 AllowOverride Node改为:AllowOverride all3. 保存退出,重启apache::wqsudo /etc/init.d/apache2 restart</code></pre><h3 id="nginx服务器"><a href="#nginx服务器" class="headerlink" title="nginx服务器"></a>nginx服务器</h3><pre><code>在 /etc/nginx/nginx.conf 中找到try_files $uri $uri/ =404;修改为try_files $uri $uri/ /index.php?$query_string;</code></pre><p>如图<br><img src="nginx_rewrite.png" alt="nginx 重写"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu web 环境的安装</title>
      <link href="/huan-jing/ubuntu-web/"/>
      <url>/huan-jing/ubuntu-web/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-web-服务器"><a href="#安装-web-服务器" class="headerlink" title="安装 web 服务器"></a>安装 web 服务器</h2><h3 id="二者选一即可"><a href="#二者选一即可" class="headerlink" title="二者选一即可"></a><em>二者选一即可</em></h3><h4 id="apache2"><a href="#apache2" class="headerlink" title="apache2"></a>apache2</h4><pre><code>sudo apt install apache2</code></pre><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><pre><code>sudo apt install nginx</code></pre><h2 id="安装数据库-mariadb"><a href="#安装数据库-mariadb" class="headerlink" title="安装数据库 mariadb"></a>安装数据库 mariadb</h2><pre><code>sudo apt install mariadb-server</code></pre><h2 id="安装-php-以及相关扩展"><a href="#安装-php-以及相关扩展" class="headerlink" title="安装 php 以及相关扩展"></a>安装 php 以及相关扩展</h2><h3 id="这是-php7-1-的-ppa-源，如有需要，请自行添加"><a href="#这是-php7-1-的-ppa-源，如有需要，请自行添加" class="headerlink" title="这是 php7.1 的 ppa 源，如有需要，请自行添加"></a>这是 php7.1 的 ppa 源，如有需要，请自行添加</h3><h4 id="sudo-add-apt-repository-ppa-ondrej-php"><a href="#sudo-add-apt-repository-ppa-ondrej-php" class="headerlink" title="sudo add-apt-repository ppa:ondrej/php"></a><code>sudo add-apt-repository ppa:ondrej/php</code></h4><pre><code>sudo apt install php php-zip  php-xml php-mbstring php-redis php-mysql php-gd</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下的wps安装及错误解决办法</title>
      <link href="/huan-jing/wps-fonts-error/"/>
      <url>/huan-jing/wps-fonts-error/</url>
      
        <content type="html"><![CDATA[<h2 id="wps的错误及解决办法"><a href="#wps的错误及解决办法" class="headerlink" title="wps的错误及解决办法"></a>wps的错误及解决办法</h2><p>当你刚刚在 ubuntu 上安装完成 wps 后，如果你启动它，会发现一个警告信息，这个信息导致的原因官网有给出。这里提供一个解决方案。</p><p>在 github 上面有人共享了 wps 需要的字体库，所以只需如下操作便可以解决这个问题。</p><pre><code>git clone https://github.com/iamdh4/ttf-wps-fonts.gitsudo mv ttf-wps-fonts/ /usr/share/fonts/wps-fontssudo chmod 644 /usr/share/fonts/wps-fonts/*sudo fc-cache -vfs</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的 Ubuntu 系统安装完成后要做的事</title>
      <link href="/huan-jing/ubuntu-setting/"/>
      <url>/huan-jing/ubuntu-setting/</url>
      
        <content type="html"><![CDATA[<h2 id="添加-ss-qt5-的ppa源"><a href="#添加-ss-qt5-的ppa源" class="headerlink" title="添加 ss-qt5 的ppa源"></a>添加 ss-qt5 的ppa源</h2><pre><code>sudo add-apt-repository ppa:hzwhuang/ss-qt5</code></pre><h2 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h2><pre><code>sudo apt update</code></pre><h2 id="更新软件"><a href="#更新软件" class="headerlink" title="更新软件"></a>更新软件</h2><pre><code>sudo apt upgrade</code></pre><h2 id="安装-shadowsocks-qt5"><a href="#安装-shadowsocks-qt5" class="headerlink" title="安装 shadowsocks-qt5"></a>安装 shadowsocks-qt5</h2><pre><code>sudo apt install shadowsocks-qt5系统的网络代理修改</code></pre><h2 id="安装中文语言包"><a href="#安装中文语言包" class="headerlink" title="安装中文语言包"></a>安装中文语言包</h2><pre><code>sudo apt install -y language-pack-hans-base# 设定语言编码为 UTF-8locale-gen zh_CN.UTF-8</code></pre><h2 id="谷歌浏览器的安装"><a href="#谷歌浏览器的安装" class="headerlink" title="谷歌浏览器的安装"></a>谷歌浏览器的安装</h2><h2 id="安装-git-vim-virtualbox-colordiff-curl-redis-server"><a href="#安装-git-vim-virtualbox-colordiff-curl-redis-server" class="headerlink" title="安装 git vim virtualbox colordiff curl redis-server"></a>安装 git vim virtualbox colordiff curl redis-server</h2><pre><code>配置 [git 别名](/开发者手册/git-alias/)vim 的配置修改PS1 变量的配置</code></pre><p><code>PS1="\[\e]0;\w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\u@\h\[\033[01m\] \[\033[01;32m\]\W\[\033[01;36m\]\[\033[01m\] &gt; "</code></p><pre><code>配置 系统 diff 别名为 colordiff</code></pre><h2 id="安装-wps"><a href="#安装-wps" class="headerlink" title="安装 wps"></a>安装 wps</h2><h2 id="修复-wps-的字体问题"><a href="#修复-wps-的字体问题" class="headerlink" title="修复 wps 的字体问题"></a>修复 wps 的字体问题</h2><p><a href="/环境搭建/wps-fonts-error/">修复 wps 字体</a></p><h2 id="gedit-的首选项修改"><a href="#gedit-的首选项修改" class="headerlink" title="gedit 的首选项修改"></a>gedit 的首选项修改</h2><h2 id="nodejs-的安装"><a href="#nodejs-的安装" class="headerlink" title="nodejs 的安装"></a>nodejs 的安装</h2><p><a href="/开发者手册/common-package-management-tool-for-source/">npm 换源</a></p><h2 id="nodejs-的全局配置"><a href="#nodejs-的全局配置" class="headerlink" title="nodejs 的全局配置"></a>nodejs 的全局配置</h2><h2 id="hexo-的安装"><a href="#hexo-的安装" class="headerlink" title="hexo 的安装"></a>hexo 的安装</h2><h2 id="virtualbox-中-server-的恢复"><a href="#virtualbox-中-server-的恢复" class="headerlink" title="virtualbox 中 server 的恢复"></a>virtualbox 中 server 的恢复</h2><h2 id="phpstorm-的安装"><a href="#phpstorm-的安装" class="headerlink" title="phpstorm 的安装"></a>phpstorm 的安装</h2><pre><code>phpstorm 注册：`http://idea.qinxi1992.cn`</code></pre><h2 id="phpstorm-与服务器之间的配置以及文件间的同步"><a href="#phpstorm-与服务器之间的配置以及文件间的同步" class="headerlink" title="phpstorm 与服务器之间的配置以及文件间的同步"></a>phpstorm 与服务器之间的配置以及文件间的同步</h2><h2 id="更改家目录下的文件的名字"><a href="#更改家目录下的文件的名字" class="headerlink" title="更改家目录下的文件的名字"></a>更改家目录下的文件的名字</h2><pre><code>1. 系统设置（右上角的齿轮）2. 语言支持（弹出的对话框选择 `稍后提醒`）3. 将 English(United States) 拖到第一行（汉语（中国）会自己到列表下面去）4. 应用到整个系统5. 注销6. 登录7. 选中复选框8. 更新文件名9. 关闭10. system setting（右上角的齿轮）11. Language Support (弹出的对话框选择 `Remerbe ...`）12. 将汉语（中国）在列表中找出来，拖到第一行13. 然后选择 `Apply to the entire system`14. 然后就是右上角的齿轮（log out）15. 登录就好了（如果你在之前忘了将复选框勾上，这一次登录不要更新文件名，勾上复选框，选择保留旧的文件名）16. ....（类似的过程来操作，将语言改回来就可以了，这样子在终端进入家目录后，如果要进其他目录就不用输入中文了）</code></pre><h2 id="安装-unity-tweak"><a href="#安装-unity-tweak" class="headerlink" title="安装 unity-tweak"></a>安装 unity-tweak</h2><pre><code>开启点击最小化关闭搜索在线资源开启热区</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的vim简单配置</title>
      <link href="/huan-jing/vim-setting/"/>
      <url>/huan-jing/vim-setting/</url>
      
        <content type="html"><![CDATA[<h1 id="我的-Vim-的相关配置"><a href="#我的-Vim-的相关配置" class="headerlink" title="我的 Vim 的相关配置"></a>我的 Vim 的相关配置</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Vim 是一个类似于 <a href="http://baike.baidu.com/subview/27682/6112795.htm" target="_blank" rel="noopener">Vi</a> 的著名的功能强大、高度可定制的<a href="http://baike.baidu.com/view/487023.htm" target="_blank" rel="noopener">文本编辑器</a>，在 Vi 的基础上改进和增加了很多特性。[1]  VIM是纯粹的<a href="http://baike.baidu.com/view/20965.htm" target="_blank" rel="noopener">自由软件</a>。</p><h2 id="安装与简单配置"><a href="#安装与简单配置" class="headerlink" title="安装与简单配置"></a>安装与简单配置</h2><ol><li><p>安装<br>在 ubuntu 中，只需执行<code>sudo apt install vim -y</code>，即可将 vim 安装在你的系统中</p></li><li><p>简单配置<br>vim 安装好后，为了便于日后的使用，需要进行简单的修改。我为了能让它对全部用户生效。修改的是全局配置，你可以只修改当前用户家目录下的配置文件。</p></li></ol><p><code>sudo vim /etc/vim/vimrc</code></p><pre><code>set ts=4set sw=4set aiset fo=rset nu</code></pre><p><img src="setting.png" alt="setting" title="我的Vim配置"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shadowsocks</title>
      <link href="/huan-jing/shadowsocks/"/>
      <url>/huan-jing/shadowsocks/</url>
      
        <content type="html"><![CDATA[<h1 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Shadowsocks，一个可以快速建立的隧道。在次不做过多的阐述。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Debian / Ubuntu:</p><pre><code>sudo apt install python-pippip install shadowsocks</code></pre><p>CentOS:</p><pre><code>yum install python-setuptools &amp;&amp; easy_install pippip install shadowsocks</code></pre><h2 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h2><ol><li><p>命令行<br> <code>ssserver -p 443 -k password -m aes-256-cfb</code></p><p> 要在后台运行：<br> <code>sudo ssserver -p 443 -k password -m aes-256-cfb --user nobody -d start</code></p><p> 要检查日志：<br> <code>sudo less /var/log/shadowsocks.log</code></p><p> 通过 <code>-h</code> 参数查看所有选项。</p></li><li><p>配置文件</p><pre><code> {     "server": "服务器 ip/域名 ",     "port_password": {         "端口": "密码"     },     "local_address": "127.0.0.1",     "localhost_port": 1080,     "method": "aes-256-cfb" }</code></pre></li></ol><ul><li><p>启动<br><code>/usr/local/bin/ssserver -c /etc/ss.json --pid-file /var/run/shadowsocks.pid --log-file /var/log/shadowsocks.log -d start</code></p></li><li><p>将启动命令追加只 <code>/etc/rc.local</code>结尾，设为开机自启<br><code>echo "/usr/local/bin/ssserver -c /etc/ss.json --pid-file /var/run/shadowsocks.pid --log-file /var/log/shadowsocks.log -d start" &gt;&gt; /etc/rc.local</code></p></li></ul><h2 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h2><p>shadowsock 有众多的客户端。</p><p>在此只提供下载链接。百度有着许多的配置的相关说明。</p><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">Windows</a><br><a href="https://github.com/shadowsocks/shadowsocks-windows/releases/download/3.3.4/Shadowsocks-3.3.4.zip" target="_blank" rel="noopener">下载</a></p><p><a href="https://github.com/shadowsocks/shadowsocks-qt5/releases" target="_blank" rel="noopener">Linux</a><br><a href="https://github.com/shadowsocks/shadowsocks-qt5/archive/v2.7.0.tar.gz" target="_blank" rel="noopener">下载源码</a><br><code>Apt 下载</code>：</p><pre><code>sudo add-apt-repository ppa:hzwhuang/ss-qt5sudo updatesudo apt install shadowsocks-qt5</code></pre><p><a href="https://github.com/shadowsocks/shadowsocks-iOS/releases" target="_blank" rel="noopener">Mac OS</a><br><a href="https://github.com/shadowsocks/shadowsocks-iOS/releases/download/2.6.3/ShadowsocksX-2.6.3.dmg" target="_blank" rel="noopener">下载</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令清单</title>
      <link href="/gong-ju/git-command-list/"/>
      <url>/gong-ju/git-command-list/</url>
      
        <content type="html"><![CDATA[<h1 id="Git常用命令清单"><a href="#Git常用命令清单" class="headerlink" title="Git常用命令清单"></a>Git常用命令清单</h1><p>唔，看过 <a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">阮一峰的网络日志</a> 后，觉得写得挺好的。所以我也就不重复记录了。</p><p>:)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git配置别名</title>
      <link href="/gong-ju/git-alias/"/>
      <url>/gong-ju/git-alias/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-别名"><a href="#Git-别名" class="headerlink" title="Git 别名"></a>Git 别名</h1><p>网上有众多的 git 使用方式，至于 git 的设置别名方式也有。在此，我做一点记录，避免自己以后每次要使用的时候都要去网上查找。</p><ul><li>对简单的几个命令进行别名设置<pre><code>git config --global alias.st statusgit config --global alias.co checkoutgit config --global alias.ci commitgit config --global alias.br branch</code></pre></li></ul><p>设置完成后，就可以使用别名来代替原有的命令了。</p><hr><p>一点其他记录：<br><strong>丧心病狂的好玩的别名</strong></p><p><code>git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</code></p><p>当你输入 <code>git lg</code> 的时候就能看到类似如下绚丽的界面了。</p><p><img src="logTree.png" alt="历史操作记录树"></p><p><strong>NOTE</strong></p><p>配置Git的时候，加上–global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。</p><p>每个仓库的Git配置文件都放在 .git/config 文件中。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375234012342f90be1fc4d81446c967bbdc19e7c03d3000" target="_blank" rel="noopener">配置别名 - 廖雪峰的官方网站</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用包管理工具换源</title>
      <link href="/huan-jing/common-package-management-tool-for-source/"/>
      <url>/huan-jing/common-package-management-tool-for-source/</url>
      
        <content type="html"><![CDATA[<h1 id="包管理工具换源"><a href="#包管理工具换源" class="headerlink" title="包管理工具换源"></a>包管理工具换源</h1><h2 id="PHP-的包管理工具-composer"><a href="#PHP-的包管理工具-composer" class="headerlink" title="PHP 的包管理工具 composer"></a>PHP 的包管理工具 composer</h2><p>composer 换源：</p><p><code>composer config -g repo.packagist composer https://packagist.phpcomposer.com</code></p><p>让我们的 composer 进行自我更新一次，以使我们的 composer 保持最新版本： <code>composer selfupdate</code></p><h2 id="node-的包管理工具-npm"><a href="#node-的包管理工具-npm" class="headerlink" title="node 的包管理工具 npm"></a>node 的包管理工具 npm</h2><ul><li>npm 查看当前源：</li></ul><p><code>npm config get registry</code></p><p>效果如下</p><p><img src="npm-view-the-source.png" alt="npm-view-the-source"></p><ul><li>npm 换源：</li></ul><ol><li>临时使用</li></ol><p><code>npm --registry https://registry.npm.taobao.org install express</code></p><ol start="2"><li>持久使用</li></ol><p><code>npm config set registry https://registry.npm.taobao.org</code></p><p><img src="npm-change-the-source.png" alt="npm-change-the-source"></p><p>通过查看源的命令确认是否更换成功<br><code>npm config get registry</code></p><p><img src="npm-change-source-confirmation.png" alt="npm-change-source-confirmation"></p><ol start="3"><li>3.通过 cnpm 使用</li></ol><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><h2 id="Ruby-的包管理工具-gem"><a href="#Ruby-的包管理工具-gem" class="headerlink" title="Ruby 的包管理工具 gem"></a>Ruby 的包管理工具 gem</h2><p><strong>“<a href="https://ruby.taobao.org" target="_blank" rel="noopener">Ruby淘宝源</a>“ 声明了：RubyGems 镜像的管理工作以后将交由 <a href="http://gems.ruby-china.org" target="_blank" rel="noopener">Ruby China</a> 负责，以便能有更多的社区爱好者参与进来，保持持续发展。<br>所以我建议直接将源更换到[Ruby China][]。详见[Ruby淘宝源][]</strong></p><ul><li>gem 查看当前源：</li></ul><p><code>gem source</code> 或 <code>gem source -l</code></p><p>效果如下</p><p><img src="gem-view-the-source.png" alt="gem-view-the-source.png"></p><ul><li>gem 换源：</li></ul><p><code>gem sources --add https://gems.ruby-china.org --remove https://rubygems.org</code></p><p><img src="gem-change-the-source.png" alt="gem-change-source.png"></p><ul><li>gem 换源确认：</li></ul><p><code>gem source</code> 或 <code>gem source -l</code></p><p><img src="gem-change-source-confirmation.png" alt="gem-change-source-confirmation.png"></p><p><strong>确保只有 gems.ruby-china.org</strong></p><ul><li><p>gem Ruby-China源 <code>https://gems.ruby-china.org</code></p></li><li><p>gem 默认源 <code>https://rubygems.org</code></p></li></ul><h2 id="【待更…】"><a href="#【待更…】" class="headerlink" title="【待更…】"></a>【待更…】</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo安装和基本使用</title>
      <link href="/hexo/hexo-install-and-useing/"/>
      <url>/hexo/hexo-install-and-useing/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>Hexo 是一个快速，简单和强大的博客框架。你写的帖子在 Markdown（或其他语言）和 Hexo 生成静态文件与美丽的主题在几秒钟内。</p><p><strong>前提条件</strong>：</p><p><em>本博客所有环境基于 ubuntu</em></p><ul><li><code>hexo</code> 需要一些依赖，你需要提前安装他们。</li></ul><ol><li><p><a href="https://nodejs.org" target="_blank" rel="noopener">node.js</a></p><p> 你需要到 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node.js 官网下载页</a> 下载 <a href="https://nodejs.org" target="_blank" rel="noopener">node.js</a><br>并且 为 <a href="/开发者手册/common-package-management-tool-for-source/">npm 换源</a>。<br>如果你还未安装 npm 请看 <a href="/nodeJs/环境搭建/nodejs-install/">这里</a></p></li><li><p><a href="http://git-scm.com" target="_blank" rel="noopener">git</a></p><p> 你需要到 <a href="http://git-scm.com" target="_blank" rel="noopener">git 官网</a> 安装版本管理工具 <a href="http://git-scm.com" target="_blank" rel="noopener">git</a><br>如果你还未安装 git，在 ubuntu 下，你只需执行<code>sudo apt install git -y</code>便能将 git 装在你的环境中。</p></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>如果上面提到的前提条件你都已经做好，那么，你将可以执行以下命令进行 hexo 的安装</p><p><code>npm install -g hexo-cli</code></p><p><a href="https://hexo.io/zh/docs/" target="_blank" rel="noopener">hexo 官网</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p><code>$ hexo new "My New Post"</code></p></li><li><p><code>$ hexo server</code></p></li><li><p><code>$ hexo generate</code></p></li><li><p><code>$ hexo deploy</code></p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 操作流程</title>
      <link href="/gong-ju/git-operating-procedures/"/>
      <url>/gong-ju/git-operating-procedures/</url>
      
        <content type="html"><![CDATA[<h1 id="版本管理工具-Git"><a href="#版本管理工具-Git" class="headerlink" title="版本管理工具 Git"></a>版本管理工具 Git</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Git是一款免费、开源的 <a href="https://zh.wikipedia.org/wiki/分布式版本控制" target="_blank" rel="noopener">分布式版本控制</a> 系统，可以有效、高速的处理从很小到非常大的项目版本管理。</p></blockquote><blockquote><p>最初由<a href="https://zh.wikipedia.org/wiki/林纳斯·托瓦兹" target="_blank" rel="noopener">林纳斯·托瓦兹</a>（Linus Torvalds）创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。</p></blockquote><blockquote><p>来源<br><a href="https://zh.wikipedia.org/wiki/林纳斯·托瓦兹" target="_blank" rel="noopener">林纳斯·托瓦兹</a> 自嘲地取了这个名字“ <a href="https://zh.wiktionary.org/wiki/en:git" target="_blank" rel="noopener">git</a> ”，该词源自英国俚语，意思大约是“混账”。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Windows 的用户可以在 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">这里</a> 下载自己对应的版本。</p><p>Linux：</p><blockquote><ul><li>Debian/Ubuntu<br><code>$ sudo apt install git</code></li><li>Fedora<br><code>$ yum install git</code> (up to Fedora 21)<br><code>$ dnf install git</code> (Fedora 22 and later)</li><li>Gentoo<br><code>$ emerge --ask --verbose dev-vcs/git</code></li><li>Arch Linux<br><code>$ pacman -S git</code></li><li>openSUSE<br><code>$ zypper install git</code></li><li>FreeBSD<br><code>$ cd /usr/ports/devel/git</code><br><code>$ make install</code></li><li>Solaris 9/10/11 (<a href="https://opencsw.org" target="_blank" rel="noopener">OpenCSW</a>)<br><code>$ pkgutil -i git</code></li><li>Solaris 11 Express<br><code>$ pkg install developer/versioning/git</code></li><li>OpenBSD<br><code>$ pkg_add git</code></li><li>Red Hat Enterprise Linux, Oracle Linux, CentOS, Scientific Linux, et al.<br>RHEL and derivatives typically ship older versions of git. If you cannot (or don’t want to) compile git from source, you may need to use a 3rd-party repository such as the IUS Community Project to obtain a more recent version of git.</li></ul></blockquote><p>Mac OS：的用户可以在 <a href="https://git-scm.com/download/mac" target="_blank" rel="noopener">这里</a> 下载自己对应的版本。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li>添加个人信息<pre><code># 设置提交代码时的用户信息$ git config [--global] user.name "[name]"$ git config [--global] user.email "[email address]"</code></pre></li></ol><h1 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h1><p>$ git config –global user.name yourname<br>$ git config –global user.email <a href="mailto:xxx@xxx.com">xxx@xxx.com</a></p><pre><code>2. 添加远程仓库</code></pre><h1 id="增加一个新的远程仓库，并命名"><a href="#增加一个新的远程仓库，并命名" class="headerlink" title="增加一个新的远程仓库，并命名"></a>增加一个新的远程仓库，并命名</h1><p>$ git remote add [shortname] [url]</p><h1 id="e-g-1"><a href="#e-g-1" class="headerlink" title="e.g."></a>e.g.</h1><p>$ git remote add origin <a href="https://github.com/yourname/your-repositories.git" target="_blank" rel="noopener">https://github.com/yourname/your-repositories.git</a></p><pre><code>新建代码库---------</code></pre><h1 id="在当前目录新建一个Git代码库"><a href="#在当前目录新建一个Git代码库" class="headerlink" title="在当前目录新建一个Git代码库"></a>在当前目录新建一个Git代码库</h1><p>$ git init</p><h1 id="新建一个目录，将其初始化为Git代码库"><a href="#新建一个目录，将其初始化为Git代码库" class="headerlink" title="新建一个目录，将其初始化为Git代码库"></a>新建一个目录，将其初始化为Git代码库</h1><p>$ git init [project-name]</p><pre><code>克隆代码库---------</code></pre><h1 id="下载一个项目和它的整个代码历史"><a href="#下载一个项目和它的整个代码历史" class="headerlink" title="下载一个项目和它的整个代码历史"></a>下载一个项目和它的整个代码历史</h1><p>$ git clone [url]</p><pre><code>添加到暂存区----------</code></pre><h1 id="添加当前目录的所有文件到暂存区"><a href="#添加当前目录的所有文件到暂存区" class="headerlink" title="添加当前目录的所有文件到暂存区"></a>添加当前目录的所有文件到暂存区</h1><p>$ git add .</p><pre><code>提交到本地仓库，并添加提交信息--------------------------</code></pre><h1 id="提交暂存区到仓库区"><a href="#提交暂存区到仓库区" class="headerlink" title="提交暂存区到仓库区"></a>提交暂存区到仓库区</h1><p>$ git commit -m [message]</p><h1 id="e-g-2"><a href="#e-g-2" class="headerlink" title="e.g."></a>e.g.</h1><p>$ git commit -m ‘这是一段关于本次提交的说明信息’</p><pre><code>推送到远程仓库------------</code></pre><h1 id="上传本地指定分支到远程仓库"><a href="#上传本地指定分支到远程仓库" class="headerlink" title="上传本地指定分支到远程仓库"></a>上传本地指定分支到远程仓库</h1><p>$ git push [remote] [branch]</p><h1 id="e-g-3"><a href="#e-g-3" class="headerlink" title="e.g."></a>e.g.</h1><p>$ git push origin master</p><pre><code>从远程仓库拉取新信息-----------------1. pull 的方式拉取</code></pre><h1 id="取回远程仓库的变化，并与本地分支合并"><a href="#取回远程仓库的变化，并与本地分支合并" class="headerlink" title="取回远程仓库的变化，并与本地分支合并"></a>取回远程仓库的变化，并与本地分支合并</h1><p>$ git pull [remote] [branch]</p><h1 id="e-g-4"><a href="#e-g-4" class="headerlink" title="e.g."></a>e.g.</h1><p>$ git pull origin master</p><pre><code>2. fetch 的方式拉取**建议用此命令获取新信息，此命令不会直接将远程分支与当前分支合并，拉取下来后再手动操作**</code></pre><h1 id="下载远程仓库的所有变动"><a href="#下载远程仓库的所有变动" class="headerlink" title="下载远程仓库的所有变动"></a>下载远程仓库的所有变动</h1><p>$ git fetch [remote]</p><h1 id="e-g-5"><a href="#e-g-5" class="headerlink" title="e.g."></a>e.g.</h1><p>$ git fetch origin master</p><pre><code>其他----</code></pre><h1 id="生成一个可供发布的压缩包"><a href="#生成一个可供发布的压缩包" class="headerlink" title="生成一个可供发布的压缩包"></a>生成一个可供发布的压缩包</h1><p>$ git archive</p><pre><code></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机中的数据存在形式2</title>
      <link href="/wei-fen-lei/computer-store-two/"/>
      <url>/wei-fen-lei/computer-store-two/</url>
      
        <content type="html"><![CDATA[<h2 id="上一篇中提到了二进制与十进制的转化，以及身边的数据是如何保存在计算机中的。本次来谈谈另一种进制十六进制"><a href="#上一篇中提到了二进制与十进制的转化，以及身边的数据是如何保存在计算机中的。本次来谈谈另一种进制十六进制" class="headerlink" title="上一篇中提到了二进制与十进制的转化，以及身边的数据是如何保存在计算机中的。本次来谈谈另一种进制十六进制"></a>上一篇中提到了二进制与十进制的转化，以及身边的数据是如何保存在计算机中的。本次来谈谈另一种进制<strong>十六进制</strong></h2><p>我们知道二进制是计算机所能识别的数字，但是计算机中的数据并不全都是以二进制储存的，因为二进制的储存能力有限，在上一篇中提到，系统规定8位为一个字节，而每4个字节可以转换成为一个十六进制的数据。这样，就能减少计算机储存数据需要的位了。</p><h3 id="十六进制，十进制，二进制"><a href="#十六进制，十进制，二进制" class="headerlink" title="十六进制，十进制，二进制"></a>十六进制，十进制，二进制</h3><table><thead><tr><th>十六进制</th><th>十进制</th><th>二进制</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0000</td></tr><tr><td>1</td><td>1</td><td>0001</td></tr><tr><td>2</td><td>2</td><td>0010</td></tr><tr><td>3</td><td>3</td><td>0011</td></tr><tr><td>4</td><td>4</td><td>0100</td></tr><tr><td>5</td><td>5</td><td>0101</td></tr><tr><td>6</td><td>6</td><td>0110</td></tr><tr><td>7</td><td>7</td><td>0111</td></tr><tr><td>8</td><td>8</td><td>1000</td></tr><tr><td>9</td><td>9</td><td>1001</td></tr><tr><td>A</td><td>10</td><td>1010</td></tr><tr><td>B</td><td>11</td><td>1011</td></tr><tr><td>C</td><td>12</td><td>1100</td></tr><tr><td>D</td><td>13</td><td>1101</td></tr><tr><td>E</td><td>14</td><td>1110</td></tr><tr><td>F</td><td>15</td><td>1111</td></tr></tbody></table><p>由上图，我们可以知道二进制，十进制，十六进制之间的转化关系。</p><h3 id="ASCII表中的字母部分"><a href="#ASCII表中的字母部分" class="headerlink" title="ASCII表中的字母部分"></a>ASCII表中的字母部分</h3><table><thead><tr><th>编号</th><th>字母</th><th>二进制码</th><th></th><th>编号</th><th>字母</th><th>二进制码</th></tr></thead><tbody><tr><td>65</td><td>A</td><td>1000001</td><td></td><td>97</td><td>a</td><td>1100001</td></tr><tr><td>66</td><td>B</td><td>1000010</td><td></td><td>98</td><td>b</td><td>1100010</td></tr><tr><td>67</td><td>C</td><td>1000011</td><td></td><td>99</td><td>c</td><td>1100011</td></tr><tr><td>68</td><td>D</td><td>1000100</td><td></td><td>100</td><td>d</td><td>1100100</td></tr><tr><td>69</td><td>E</td><td>1000101</td><td></td><td>101</td><td>e</td><td>1100101</td></tr><tr><td>70</td><td>F</td><td>1000110</td><td></td><td>102</td><td>f</td><td>1100110</td></tr><tr><td>71</td><td>G</td><td>1000111</td><td></td><td>103</td><td>g</td><td>1100111</td></tr><tr><td>72</td><td>H</td><td>1001000</td><td></td><td>104</td><td>h</td><td>1101000</td></tr><tr><td>73</td><td>I</td><td>1001001</td><td></td><td>105</td><td>i</td><td>1101001</td></tr><tr><td>74</td><td>J</td><td>1001010</td><td></td><td>106</td><td>j</td><td>1101010</td></tr><tr><td>75</td><td>K</td><td>1001011</td><td></td><td>107</td><td>k</td><td>1101011</td></tr><tr><td>76</td><td>L</td><td>1001100</td><td></td><td>108</td><td>l</td><td>1101100</td></tr><tr><td>77</td><td>M</td><td>1001101</td><td></td><td>109</td><td>m</td><td>1101101</td></tr><tr><td>78</td><td>N</td><td>1001110</td><td></td><td>110</td><td>n</td><td>1101110</td></tr><tr><td>79</td><td>O</td><td>1001111</td><td></td><td>111</td><td>o</td><td>1101111</td></tr><tr><td>80</td><td>P</td><td>1010000</td><td></td><td>112</td><td>p</td><td>1110000</td></tr><tr><td>81</td><td>Q</td><td>1010001</td><td></td><td>113</td><td>q</td><td>1110001</td></tr><tr><td>82</td><td>R</td><td>1010010</td><td></td><td>114</td><td>r</td><td>1110010</td></tr><tr><td>83</td><td>S</td><td>1010011</td><td></td><td>115</td><td>s</td><td>1110011</td></tr><tr><td>84</td><td>T</td><td>1010100</td><td></td><td>116</td><td>t</td><td>1110100</td></tr><tr><td>85</td><td>U</td><td>1010101</td><td></td><td>117</td><td>u</td><td>1110101</td></tr><tr><td>86</td><td>V</td><td>1010110</td><td></td><td>118</td><td>v</td><td>1110110</td></tr><tr><td>87</td><td>W</td><td>1010111</td><td></td><td>119</td><td>w</td><td>1110111</td></tr><tr><td>88</td><td>X</td><td>1011000</td><td></td><td>120</td><td>x</td><td>1111000</td></tr><tr><td>89</td><td>Y</td><td>1011001</td><td></td><td>121</td><td>y</td><td>1111001</td></tr><tr><td>90</td><td>Z</td><td>1011010</td><td></td><td>122</td><td>z</td><td>1111010</td></tr></tbody></table><h2 id="二进制与十六进制的转换"><a href="#二进制与十六进制的转换" class="headerlink" title="二进制与十六进制的转换"></a>二进制与十六进制的转换</h2><p>前面,我们了解了二进制、十进制与十六进制之间的关系后，可以开始实际应用了。</p><p>在此之前，我们要知道二进制与十六进制的转换方法。</p><p>二进制转为十六进制只需对照上面的表格就可以完成转换。</p><p>十六进制转换成二进制则是将每一个数据(0-F)拆成4个2进制数据，分别按照表格的对应关系写下来，不足4位的用零补齐。</p><p><strong>注意:</strong>补零只能在高位与低位之间补充。</p><h2 id="与、或、非"><a href="#与、或、非" class="headerlink" title="与、或、非"></a>与、或、非</h2><p>”与、或、非“是一种运算方式，就像四则运算是数学中的运算法则一样。</p><blockquote><p>与如同并且。</p></blockquote><p>现在我们将2个真进行相与，因为都是真，所以我们得到的结果是真。如果将真与假进行相与运算。得到的就是假。当然，2个假进行相与运算，得到的就是假了。</p><p><strong>即一假则假</strong></p><blockquote><p>或从字面理解就是或者。</p></blockquote><p>现在我们将2个真进行或运算，因为都是真，所以我们得到的结果是真。如果将真与假进行相或运算。得到的就是真。当然，2个假进行相或运算，得到的就是假了。</p><p><strong>即一真则真</strong></p><blockquote><p>而非则是反过来的意思。</p></blockquote><p><strong>即我们将原来的真改为假，假改为真。</strong></p><h2 id="十六进制储存数据"><a href="#十六进制储存数据" class="headerlink" title="十六进制储存数据"></a>十六进制储存数据</h2><p>e.g.</p><ul><li><p>现在有一间房间，房间中有的座位有坐人，有的座位是空位。</p><p> 假设现在该房间的座位有人的为x，空位为o，座位分布情况如下：</p></li></ul><blockquote><table><thead><tr><th></th><th>一</th><th>二</th><th>三</th><th>四</th><th>五</th><th>六</th><th>七</th></tr></thead><tbody><tr><td>1</td><td>x</td><td>o</td><td>x</td><td>o</td><td>x</td><td>o</td><td>o</td></tr><tr><td>2</td><td>o</td><td>o</td><td>x</td><td>o</td><td>x</td><td>o</td><td>o</td></tr><tr><td>3</td><td>x</td><td>x</td><td>x</td><td>o</td><td>x</td><td>o</td><td>o</td></tr><tr><td>4</td><td>o</td><td>o</td><td>o</td><td>x</td><td>x</td><td>x</td><td>o</td></tr><tr><td>5</td><td>o</td><td>o</td><td>o</td><td>o</td><td>o</td><td>o</td><td>o</td></tr><tr><td>6</td><td>o</td><td>o</td><td>o</td><td>o</td><td>o</td><td>o</td><td>o</td></tr></tbody></table></blockquote><p>   我们可以像这样用一张表格来记录，但计算机是没办法记录表格的，在计算机中的表格最终是以图像的形式被记录的。</p><p>   如果我们定义座位有人记为1，没人记为0。我们的座位信息又可以表示为：<code>101010000101001110100000111</code><br>   相对计算机保存图片而言，这串数据就容易保存了。</p><p>   按照之前的转换规则，我们又可以将二进制的数据4位一组的进行转换。得到的结果是：<code>A853A07</code></p><p>   如果用二进制储存这串数据的话，让我们人来看，会是一大串难读的东西。但如果转换后，我们就能轻松读懂了。</p><ul><li><p>现在有一个公司，记某个部门经理能进房间为1,不能则为0。将公司的房间从一楼的右边开始从0进行编号。当前该经理的权限为<code>FA3</code>，根据规则对其进行转换。<code>F=1111</code>，<code>A=1010</code>，<code>3=11</code>因为3转换后不足4位，所以进行补零。所以最终得到的结果是<code>FA3=111110100011</code>，而不是<code>FA3=1111101011</code>。所以该经理能进的房间是编号为0、1、5、7、8、9、10、11的房间。</p></li><li><p>我们规定：<br>  A权限为：110101001<br>  B权限为：101100110<br>  C权限为：010010101<br>  1依旧为能进房间，0为不能。<br>现在有职员张三，李四。张三拥有AB权限，李四拥有BC权限。同时拥有他们，这是或的关系。所以，我们想要知道他们分别拥有什么权限，就对他们同时拥有的权限进行或运算。运算后的结果是张三拥有1EF即能进111101111权限，李四拥有1F7即能进111110111权限。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>计算机只能通过二进制储存数据，储存的结果难以让人直接理解。十六进制让人能够相对直观看懂内容。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机中的数据存在形式1</title>
      <link href="/wei-fen-lei/computer-store-one/"/>
      <url>/wei-fen-lei/computer-store-one/</url>
      
        <content type="html"><![CDATA[<h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><p>进制有许许多多，如计算机、电路的二进制(断电、通电)，时间的60进制(时分秒)、12进制(12小时制)、24进制(24小时制)月份的28、30、31进制。年份的365、366进制。数学计数的10进制，计算机中的8进制，流量的1024进制等等…</p><p>进制的转换与我们的生活息息相关。</p><p>|十进制 |二进制                   |<br>|——————————-|<br>|…..  |…..                  |<br>|0.125  |                 0.001 |<br>|0.25   |                  0.01 |<br>|0.5    |                   0.1 |<br>|0      |                     0 |<br>|1      |                     1 |<br>|2      |                    10 |<br>|3      |                    11 |<br>|4      |                   100 |<br>|5      |                   101 |<br>|6      |                   110 |<br>|7      |                   111 |<br>|8      |                  1000 |<br>|16     |                 10000 |<br>|32     |                100000 |<br>|64     |               1000000 |<br>|128    |              10000000 |<br>|256    |            1 00000000 |<br>|512    |           10 00000000 |<br>|1024   |          100 00000000 |<br>|2048   |         1000 00000000 |<br>|4096   |        10000 00000000 |<br>|8192   |       100000 00000000 |<br>|16384  |      1000000 00000000 |<br>|32768  |     10000000 00000000 |<br>|65536  |     10000000 00000000 |<br>|131072 |   1 00000000 00000000 |<br>|262144 |  10 00000000 00000000 |<br>|524288 | 100 00000000 00000000 |<br>|1048576|1000 00000000 00000000 |</p><h2 id="计算机中的进制表示"><a href="#计算机中的进制表示" class="headerlink" title="计算机中的进制表示"></a>计算机中的进制表示</h2><p>计算机中的数据都是以0101的形式存储的。因为它识别(断电与通电)。0和1不是数字，而是占的一个”位”。系统中规定8个位为一个字节。所有的整数都可以用二进制表示，但小数部分就没办法全部表示了。例如：0.5的二进制可以表示为0.1(0.5是1的一半，这是十进制中的理解方法。类比，我们可以得到0.1是二进制中的1的一半。继续类比推理的话，我们可以得到0.25的二进制为0.01，0.125的二进制为0.001，0.875呢？二进制就是0.111。)</p><p>那么怎么计算的？<br>假设有一个数5.375<br>它的整数部分5用二进制表示为101<br>小数部分则有公式可以计算。</p><pre><code>取小数部分0.375，0.375×2=0.75因为0.75&lt;1，所以十分位用0表示接着继续取小数部分0.75，0.75×2=1.5因为1.5&gt;1，所以百分位用1表示。  继续重复刚刚的步骤取小数部分0.5×2=1.0因为1.0=1  所以千分位得到的数字是1  所以最后转换的结果是101.011</code></pre><p>前面说过并不是所有的小数都能用二进制表示。例如1/3，我们知道十进制里，它是0.333…循环在二进制中就无法表示了。在编程语言中，我们计算1/3再×3的话，只能得到0.999…(会出现精度丢失)所以我们需要指明精度。</p><p>计算机的最小储存单位是位’b’(bit)，接下就是字节’B’(byte)了。<br>8b=1B<br>其他常用的单位还有千字节’K/KB’(kilobyte)，1K=1024B，兆字节’M/MB’(Megabyte)，1M=1024K，吉字节’G/GB’(Gigabyte)。</p><p>每个英文字母占一个字节，不同编码中，中文占的长度是不同的，通常中文占2个字节，utf-8字符集里，中文占3个字节。</p><p>我们知道计算机可以用0101储存这些信息，那么算盘呢？<br>答案当然是可以，算盘是通过二进制，五进制，十进制结合来处理信息的。<br>只要我们给算盘上的每个珠子以及它们的不同含义，它们就能储存不同的信息了。</p><p>假设有一张图片是800×600的大小(单位px)，那么它的每一个像素都可以用二进制可以表示。从左上角(0,0)开始，记录每一个从左往右依次记录每一个像素的黑白颜色，假设屏幕大小为1440×900，那么第一行记录到(1439,0)后会到下一行继续记录，下一行就从(1440,0)继续记录了。知道將整副图记录完毕，下次调用的时候，按照记录的信息每个位置与位置的对应的颜色还原就可以了。</p><p>彩色(255色)的图片，没办法像黑白色那样简简单单的用01这2种状态来表示，所以我们需要储存比黑白图片多一点的信息，那就是颜色的编码。</p><p>图像能够储存，声音也一样可以。我们需要的是捕捉到声音。<br>还在学习的时候，物理老师就告诉过我们声音是通过振动产生的。我们想要储存声音，就需要捕捉振动，振动需要捕捉的是它振动的频率。<br>在网上下载歌曲的时候，我们可以看到一条信息，有损音质、无损音质。它们的区别就是码率的不同。记得前段时间，UC资讯中看到有损与无损的区别之一就是，它们之间储存的振动频率(码率，即每秒振动的频率的数量)不同。</p><p>视频的储存是建立在声音与图像的基础上的。每秒展现数帧的图像，就是小视频了。这时候的视频并没有声音。在前面提到的，捕捉声音可以每秒捕捉多少振幅，图像的展现是以秒为单位，声音的展现也是以秒为单位，如果在播放视频的同时，播放这一秒的声音，这就是有声视频了。將对应的视频与声音合并成一个文件，这就是视频了。电影也是如此。</p><p>我想，大家应该都玩过arp游戏什么的，手游什么的。这类游戏是通过控制来达到接下来的信息的展现。控制是一个输入信号。如果没有输入信号，整个游戏就像是在播放视频一样。我们通过判断输入信号改变输出结果。这就是游戏了。</p><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><p>一个系统至少得有输入 输出 处理器 储存介质 控制器等几部份的存在才能称得上系统。</p><blockquote><p>小明打电话对小智说:”小智，我现在不在公司，你去帮我拿下快递。谢谢！”</p></blockquote><blockquote><p>此时，小智接到电话，收到一个一个请求(输入)，经过大脑(cpu)处理后。得到结论(放下手中的事，到公司门口，取快递，代保管，等小明回来后交还给他)。并加以行动(四肢受大脑控制)。</p></blockquote><p>计算机是一个系统。虚拟世界也是一个系统。这些都是我们人创造出来的。</p><p>我们能看到物体，是因为我们的眼睛捕捉到了直射(太阳光)，反射(各种物体)的光线。并对光线处理之后产生的结果。<br>既然人能做到，机器人也能。机器人的眼睛有光传感器，它也一样能捕捉到并加以处理。</p><p>我们能听到声音是因为我们捕捉到的声音是耳膜振动产生的。得到信息后经过大脑处理就得到了我们所听到的声音。<br>机器人也有耳朵，它的结构和我们不同，它有声音传感器。它捕捉到信息后也可以进行处理。</p><p>我们人有酸甜苦咸鲜等感觉。<br>机器人有各种传感器。  </p><p>美国有研究机构在研究人脑，人脑里有无数神经元，每一个神经元都是一个cpu。他们似乎看到了一些规律，但却没有办法掌握。这些神经元之间有着我们暂时无法探索出来的规律与奥秘，并且在研究的过程中是在变动的。</p><p>我们从初始开始也不是什么都会，一切都是后天学习的成果。</p><p>如果能够將几亿的cpu集成到一个cpu上，机器人未尝不能达到人一样。像人一样学习、做事。只不过现在的工艺上来说，还达不到罢了。</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>我们能够开发出游戏，游戏是一个世界。里面有着角色，角色有着各种信息，受游戏玩家的控制而行动。我们相对游戏中的角色而言是高等智慧。</p><p>类推，我们也有可能受比我们更高等一层智慧的控制，这个世界、宇宙也许是它们创造的。而我们的行为受到它们的控制。</p><p>呃，这些都是题外话，虽然未尝不可能，但是如果真是如此，因为游戏可以重新来过，所以就不会存在世界末日这一说了。</p><p>但我们知道，这是不可能的。</p><h2 id="新手一枚，对诸多事物了解得并不透彻，还望各位一起交流探讨。"><a href="#新手一枚，对诸多事物了解得并不透彻，还望各位一起交流探讨。" class="headerlink" title="新手一枚，对诸多事物了解得并不透彻，还望各位一起交流探讨。 :)"></a>新手一枚，对诸多事物了解得并不透彻，还望各位一起交流探讨。 :)</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nodeJs打印图形</title>
      <link href="/nodejs/nodejs-graph/"/>
      <url>/nodejs/nodejs-graph/</url>
      
        <content type="html"><![CDATA[<h1 id="nodeJs打印图形"><a href="#nodeJs打印图形" class="headerlink" title="nodeJs打印图形"></a>nodeJs打印图形</h1><h2 id="首先声明一个变量-用来存放字符串"><a href="#首先声明一个变量-用来存放字符串" class="headerlink" title="首先声明一个变量,用来存放字符串"></a>首先声明一个变量,用来存放字符串</h2><p><code>var printStr = '';</code></p><p>接下来声明一个函数用来定义要打印一行字符串;</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> printChar <span class="token punctuation">(</span>char<span class="token punctuation">,</span> col<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>col<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        printStr <span class="token operator">+</span><span class="token operator">=</span> char<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>printStr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当你运行<code>node app.js</code>就会看到</p><pre><code>root@snail:~/desktop/test# node app.js********************</code></pre><p>现在,我们对代码做一些修改,使之能打印出一个图形</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> printStr <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">function</span> printChar <span class="token punctuation">(</span>char<span class="token punctuation">,</span> col<span class="token punctuation">)</span> <span class="token punctuation">{</span>    char <span class="token operator">=</span> char<span class="token operator">?</span>char<span class="token punctuation">:</span><span class="token string">'*'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>col<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        printStr <span class="token operator">+</span><span class="token operator">=</span> char<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> n <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    printStr <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> graph <span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> char<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printChar</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> col<span class="token punctuation">)</span>        <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">graph</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>printStr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>解释一下,<code>printChar()</code>是为了打印一列col指定的个数的字符串,<code>n()</code>是用来打印换行符的.<code>graph()</code>函数首先进行3元运算得到<code>char</code>的值,它是要打印的字符.for循环是为了打印出row指定的行数.</p><p>最后console出字符串.</p><p>得到的结果如下:</p><pre><code>root@snail:~/desktop/test# node app.js****************************************</code></pre><p>接下来我们继续修改代码,打印一个三角形.<br>这个要找找规律.我现在贴上最终修改完成的代码:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> printStr <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">function</span> printChar <span class="token punctuation">(</span>col<span class="token punctuation">,</span> char<span class="token punctuation">)</span> <span class="token punctuation">{</span>    char <span class="token operator">=</span> char<span class="token operator">?</span>char<span class="token punctuation">:</span><span class="token string">'*'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>col<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        printStr <span class="token operator">+</span><span class="token operator">=</span> char<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> n <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    printStr <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> graph <span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> char<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printChar</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printChar</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> char<span class="token punctuation">)</span>        <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> triangle <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printChar</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printChar</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printChar</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        j<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span>        <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> ktriangle <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> j<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printChar</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printChar</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printChar</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        j<span class="token operator">-</span><span class="token operator">=</span><span class="token number">2</span>        <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">graph</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">triangle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ktriangle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">graph</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>printStr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行效果如下</p><pre><code>root@snail:~/desktop/test# node app.jsroot@snail:~/desktop/test#</code></pre><h2 id="至于打印空心的图形。我想，根据前面的代码。已经不难了"><a href="#至于打印空心的图形。我想，根据前面的代码。已经不难了" class="headerlink" title="至于打印空心的图形。我想，根据前面的代码。已经不难了"></a>至于打印空心的图形。我想，根据前面的代码。已经不难了</h2><h2 id="不过还是留个空心矩形的小demo吧"><a href="#不过还是留个空心矩形的小demo吧" class="headerlink" title="不过还是留个空心矩形的小demo吧"></a>不过还是留个空心矩形的小demo吧</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> printStr <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">function</span> printChar <span class="token punctuation">(</span>col<span class="token punctuation">,</span> char<span class="token punctuation">)</span> <span class="token punctuation">{</span>    char <span class="token operator">=</span> char<span class="token operator">?</span>char<span class="token punctuation">:</span><span class="token string">'*'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>col<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        printStr <span class="token operator">+</span><span class="token operator">=</span> char<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> n <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    printStr <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> hollowRect <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printChar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printChar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printChar</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printChar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printChar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">hollowRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>printStr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行后你就会看到如下空心矩形:</p><pre><code>root@snail:~/desktop/test# node app.js*********************                  **                  **                  **                  **                  *********************</code></pre><h3 id="附上含有空心矩形的代码"><a href="#附上含有空心矩形的代码" class="headerlink" title="附上含有空心矩形的代码"></a>附上含有空心矩形的代码</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> printStr <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">function</span> printChar <span class="token punctuation">(</span>col<span class="token punctuation">,</span> char<span class="token punctuation">)</span> <span class="token punctuation">{</span>    char <span class="token operator">=</span> char<span class="token operator">?</span>char<span class="token punctuation">:</span><span class="token string">'*'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>col<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        printStr <span class="token operator">+</span><span class="token operator">=</span> char<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> n <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    printStr <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> graph <span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> char<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printChar</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printChar</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> char<span class="token punctuation">)</span>        <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> triangle <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printChar</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printChar</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printChar</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        j<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span>        <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> ktriangle <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> j<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printChar</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printChar</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printChar</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        j<span class="token operator">-</span><span class="token operator">=</span><span class="token number">2</span>        <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> hollowRect <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printChar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printChar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printChar</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printChar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printChar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">graph</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">triangle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ktriangle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">graph</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">hollowRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>printStr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodeJs的表单数据解析2</title>
      <link href="/nodejs/nodejs-post/"/>
      <url>/nodejs/nodejs-post/</url>
      
        <content type="html"><![CDATA[<h1 id="表单中的Post请求解析"><a href="#表单中的Post请求解析" class="headerlink" title="表单中的Post请求解析"></a>表单中的Post请求解析</h1><p>上一篇的最终代码如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"GET"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> doGet <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> u <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>query<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">writeHeader</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;!doctype html>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;meta charset="utf-8">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;title>demo&lt;/title>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;form method="post">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'user: &lt;input type="text" name="user">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'pwd: &lt;input type="password" name="pwd">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;input type="submit" value="submit">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;/form>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> doPost <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在上一篇的基础上，我们开始对doPost()方法进行改写。在此之前我们将doGet()中的</p><blockquote><p>var u = url.parse(req.url, true).query;<br>console.log(u);</p></blockquote><p>注释</p><p>我们先试着传点数据并打印看看<br>现在我们在doPost()<code>console.log(req)</code>打印一下req。</p><p>运行程序，在浏览器的input中输入点数据，并提交。</p><p>在控制台我们发现我们找不到传的数据。但数据一般都随着请求传输过来了。</p><p>现在我们绑定一个data事件，传入参数data，并打印一下data，代码如下。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> doPost <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>打印结果会是一段Buffer，这说明数据传过来了，我们将Buffer后面的数据，通过计算器的进制转换，十六进制转换为十进制，然后将十进制的数据，带入Ascii表，不难发现，这些就是我们刚刚的数据。</p><p>我们知道，图片音频等数据很大，Buffer有限，所以数据一般是分割成字节后发送的。那么数据只接收一次就储存的话，肯定会不完整。所以我们为了能完整的接受所有数据，需要在doPost方法中声明一个空的变量，让变量在ondata事件中将data组合在一起。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> doPost <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        formData <span class="token operator">+</span><span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但是res.end()的位置不合适，这样会导致我们的formData数据还未接收完毕，就结束了doPost()方法。这是不合理的。所以，我们还要再绑定一个end方法。用来判断整个事件结束后才执行<code>res.end();</code>。</p><p>代码如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> doPost <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        formData <span class="token operator">+</span><span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这时打印formData，我们会发现，这是一串字符串。</p><p><img src="postQuery.png" alt="Post 查询"></p><p>我们需要处理它。所以我们要引入querystring模块。<br><code>var qs = require('querystring');</code></p><p>然后使用querystring的parse方法对字符串进行格式化。转成对象。代码如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> doPost <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        formData <span class="token operator">+</span><span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> obj <span class="token operator">=</span>qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>打印结果如下<br><img src="postTrueQuery.png" alt="Post 查询成功"></p><p>这时传过来的数据我们就可以处理了。</p><p>表单中的post请求解析的部分就到此结束了。:)</p><h2 id="这里是本次的实验的代码，包含之前get部分。"><a href="#这里是本次的实验的代码，包含之前get部分。" class="headerlink" title="这里是本次的实验的代码，包含之前get部分。"></a>这里是本次的实验的代码，包含之前get部分。</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"GET"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> doGet <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// var u = url.parse(req.url, true).query;</span>    <span class="token comment" spellcheck="true">// console.log(u);</span>    res<span class="token punctuation">.</span><span class="token function">writeHeader</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;!doctype html>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;meta charset="utf-8">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;title>demo&lt;/title>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;form method="post">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'user: &lt;input type="text" name="user">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'pwd: &lt;input type="password" name="pwd">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;input type="submit" value="submit">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;/form>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> doPost <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        formData <span class="token operator">+</span><span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> obj <span class="token operator">=</span>qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodeJs之表单数据解析1</title>
      <link href="/nodejs/nodejs-get/"/>
      <url>/nodejs/nodejs-get/</url>
      
        <content type="html"><![CDATA[<h1 id="表单中的Get请求解析"><a href="#表单中的Get请求解析" class="headerlink" title="表单中的Get请求解析"></a>表单中的Get请求解析</h1><p>先创建一个node.js的服务器，代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"GET"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server is running at http://localhost:8000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> doGet <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">writeHeader</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;!doctype html>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;meta charset="utf-8">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;title>demo&lt;/title>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;form method="post">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'user: &lt;input type="text" name="user">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'pwd: &lt;input type="password" name="pwd">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;input type="submit" value="submit">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;/form>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> doPost <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>将其保存为server.js</p><p>我们通过判断浏览器request的方法menthod是Get还是Post，进行不同的处理。浏览器(客户端)打开的时候默认是Get方法进行的请求，此时服务器发送一个表单(‘html5中部分标签可省略’)给客户端。</p><p>接着我们在浏览器中输入<code>http://localhost:8000</code>，检测程序是否出错，如果出现如下截图，说明程序运行正常。</p><p><img src="formTest.png" alt="表单测试"></p><p>接着我们在server.js的最前面引入url模块相关代码如下。<br><code>var url = require('url');</code></p><p>然后在地址栏输入<code>/?name=zhangshan&amp;pwd=aaa</code>，在doGet()中添加代码，doGet()修改后的代码为：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> doGet <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> u <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">writeHeader</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;!doctype html>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;meta charset="utf-8">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;title>demo&lt;/title>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;form method="post">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'user: &lt;input type="text" name="user">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'pwd: &lt;input type="password" name="pwd">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;input type="submit" value="submit">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;/form>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们在控制台会得到如下输出</p><blockquote><p>Url {<br>  protocol: null,<br>  slashes: null,<br>  auth: null,<br>  host: null,<br>  port: null,<br>  hostname: null,<br>  hash: null,<br>  search: ‘?name=zhangshan&amp;pwd=aaa’,<br>  query: ‘name=zhangshan&amp;pwd=aaa’,<br>  pathname: ‘/‘,<br>  path: ‘/?name=zhangshan&amp;pwd=aaa’,<br>  href: ‘/?name=zhangshan&amp;pwd=aaa’ }<br>Url {<br>  protocol: null,<br>  slashes: null,<br>  auth: null,<br>  host: null,<br>  port: null,<br>  hostname: null,<br>  hash: null,<br>  search: null,<br>  query: null,<br>  pathname: ‘/favicon.ico’,<br>  path: ‘/favicon.ico’,<br>  href: ‘/favicon.ico’ }</p></blockquote><p><strong>分析后我们可以发现，这和nodejs官网中关于url模块给出的示例不同</strong>，经过一系列的研究才知道官网的代码如果要进行实践应该如此：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> eg <span class="token operator">=</span> <span class="token string">'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>eg<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>eg<span class="token punctuation">)</span><span class="token punctuation">.</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>eg<span class="token punctuation">)</span><span class="token punctuation">.</span>slashes<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>eg<span class="token punctuation">)</span><span class="token punctuation">.</span>auth<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>eg<span class="token punctuation">)</span><span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>eg<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>eg<span class="token punctuation">)</span><span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>eg<span class="token punctuation">)</span><span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>eg<span class="token punctuation">)</span><span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>eg<span class="token punctuation">)</span><span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们运行上面的代码片段的话会得到如下输出。<br><img src="eg.png" alt="示例"><br>是不是与官网相同了？</p><h2 id="回到主题。"><a href="#回到主题。" class="headerlink" title="回到主题。"></a>回到主题。</h2><p>我们知道<code>url.parse(req.url)</code>后拥有这些</p><blockquote><p>search: ‘?name=zhangshan&amp;pwd=aaa’,<br>query: ‘name=zhangshan&amp;pwd=aaa’,<br>pathname: ‘/‘,<br>path: ‘/?name=zhangshan&amp;pwd=aaa’,<br>href: ‘/?name=zhangshan&amp;pwd=aaa’ </p></blockquote><p>我们就可以直接调用了。例如我想获取query的值就用<code>u.query</code>或者直接<code>url.parse(req.url).query</code>调用;<br>我们可以看到<img src="query.png" alt="查询"><br>现在我想获取name的值，我只需要将url.parse()的第二个值改为true即可代码如下：<br><code>url.parse(req.url, true).query</code><br>可以得到如下结果<img src="trueQuery.png" alt="查询成功"><br>得到了jsno数据后我们就可以存入数据库或者使用它了。</p><p>表单中的get请求解析的部分就到此结束了，关于post请求的解析我们下节再说。:)</p><h2 id="这里是本次的实验的代码"><a href="#这里是本次的实验的代码" class="headerlink" title="这里是本次的实验的代码"></a>这里是本次的实验的代码</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"GET"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> doGet <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> u <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>query<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">writeHeader</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;!doctype html>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;meta charset="utf-8">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;title>demo&lt;/title>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;form method="post">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'user: &lt;input type="text" name="user">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'pwd: &lt;input type="password" name="pwd">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;input type="submit" value="submit">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;/form>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> doPost <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为 sublime 配置 NodeJs 的编译环境</title>
      <link href="/huan-jing/nodejs-sublime/"/>
      <url>/huan-jing/nodejs-sublime/</url>
      
        <content type="html"><![CDATA[<h1 id="在sublie-text下编辑nodeJs的文件后，笔者希望能直接编译并查看效果，为此笔者google后做了如下操作："><a href="#在sublie-text下编辑nodeJs的文件后，笔者希望能直接编译并查看效果，为此笔者google后做了如下操作：" class="headerlink" title="在sublie text下编辑nodeJs的文件后，笔者希望能直接编译并查看效果，为此笔者google后做了如下操作："></a>在sublie text下编辑nodeJs的文件后，笔者希望能直接编译并查看效果，为此笔者google后做了如下操作：</h1><p>打开sublime，找到菜单栏的<code>tools(工具)</code>，点开，点击<code>Build System</code>，在右边选择<code>New Build System...</code>，在新建立的文件中输入如下内容：</p><blockquote><p>{<br>    “cmd”: [“node”, “$file”],<br>    “file_regex”: “^[ ]<em>File "(…</em>?)", line ([0-9]*)”,<br>    “selector”: “source.js”,<br>    “shell_cmd”: “clear &amp; taskkill /F /IM node.exe &amp; node "$file"“,<br>    “encoding”: “utf-8”,<br>}</p></blockquote><p>接着我将以上代码保存在<code>D:\Sublime Text\Data\Packages\User</code>的“NodeJsJavascript.sublime-build”(<strong>我的Sublime Text放在D盘</strong>)，然后回到<code>tool(工具)-&gt;Build system</code>，选择刚刚新建立的<code>的“NodeJsJavascript</code>，接着就可以开心敲node.js的代码了，以后每次要编译查看效果的时候，只需要按快捷键<code>Ctrl+B</code>就可以查看了。<br><strong>如果你在命令行中遇到如下错误</strong><img src="err.png" alt="错误" title="编译报错"><br>这是因为8000端口被之前在sublime编译时的程序占用着的。<br>你需要在命令行中执行<code>taskkill /f /t /im node.exe</code>(我为了省事，使用了通配符<code>*</code>)就可以终止node.exe程序。如果你的8000不是因为sublime编译时运行的node程序导致的，请执行以下步骤查询是谁占用了端口，并杀死(结束)这个进程。<br>说明：<em>findstr查询字符串</em><br><code>netstat -ano|findstr 8000</code><br>回车后可以看到占用此端口的进程的PID(<em>在最后的数字</em>)我的占用进程的PID是16352。<br>接着执行<br><code>tasklist|findstr 16352</code>，回车后你就可以看到是哪个程序占用了这个端口。我的是node.exe。<br>最后执行<br><code>taskkill /f /t /im node.exe</code>我就杀死了这个进程了。</p><p>然后在命令行重新执行就可以了。<br>执行过程如下：<br><img src="kill.png" alt="结束进程" title="手动查找进程 PID 并杀死进程"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodeJs的第一个应用</title>
      <link href="/nodejs/nodejs-first/"/>
      <url>/nodejs/nodejs-first/</url>
      
        <content type="html"><![CDATA[<h1 id="创建-nodeJs-应用"><a href="#创建-nodeJs-应用" class="headerlink" title="创建 nodeJs 应用"></a>创建 nodeJs 应用</h1><p><strong>声名</strong><br><em>req即request</em><br><em>res即response</em></p><p>代码如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/plain'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'your server is running at http://localhost:8000 Press Ctrl+C to stop.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>将其保存为server.js</p><p>打开cmd命令行，输入<code>node server.js</code>，回车。你将会看到如下画面：<br><img src="cmd_server.png" alt="server.js 命令行运行"><br><img src="browser_server.png" alt="server.js 运行结果"></p><p>第一行，请求node.js自带的’http’模块，并赋值给变量http;<br>接下来，利用http模块给我们提供的函数<code>createServer</code>，这时函数返回一个对象，这个对象有一个叫做listen的方法。<br>这个方法有一个数值型的参数。我们将数值传入这个对象的方法中，指定这个http服务器监听8000端口;<br>最后的<code>console.log()</code>将在程序运行后在控制台输出提示语句：<br><code>your server is running at http://localhost:8000</code>，<br>我们将<code>http://localhost:8000</code>复制到浏览器的地址栏就可以看到<code>Hello world!</code>了。此时第一个node.js的程序就完成了。</p><p>按下Ctrl+C键即可停止运行</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodeJs的环境搭建</title>
      <link href="/huan-jing/nodejs-install/"/>
      <url>/huan-jing/nodejs-install/</url>
      
        <content type="html"><![CDATA[<h1 id="node-js-amp-amp-npm-的安装"><a href="#node-js-amp-amp-npm-的安装" class="headerlink" title="node.js &amp;&amp; npm 的安装"></a>node.js &amp;&amp; npm 的安装</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Node.js 是一个基于 Chrome JavaScript 运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。Node.js 使用<a href="http://baike.baidu.com/view/536048.htm" target="_blank" rel="noopener">事件驱动</a>， 非阻塞 <a href="http://baike.baidu.com/subview/300881/11169495.htm" target="_blank" rel="noopener">I/O</a> 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。</p></blockquote><blockquote><p>NPM 的全称是 Node Package Manager，是一个 NodeJS 包管理和分发工具，已经成为了非官方的发布 Node 模块（包）的标准。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>下载</li></ol><p>首先我们需要到 <a href="https://nodejs.org/en/download" target="_blank" rel="noopener">node.js 官网下载页</a> 下载。</p><p><img src="nodejs.png" alt="nodejs 官网下载页面"></p><p>笔者的环境是 ubuntu ，下载的是 <code>Linux Binaries x64</code> 的包。</p><ol start="2"><li>解压</li></ol><p>因为下载的是 xz 的 tar 包，所以要用 xz 解压工具来解压。</p><p><code>sudo tar Jxvf node-v6.9.1-linux-x64.tar.xz -C /usr/local</code></p><pre><code>J 参数是告诉 tar 使用 xz 来进行后续操作。x 参数是告诉 tar 进行解压操作。v 参数是告诉 tar 显示解压过程。f 参数是指定解压文件。C 参数是告诉 tar 要解压到哪个目录。</code></pre><ol start="3"><li>改名<br>解压后，我们可以在 <code>/usr/local</code> 目录下看到我们解压后的文件。</li></ol><p><img src="decompression.png" alt="解压"></p><p><code>sudo mv /usr/local/node-v6.9.1-linux-x64/ /usr/local/node</code></p><p><img src="rename.png" alt="重命名"></p><ol start="3"><li>添加至环境变量</li></ol><p>执行 <code>sudo vim /etc/bash.bashrc</code> 修改配置文件，在文件的最后一行将 <code>/usr/local/node/bin</code> 添加至环境变量 PATH 中。</p><p><code>PATH=$PATH:"/usr/local/node/bin"</code></p><p><img src="node-add-to-path.png" alt="添加环境变量"></p><p>执行 <code>source /etc/bash.bashrc</code> 让我们刚刚做的修改生效。</p><p>执行 <code>echo $PATH</code> 看看我们的环境变量是否配置成功。</p><p><img src="examine.png" alt="检查"></p><p>执行 <code>node -v</code> 、<code>npm -v</code> 查看我们的 node.js 与 npm 是否安装成功。若出现如下结果，恭喜你，安装完成。</p><p><img src="install-end.png" alt="安装结束"></p><h3 id="菜鸟教程-提供的node-js-的搭建挺详细的。有需要的可以看看。"><a href="#菜鸟教程-提供的node-js-的搭建挺详细的。有需要的可以看看。" class="headerlink" title="菜鸟教程 提供的node.js 的搭建挺详细的。有需要的可以看看。"></a><em><a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">菜鸟教程</a></em> 提供的node.js 的搭建挺详细的。有需要的可以看看。</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdowm</title>
      <link href="/gong-ju/markdown/"/>
      <url>/gong-ju/markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdowm语法"><a href="#Markdowm语法" class="headerlink" title="Markdowm语法"></a>Markdowm语法</h1><h2 id="如果忘记了就回过头来看看吧！"><a href="#如果忘记了就回过头来看看吧！" class="headerlink" title="如果忘记了就回过头来看看吧！"></a>如果忘记了就回过头来看看吧！</h2><blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://wowubuntu.com/markdown" target="_blank" rel="noopener">Markdown 语法说明 (简体中文版)</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/wei-fen-lei/hello-world/"/>
      <url>/wei-fen-lei/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
